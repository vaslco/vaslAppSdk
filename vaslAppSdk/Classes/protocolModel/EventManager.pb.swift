// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: EventManager.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_General {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var comment: String = String()

  public var eventID: String = String()

  public var status: String = String()

  public var insertTime: String = String()

  public var creatorID: String = String()

  public var updateUserID: String = String()

  public var updateTime: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItemPanel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var abstractMsg: String {
    get {return _storage._abstractMsg}
    set {_uniqueStorage()._abstractMsg = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var leaderBoard: String {
    get {return _storage._leaderBoard}
    set {_uniqueStorage()._leaderBoard = newValue}
  }

  public var lotteryDate: String {
    get {return _storage._lotteryDate}
    set {_uniqueStorage()._lotteryDate = newValue}
  }

  public var startTime: String {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  public var endTime: String {
    get {return _storage._endTime}
    set {_uniqueStorage()._endTime = newValue}
  }

  public var creatorID: String {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  public var insertTime: String {
    get {return _storage._insertTime}
    set {_uniqueStorage()._insertTime = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var likeCount: Int64 {
    get {return _storage._likeCount}
    set {_uniqueStorage()._likeCount = newValue}
  }

  public var startLocationLat: Double {
    get {return _storage._startLocationLat}
    set {_uniqueStorage()._startLocationLat = newValue}
  }

  public var endLocationLat: Double {
    get {return _storage._endLocationLat}
    set {_uniqueStorage()._endLocationLat = newValue}
  }

  public var startLocationLng: Double {
    get {return _storage._startLocationLng}
    set {_uniqueStorage()._startLocationLng = newValue}
  }

  public var endLocationLng: Double {
    get {return _storage._endLocationLng}
    set {_uniqueStorage()._endLocationLng = newValue}
  }

  public var images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images {
    get {return _storage._images ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  public var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  public mutating func clearImages() {_uniqueStorage()._images = nil}

  public var subscriberStatus: String {
    get {return _storage._subscriberStatus}
    set {_uniqueStorage()._subscriberStatus = newValue}
  }

  public var achievement: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement] {
    get {return _storage._achievement}
    set {_uniqueStorage()._achievement = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItemPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var abstractMsg: String {
    get {return _storage._abstractMsg}
    set {_uniqueStorage()._abstractMsg = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var leaderBoard: String {
    get {return _storage._leaderBoard}
    set {_uniqueStorage()._leaderBoard = newValue}
  }

  public var lotteryDate: String {
    get {return _storage._lotteryDate}
    set {_uniqueStorage()._lotteryDate = newValue}
  }

  public var startTime: String {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  public var endTime: String {
    get {return _storage._endTime}
    set {_uniqueStorage()._endTime = newValue}
  }

  public var creatorID: String {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  public var insertTime: String {
    get {return _storage._insertTime}
    set {_uniqueStorage()._insertTime = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var likeCount: Int64 {
    get {return _storage._likeCount}
    set {_uniqueStorage()._likeCount = newValue}
  }

  public var startLocationLat: Double {
    get {return _storage._startLocationLat}
    set {_uniqueStorage()._startLocationLat = newValue}
  }

  public var endLocationLat: Double {
    get {return _storage._endLocationLat}
    set {_uniqueStorage()._endLocationLat = newValue}
  }

  public var startLocationLng: Double {
    get {return _storage._startLocationLng}
    set {_uniqueStorage()._startLocationLng = newValue}
  }

  public var endLocationLng: Double {
    get {return _storage._endLocationLng}
    set {_uniqueStorage()._endLocationLng = newValue}
  }

  public var images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images {
    get {return _storage._images ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  public var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  public mutating func clearImages() {_uniqueStorage()._images = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var size: Int64 = 0

  public var width: Int32 = 0

  public var height: Int32 = 0

  public var type: String = String()

  public var path: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var updateTime: String = String()

  public var userID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var leaderBoard: String {
    get {return _storage._leaderBoard}
    set {_uniqueStorage()._leaderBoard = newValue}
  }

  public var lotteryDate: String {
    get {return _storage._lotteryDate}
    set {_uniqueStorage()._lotteryDate = newValue}
  }

  public var startTime: String {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  public var endTime: String {
    get {return _storage._endTime}
    set {_uniqueStorage()._endTime = newValue}
  }

  public var creatorID: String {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  public var insertTime: String {
    get {return _storage._insertTime}
    set {_uniqueStorage()._insertTime = newValue}
  }

  public var eventStatus: String {
    get {return _storage._eventStatus}
    set {_uniqueStorage()._eventStatus = newValue}
  }

  public var likeCount: Int64 {
    get {return _storage._likeCount}
    set {_uniqueStorage()._likeCount = newValue}
  }

  public var startLocationLat: Double {
    get {return _storage._startLocationLat}
    set {_uniqueStorage()._startLocationLat = newValue}
  }

  public var endLocationLat: Double {
    get {return _storage._endLocationLat}
    set {_uniqueStorage()._endLocationLat = newValue}
  }

  public var startLocationLng: Double {
    get {return _storage._startLocationLng}
    set {_uniqueStorage()._startLocationLng = newValue}
  }

  public var endLocationLng: Double {
    get {return _storage._endLocationLng}
    set {_uniqueStorage()._endLocationLng = newValue}
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var abstractMsg: String {
    get {return _storage._abstractMsg}
    set {_uniqueStorage()._abstractMsg = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images {
    get {return _storage._images ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  public var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  public mutating func clearImages() {_uniqueStorage()._images = nil}

  public var history: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History] {
    get {return _storage._history}
    set {_uniqueStorage()._history = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var eventID: String = String()

  public var subscriberID: String = String()

  public var title: String = String()

  public var eventStatus: String = String()

  public var subscriberStatus: String = String()

  public var insertTime: String = String()

  public var step: Int64 = 0

  public var durationTime: String = String()

  public var distanceMove: Double = 0

  public var startTime: String = String()

  public var endTime: String = String()

  public var calories: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventSubscriberItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: String {
    get {return _storage._subscriberID}
    set {_uniqueStorage()._subscriberID = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var eventStatus: String {
    get {return _storage._eventStatus}
    set {_uniqueStorage()._eventStatus = newValue}
  }

  public var subscriberStatus: String {
    get {return _storage._subscriberStatus}
    set {_uniqueStorage()._subscriberStatus = newValue}
  }

  public var step: Int64 {
    get {return _storage._step}
    set {_uniqueStorage()._step = newValue}
  }

  public var durationTime: String {
    get {return _storage._durationTime}
    set {_uniqueStorage()._durationTime = newValue}
  }

  public var distanceMove: Double {
    get {return _storage._distanceMove}
    set {_uniqueStorage()._distanceMove = newValue}
  }

  public var calories: Int64 {
    get {return _storage._calories}
    set {_uniqueStorage()._calories = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var leaderBoard: String {
    get {return _storage._leaderBoard}
    set {_uniqueStorage()._leaderBoard = newValue}
  }

  public var lotteryDate: String {
    get {return _storage._lotteryDate}
    set {_uniqueStorage()._lotteryDate = newValue}
  }

  public var startTime: String {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  public var endTime: String {
    get {return _storage._endTime}
    set {_uniqueStorage()._endTime = newValue}
  }

  public var creatorID: String {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  public var insertTime: String {
    get {return _storage._insertTime}
    set {_uniqueStorage()._insertTime = newValue}
  }

  public var eventStatus: String {
    get {return _storage._eventStatus}
    set {_uniqueStorage()._eventStatus = newValue}
  }

  public var likeCount: Int64 {
    get {return _storage._likeCount}
    set {_uniqueStorage()._likeCount = newValue}
  }

  public var startLocationLat: Double {
    get {return _storage._startLocationLat}
    set {_uniqueStorage()._startLocationLat = newValue}
  }

  public var endLocationLat: Double {
    get {return _storage._endLocationLat}
    set {_uniqueStorage()._endLocationLat = newValue}
  }

  public var startLocationLng: Double {
    get {return _storage._startLocationLng}
    set {_uniqueStorage()._startLocationLng = newValue}
  }

  public var endLocationLng: Double {
    get {return _storage._endLocationLng}
    set {_uniqueStorage()._endLocationLng = newValue}
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var abstractMsg: String {
    get {return _storage._abstractMsg}
    set {_uniqueStorage()._abstractMsg = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images {
    get {return _storage._images ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  public var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  public mutating func clearImages() {_uniqueStorage()._images = nil}

  public var history: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History] {
    get {return _storage._history}
    set {_uniqueStorage()._history = newValue}
  }

  public var subscriberStatus: String {
    get {return _storage._subscriberStatus}
    set {_uniqueStorage()._subscriberStatus = newValue}
  }

  public var registeredCount: Int64 {
    get {return _storage._registeredCount}
    set {_uniqueStorage()._registeredCount = newValue}
  }

  public var startedCount: Int64 {
    get {return _storage._startedCount}
    set {_uniqueStorage()._startedCount = newValue}
  }

  public var endedCount: Int64 {
    get {return _storage._endedCount}
    set {_uniqueStorage()._endedCount = newValue}
  }

  public var eventID: String {
    get {return _storage._eventID}
    set {_uniqueStorage()._eventID = newValue}
  }

  public var userStartTime: Int64 {
    get {return _storage._userStartTime}
    set {_uniqueStorage()._userStartTime = newValue}
  }

  public var userEndTime: Int64 {
    get {return _storage._userEndTime}
    set {_uniqueStorage()._userEndTime = newValue}
  }

  public var achievement: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement] {
    get {return _storage._achievement}
    set {_uniqueStorage()._achievement = newValue}
  }

  public var step: Int64 {
    get {return _storage._step}
    set {_uniqueStorage()._step = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberEvents {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventSubscribers {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventSubscriberItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Gift] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftListApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Gift] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Gift {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var title: String = String()

  public var description_p: String = String()

  public var images: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Gift {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Gift()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Action {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var key: String = String()

  public var title: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var type: String = String()

  public var action: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Action] = []

  public var images: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images] = []

  public var target: Int64 = 0

  public var point: Int64 = 0

  public var title: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievementGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievemenList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievemenListApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumAllEvents {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumEvent {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumEvent()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalStep: Int64 = 0

  public var totalCalories: Int64 = 0

  public var totalDurationTime: Int64 = 0

  public var totalDistanceMove: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: String = String()

  public var profileNickName: String = String()

  public var userName: String = String()

  public var confirmedMobile: String = String()

  public var status: String = String()

  public var firstName: String = String()

  public var lastName: String = String()

  public var imageURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_MakeLottery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_WinnerList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Winner] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Winner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var winnerID: String {
    get {return _storage._winnerID}
    set {_uniqueStorage()._winnerID = newValue}
  }

  public var winnerStep: Int64 {
    get {return _storage._winnerStep}
    set {_uniqueStorage()._winnerStep = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.modules.event.manager.global.proto.holder"

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_General: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".General"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_General, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_General) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentItemPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "comment"),
    3: .same(proto: "eventId"),
    4: .same(proto: "status"),
    5: .same(proto: "insertTime"),
    6: .same(proto: "creatorId"),
    7: .same(proto: "updateUserId"),
    8: .same(proto: "updateTime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.comment)
      case 3: try decoder.decodeSingularStringField(value: &self.eventID)
      case 4: try decoder.decodeSingularStringField(value: &self.status)
      case 5: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 6: try decoder.decodeSingularStringField(value: &self.creatorID)
      case 7: try decoder.decodeSingularStringField(value: &self.updateUserID)
      case 8: try decoder.decodeSingularStringField(value: &self.updateTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.comment.isEmpty {
      try visitor.visitSingularStringField(value: self.comment, fieldNumber: 2)
    }
    if !self.eventID.isEmpty {
      try visitor.visitSingularStringField(value: self.eventID, fieldNumber: 3)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 4)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 5)
    }
    if !self.creatorID.isEmpty {
      try visitor.visitSingularStringField(value: self.creatorID, fieldNumber: 6)
    }
    if !self.updateUserID.isEmpty {
      try visitor.visitSingularStringField(value: self.updateUserID, fieldNumber: 7)
    }
    if !self.updateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.updateTime, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.comment != rhs.comment {return false}
    if lhs.eventID != rhs.eventID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.creatorID != rhs.creatorID {return false}
    if lhs.updateUserID != rhs.updateUserID {return false}
    if lhs.updateTime != rhs.updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCommentPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentPanel, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentPanel) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCommentApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentApi, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentApi) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListEventManagerPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerPanel, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerPanel) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListEventManagerApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerApi, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerApi) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetEventManagerItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "abstractMSG"),
    4: .same(proto: "description"),
    5: .same(proto: "leaderBoard"),
    6: .same(proto: "lotteryDate"),
    7: .same(proto: "startTime"),
    8: .same(proto: "endTime"),
    9: .same(proto: "creatorId"),
    10: .same(proto: "insertTime"),
    11: .same(proto: "status"),
    12: .same(proto: "likeCount"),
    13: .same(proto: "startLocationLat"),
    14: .same(proto: "endLocationLat"),
    15: .same(proto: "startLocationLng"),
    16: .same(proto: "endLocationLng"),
    17: .same(proto: "images"),
    18: .same(proto: "subscriberStatus"),
    19: .same(proto: "achievement"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _title: String = String()
    var _abstractMsg: String = String()
    var _description_p: String = String()
    var _leaderBoard: String = String()
    var _lotteryDate: String = String()
    var _startTime: String = String()
    var _endTime: String = String()
    var _creatorID: String = String()
    var _insertTime: String = String()
    var _status: String = String()
    var _likeCount: Int64 = 0
    var _startLocationLat: Double = 0
    var _endLocationLat: Double = 0
    var _startLocationLng: Double = 0
    var _endLocationLng: Double = 0
    var _images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images? = nil
    var _subscriberStatus: String = String()
    var _achievement: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _abstractMsg = source._abstractMsg
      _description_p = source._description_p
      _leaderBoard = source._leaderBoard
      _lotteryDate = source._lotteryDate
      _startTime = source._startTime
      _endTime = source._endTime
      _creatorID = source._creatorID
      _insertTime = source._insertTime
      _status = source._status
      _likeCount = source._likeCount
      _startLocationLat = source._startLocationLat
      _endLocationLat = source._endLocationLat
      _startLocationLng = source._startLocationLng
      _endLocationLng = source._endLocationLng
      _images = source._images
      _subscriberStatus = source._subscriberStatus
      _achievement = source._achievement
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._abstractMsg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularStringField(value: &_storage._leaderBoard)
        case 6: try decoder.decodeSingularStringField(value: &_storage._lotteryDate)
        case 7: try decoder.decodeSingularStringField(value: &_storage._startTime)
        case 8: try decoder.decodeSingularStringField(value: &_storage._endTime)
        case 9: try decoder.decodeSingularStringField(value: &_storage._creatorID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._insertTime)
        case 11: try decoder.decodeSingularStringField(value: &_storage._status)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._likeCount)
        case 13: try decoder.decodeSingularDoubleField(value: &_storage._startLocationLat)
        case 14: try decoder.decodeSingularDoubleField(value: &_storage._endLocationLat)
        case 15: try decoder.decodeSingularDoubleField(value: &_storage._startLocationLng)
        case 16: try decoder.decodeSingularDoubleField(value: &_storage._endLocationLng)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._images)
        case 18: try decoder.decodeSingularStringField(value: &_storage._subscriberStatus)
        case 19: try decoder.decodeRepeatedMessageField(value: &_storage._achievement)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._abstractMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._abstractMsg, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if !_storage._leaderBoard.isEmpty {
        try visitor.visitSingularStringField(value: _storage._leaderBoard, fieldNumber: 5)
      }
      if !_storage._lotteryDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lotteryDate, fieldNumber: 6)
      }
      if !_storage._startTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startTime, fieldNumber: 7)
      }
      if !_storage._endTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endTime, fieldNumber: 8)
      }
      if !_storage._creatorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._creatorID, fieldNumber: 9)
      }
      if !_storage._insertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insertTime, fieldNumber: 10)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 11)
      }
      if _storage._likeCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likeCount, fieldNumber: 12)
      }
      if _storage._startLocationLat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._startLocationLat, fieldNumber: 13)
      }
      if _storage._endLocationLat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._endLocationLat, fieldNumber: 14)
      }
      if _storage._startLocationLng != 0 {
        try visitor.visitSingularDoubleField(value: _storage._startLocationLng, fieldNumber: 15)
      }
      if _storage._endLocationLng != 0 {
        try visitor.visitSingularDoubleField(value: _storage._endLocationLng, fieldNumber: 16)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if !_storage._subscriberStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberStatus, fieldNumber: 18)
      }
      if !_storage._achievement.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._achievement, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItem, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._abstractMsg != rhs_storage._abstractMsg {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._leaderBoard != rhs_storage._leaderBoard {return false}
        if _storage._lotteryDate != rhs_storage._lotteryDate {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._insertTime != rhs_storage._insertTime {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._likeCount != rhs_storage._likeCount {return false}
        if _storage._startLocationLat != rhs_storage._startLocationLat {return false}
        if _storage._endLocationLat != rhs_storage._endLocationLat {return false}
        if _storage._startLocationLng != rhs_storage._startLocationLng {return false}
        if _storage._endLocationLng != rhs_storage._endLocationLng {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._subscriberStatus != rhs_storage._subscriberStatus {return false}
        if _storage._achievement != rhs_storage._achievement {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItemPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetEventManagerItemPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "abstractMSG"),
    4: .same(proto: "description"),
    5: .same(proto: "leaderBoard"),
    6: .same(proto: "lotteryDate"),
    7: .same(proto: "startTime"),
    8: .same(proto: "endTime"),
    9: .same(proto: "creatorId"),
    10: .same(proto: "insertTime"),
    11: .same(proto: "status"),
    12: .same(proto: "likeCount"),
    13: .same(proto: "startLocationLat"),
    14: .same(proto: "endLocationLat"),
    15: .same(proto: "startLocationLng"),
    16: .same(proto: "endLocationLng"),
    17: .same(proto: "images"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _title: String = String()
    var _abstractMsg: String = String()
    var _description_p: String = String()
    var _leaderBoard: String = String()
    var _lotteryDate: String = String()
    var _startTime: String = String()
    var _endTime: String = String()
    var _creatorID: String = String()
    var _insertTime: String = String()
    var _status: String = String()
    var _likeCount: Int64 = 0
    var _startLocationLat: Double = 0
    var _endLocationLat: Double = 0
    var _startLocationLng: Double = 0
    var _endLocationLng: Double = 0
    var _images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _abstractMsg = source._abstractMsg
      _description_p = source._description_p
      _leaderBoard = source._leaderBoard
      _lotteryDate = source._lotteryDate
      _startTime = source._startTime
      _endTime = source._endTime
      _creatorID = source._creatorID
      _insertTime = source._insertTime
      _status = source._status
      _likeCount = source._likeCount
      _startLocationLat = source._startLocationLat
      _endLocationLat = source._endLocationLat
      _startLocationLng = source._startLocationLng
      _endLocationLng = source._endLocationLng
      _images = source._images
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._abstractMsg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularStringField(value: &_storage._leaderBoard)
        case 6: try decoder.decodeSingularStringField(value: &_storage._lotteryDate)
        case 7: try decoder.decodeSingularStringField(value: &_storage._startTime)
        case 8: try decoder.decodeSingularStringField(value: &_storage._endTime)
        case 9: try decoder.decodeSingularStringField(value: &_storage._creatorID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._insertTime)
        case 11: try decoder.decodeSingularStringField(value: &_storage._status)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._likeCount)
        case 13: try decoder.decodeSingularDoubleField(value: &_storage._startLocationLat)
        case 14: try decoder.decodeSingularDoubleField(value: &_storage._endLocationLat)
        case 15: try decoder.decodeSingularDoubleField(value: &_storage._startLocationLng)
        case 16: try decoder.decodeSingularDoubleField(value: &_storage._endLocationLng)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._images)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._abstractMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._abstractMsg, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if !_storage._leaderBoard.isEmpty {
        try visitor.visitSingularStringField(value: _storage._leaderBoard, fieldNumber: 5)
      }
      if !_storage._lotteryDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lotteryDate, fieldNumber: 6)
      }
      if !_storage._startTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startTime, fieldNumber: 7)
      }
      if !_storage._endTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endTime, fieldNumber: 8)
      }
      if !_storage._creatorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._creatorID, fieldNumber: 9)
      }
      if !_storage._insertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insertTime, fieldNumber: 10)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 11)
      }
      if _storage._likeCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likeCount, fieldNumber: 12)
      }
      if _storage._startLocationLat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._startLocationLat, fieldNumber: 13)
      }
      if _storage._endLocationLat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._endLocationLat, fieldNumber: 14)
      }
      if _storage._startLocationLng != 0 {
        try visitor.visitSingularDoubleField(value: _storage._startLocationLng, fieldNumber: 15)
      }
      if _storage._endLocationLng != 0 {
        try visitor.visitSingularDoubleField(value: _storage._endLocationLng, fieldNumber: 16)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItemPanel, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItemPanel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._abstractMsg != rhs_storage._abstractMsg {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._leaderBoard != rhs_storage._leaderBoard {return false}
        if _storage._lotteryDate != rhs_storage._lotteryDate {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._insertTime != rhs_storage._insertTime {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._likeCount != rhs_storage._likeCount {return false}
        if _storage._startLocationLat != rhs_storage._startLocationLat {return false}
        if _storage._endLocationLat != rhs_storage._endLocationLat {return false}
        if _storage._startLocationLng != rhs_storage._startLocationLng {return false}
        if _storage._endLocationLng != rhs_storage._endLocationLng {return false}
        if _storage._images != rhs_storage._images {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Images"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "size"),
    3: .same(proto: "width"),
    4: .same(proto: "height"),
    5: .same(proto: "type"),
    6: .same(proto: "path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularInt64Field(value: &self.size)
      case 3: try decoder.decodeSingularInt32Field(value: &self.width)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.type)
      case 6: try decoder.decodeSingularStringField(value: &self.path)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 5)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.size != rhs.size {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.type != rhs.type {return false}
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".History"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "updateTime"),
    2: .same(proto: "userId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.updateTime)
      case 2: try decoder.decodeSingularStringField(value: &self.userID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.updateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.updateTime, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History) -> Bool {
    if lhs.updateTime != rhs.updateTime {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetEventManagerPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "description"),
    5: .same(proto: "leaderBoard"),
    6: .same(proto: "lotteryDate"),
    7: .same(proto: "startTime"),
    8: .same(proto: "endTime"),
    9: .same(proto: "creatorId"),
    10: .same(proto: "insertTime"),
    11: .same(proto: "eventStatus"),
    12: .same(proto: "likeCount"),
    13: .same(proto: "startLocationLat"),
    14: .same(proto: "endLocationLat"),
    15: .same(proto: "startLocationLng"),
    16: .same(proto: "endLocationLng"),
    17: .same(proto: "id"),
    18: .same(proto: "abstractMSG"),
    19: .same(proto: "title"),
    20: .same(proto: "images"),
    21: .same(proto: "history"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _description_p: String = String()
    var _leaderBoard: String = String()
    var _lotteryDate: String = String()
    var _startTime: String = String()
    var _endTime: String = String()
    var _creatorID: String = String()
    var _insertTime: String = String()
    var _eventStatus: String = String()
    var _likeCount: Int64 = 0
    var _startLocationLat: Double = 0
    var _endLocationLat: Double = 0
    var _startLocationLng: Double = 0
    var _endLocationLng: Double = 0
    var _id: String = String()
    var _abstractMsg: String = String()
    var _title: String = String()
    var _images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images? = nil
    var _history: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _description_p = source._description_p
      _leaderBoard = source._leaderBoard
      _lotteryDate = source._lotteryDate
      _startTime = source._startTime
      _endTime = source._endTime
      _creatorID = source._creatorID
      _insertTime = source._insertTime
      _eventStatus = source._eventStatus
      _likeCount = source._likeCount
      _startLocationLat = source._startLocationLat
      _endLocationLat = source._endLocationLat
      _startLocationLng = source._startLocationLng
      _endLocationLng = source._endLocationLng
      _id = source._id
      _abstractMsg = source._abstractMsg
      _title = source._title
      _images = source._images
      _history = source._history
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularStringField(value: &_storage._leaderBoard)
        case 6: try decoder.decodeSingularStringField(value: &_storage._lotteryDate)
        case 7: try decoder.decodeSingularStringField(value: &_storage._startTime)
        case 8: try decoder.decodeSingularStringField(value: &_storage._endTime)
        case 9: try decoder.decodeSingularStringField(value: &_storage._creatorID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._insertTime)
        case 11: try decoder.decodeSingularStringField(value: &_storage._eventStatus)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._likeCount)
        case 13: try decoder.decodeSingularDoubleField(value: &_storage._startLocationLat)
        case 14: try decoder.decodeSingularDoubleField(value: &_storage._endLocationLat)
        case 15: try decoder.decodeSingularDoubleField(value: &_storage._startLocationLng)
        case 16: try decoder.decodeSingularDoubleField(value: &_storage._endLocationLng)
        case 17: try decoder.decodeSingularStringField(value: &_storage._id)
        case 18: try decoder.decodeSingularStringField(value: &_storage._abstractMsg)
        case 19: try decoder.decodeSingularStringField(value: &_storage._title)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._images)
        case 21: try decoder.decodeRepeatedMessageField(value: &_storage._history)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if !_storage._leaderBoard.isEmpty {
        try visitor.visitSingularStringField(value: _storage._leaderBoard, fieldNumber: 5)
      }
      if !_storage._lotteryDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lotteryDate, fieldNumber: 6)
      }
      if !_storage._startTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startTime, fieldNumber: 7)
      }
      if !_storage._endTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endTime, fieldNumber: 8)
      }
      if !_storage._creatorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._creatorID, fieldNumber: 9)
      }
      if !_storage._insertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insertTime, fieldNumber: 10)
      }
      if !_storage._eventStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventStatus, fieldNumber: 11)
      }
      if _storage._likeCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likeCount, fieldNumber: 12)
      }
      if _storage._startLocationLat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._startLocationLat, fieldNumber: 13)
      }
      if _storage._endLocationLat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._endLocationLat, fieldNumber: 14)
      }
      if _storage._startLocationLng != 0 {
        try visitor.visitSingularDoubleField(value: _storage._startLocationLng, fieldNumber: 15)
      }
      if _storage._endLocationLng != 0 {
        try visitor.visitSingularDoubleField(value: _storage._endLocationLng, fieldNumber: 16)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 17)
      }
      if !_storage._abstractMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._abstractMsg, fieldNumber: 18)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 19)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if !_storage._history.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._history, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerPanel, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerPanel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._leaderBoard != rhs_storage._leaderBoard {return false}
        if _storage._lotteryDate != rhs_storage._lotteryDate {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._insertTime != rhs_storage._insertTime {return false}
        if _storage._eventStatus != rhs_storage._eventStatus {return false}
        if _storage._likeCount != rhs_storage._likeCount {return false}
        if _storage._startLocationLat != rhs_storage._startLocationLat {return false}
        if _storage._endLocationLat != rhs_storage._endLocationLat {return false}
        if _storage._startLocationLng != rhs_storage._startLocationLng {return false}
        if _storage._endLocationLng != rhs_storage._endLocationLng {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._abstractMsg != rhs_storage._abstractMsg {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._history != rhs_storage._history {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "eventId"),
    3: .same(proto: "subscriberId"),
    4: .same(proto: "title"),
    5: .same(proto: "eventStatus"),
    6: .same(proto: "subscriberStatus"),
    7: .same(proto: "insertTime"),
    8: .same(proto: "step"),
    9: .same(proto: "durationTime"),
    10: .same(proto: "distanceMove"),
    11: .same(proto: "startTime"),
    12: .same(proto: "endTime"),
    13: .same(proto: "calories"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.eventID)
      case 3: try decoder.decodeSingularStringField(value: &self.subscriberID)
      case 4: try decoder.decodeSingularStringField(value: &self.title)
      case 5: try decoder.decodeSingularStringField(value: &self.eventStatus)
      case 6: try decoder.decodeSingularStringField(value: &self.subscriberStatus)
      case 7: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 8: try decoder.decodeSingularInt64Field(value: &self.step)
      case 9: try decoder.decodeSingularStringField(value: &self.durationTime)
      case 10: try decoder.decodeSingularDoubleField(value: &self.distanceMove)
      case 11: try decoder.decodeSingularStringField(value: &self.startTime)
      case 12: try decoder.decodeSingularStringField(value: &self.endTime)
      case 13: try decoder.decodeSingularInt64Field(value: &self.calories)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.eventID.isEmpty {
      try visitor.visitSingularStringField(value: self.eventID, fieldNumber: 2)
    }
    if !self.subscriberID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberID, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.eventStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.eventStatus, fieldNumber: 5)
    }
    if !self.subscriberStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberStatus, fieldNumber: 6)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 7)
    }
    if self.step != 0 {
      try visitor.visitSingularInt64Field(value: self.step, fieldNumber: 8)
    }
    if !self.durationTime.isEmpty {
      try visitor.visitSingularStringField(value: self.durationTime, fieldNumber: 9)
    }
    if self.distanceMove != 0 {
      try visitor.visitSingularDoubleField(value: self.distanceMove, fieldNumber: 10)
    }
    if !self.startTime.isEmpty {
      try visitor.visitSingularStringField(value: self.startTime, fieldNumber: 11)
    }
    if !self.endTime.isEmpty {
      try visitor.visitSingularStringField(value: self.endTime, fieldNumber: 12)
    }
    if self.calories != 0 {
      try visitor.visitSingularInt64Field(value: self.calories, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventItem, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventItem) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.eventID != rhs.eventID {return false}
    if lhs.subscriberID != rhs.subscriberID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.eventStatus != rhs.eventStatus {return false}
    if lhs.subscriberStatus != rhs.subscriberStatus {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.step != rhs.step {return false}
    if lhs.durationTime != rhs.durationTime {return false}
    if lhs.distanceMove != rhs.distanceMove {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.calories != rhs.calories {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventSubscriberItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventSubscriberItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscriberId"),
    2: .same(proto: "title"),
    3: .same(proto: "eventStatus"),
    4: .same(proto: "subscriberStatus"),
    5: .same(proto: "step"),
    6: .same(proto: "durationTime"),
    7: .same(proto: "distanceMove"),
    8: .same(proto: "calories"),
    9: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _subscriberID: String = String()
    var _title: String = String()
    var _eventStatus: String = String()
    var _subscriberStatus: String = String()
    var _step: Int64 = 0
    var _durationTime: String = String()
    var _distanceMove: Double = 0
    var _calories: Int64 = 0
    var _data: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriberID = source._subscriberID
      _title = source._title
      _eventStatus = source._eventStatus
      _subscriberStatus = source._subscriberStatus
      _step = source._step
      _durationTime = source._durationTime
      _distanceMove = source._distanceMove
      _calories = source._calories
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._subscriberID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._eventStatus)
        case 4: try decoder.decodeSingularStringField(value: &_storage._subscriberStatus)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._step)
        case 6: try decoder.decodeSingularStringField(value: &_storage._durationTime)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._distanceMove)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._calories)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._subscriberID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberID, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._eventStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventStatus, fieldNumber: 3)
      }
      if !_storage._subscriberStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberStatus, fieldNumber: 4)
      }
      if _storage._step != 0 {
        try visitor.visitSingularInt64Field(value: _storage._step, fieldNumber: 5)
      }
      if !_storage._durationTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._durationTime, fieldNumber: 6)
      }
      if _storage._distanceMove != 0 {
        try visitor.visitSingularDoubleField(value: _storage._distanceMove, fieldNumber: 7)
      }
      if _storage._calories != 0 {
        try visitor.visitSingularInt64Field(value: _storage._calories, fieldNumber: 8)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventSubscriberItem, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventSubscriberItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._eventStatus != rhs_storage._eventStatus {return false}
        if _storage._subscriberStatus != rhs_storage._subscriberStatus {return false}
        if _storage._step != rhs_storage._step {return false}
        if _storage._durationTime != rhs_storage._durationTime {return false}
        if _storage._distanceMove != rhs_storage._distanceMove {return false}
        if _storage._calories != rhs_storage._calories {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetEventManagerApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "description"),
    5: .same(proto: "leaderBoard"),
    6: .same(proto: "lotteryDate"),
    7: .same(proto: "startTime"),
    8: .same(proto: "endTime"),
    9: .same(proto: "creatorId"),
    10: .same(proto: "insertTime"),
    11: .same(proto: "eventStatus"),
    12: .same(proto: "likeCount"),
    13: .same(proto: "startLocationLat"),
    14: .same(proto: "endLocationLat"),
    15: .same(proto: "startLocationLng"),
    16: .same(proto: "endLocationLng"),
    17: .same(proto: "id"),
    18: .same(proto: "abstractMSG"),
    19: .same(proto: "title"),
    20: .same(proto: "images"),
    21: .same(proto: "history"),
    22: .same(proto: "subscriberStatus"),
    23: .same(proto: "registeredCount"),
    24: .same(proto: "startedCount"),
    25: .same(proto: "endedCount"),
    26: .same(proto: "eventId"),
    27: .same(proto: "userStartTime"),
    28: .same(proto: "userEndTime"),
    29: .same(proto: "achievement"),
    30: .same(proto: "step"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _description_p: String = String()
    var _leaderBoard: String = String()
    var _lotteryDate: String = String()
    var _startTime: String = String()
    var _endTime: String = String()
    var _creatorID: String = String()
    var _insertTime: String = String()
    var _eventStatus: String = String()
    var _likeCount: Int64 = 0
    var _startLocationLat: Double = 0
    var _endLocationLat: Double = 0
    var _startLocationLng: Double = 0
    var _endLocationLng: Double = 0
    var _id: String = String()
    var _abstractMsg: String = String()
    var _title: String = String()
    var _images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images? = nil
    var _history: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History] = []
    var _subscriberStatus: String = String()
    var _registeredCount: Int64 = 0
    var _startedCount: Int64 = 0
    var _endedCount: Int64 = 0
    var _eventID: String = String()
    var _userStartTime: Int64 = 0
    var _userEndTime: Int64 = 0
    var _achievement: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement] = []
    var _step: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _description_p = source._description_p
      _leaderBoard = source._leaderBoard
      _lotteryDate = source._lotteryDate
      _startTime = source._startTime
      _endTime = source._endTime
      _creatorID = source._creatorID
      _insertTime = source._insertTime
      _eventStatus = source._eventStatus
      _likeCount = source._likeCount
      _startLocationLat = source._startLocationLat
      _endLocationLat = source._endLocationLat
      _startLocationLng = source._startLocationLng
      _endLocationLng = source._endLocationLng
      _id = source._id
      _abstractMsg = source._abstractMsg
      _title = source._title
      _images = source._images
      _history = source._history
      _subscriberStatus = source._subscriberStatus
      _registeredCount = source._registeredCount
      _startedCount = source._startedCount
      _endedCount = source._endedCount
      _eventID = source._eventID
      _userStartTime = source._userStartTime
      _userEndTime = source._userEndTime
      _achievement = source._achievement
      _step = source._step
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularStringField(value: &_storage._leaderBoard)
        case 6: try decoder.decodeSingularStringField(value: &_storage._lotteryDate)
        case 7: try decoder.decodeSingularStringField(value: &_storage._startTime)
        case 8: try decoder.decodeSingularStringField(value: &_storage._endTime)
        case 9: try decoder.decodeSingularStringField(value: &_storage._creatorID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._insertTime)
        case 11: try decoder.decodeSingularStringField(value: &_storage._eventStatus)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._likeCount)
        case 13: try decoder.decodeSingularDoubleField(value: &_storage._startLocationLat)
        case 14: try decoder.decodeSingularDoubleField(value: &_storage._endLocationLat)
        case 15: try decoder.decodeSingularDoubleField(value: &_storage._startLocationLng)
        case 16: try decoder.decodeSingularDoubleField(value: &_storage._endLocationLng)
        case 17: try decoder.decodeSingularStringField(value: &_storage._id)
        case 18: try decoder.decodeSingularStringField(value: &_storage._abstractMsg)
        case 19: try decoder.decodeSingularStringField(value: &_storage._title)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._images)
        case 21: try decoder.decodeRepeatedMessageField(value: &_storage._history)
        case 22: try decoder.decodeSingularStringField(value: &_storage._subscriberStatus)
        case 23: try decoder.decodeSingularInt64Field(value: &_storage._registeredCount)
        case 24: try decoder.decodeSingularInt64Field(value: &_storage._startedCount)
        case 25: try decoder.decodeSingularInt64Field(value: &_storage._endedCount)
        case 26: try decoder.decodeSingularStringField(value: &_storage._eventID)
        case 27: try decoder.decodeSingularInt64Field(value: &_storage._userStartTime)
        case 28: try decoder.decodeSingularInt64Field(value: &_storage._userEndTime)
        case 29: try decoder.decodeRepeatedMessageField(value: &_storage._achievement)
        case 30: try decoder.decodeSingularInt64Field(value: &_storage._step)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if !_storage._leaderBoard.isEmpty {
        try visitor.visitSingularStringField(value: _storage._leaderBoard, fieldNumber: 5)
      }
      if !_storage._lotteryDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lotteryDate, fieldNumber: 6)
      }
      if !_storage._startTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startTime, fieldNumber: 7)
      }
      if !_storage._endTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endTime, fieldNumber: 8)
      }
      if !_storage._creatorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._creatorID, fieldNumber: 9)
      }
      if !_storage._insertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insertTime, fieldNumber: 10)
      }
      if !_storage._eventStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventStatus, fieldNumber: 11)
      }
      if _storage._likeCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likeCount, fieldNumber: 12)
      }
      if _storage._startLocationLat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._startLocationLat, fieldNumber: 13)
      }
      if _storage._endLocationLat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._endLocationLat, fieldNumber: 14)
      }
      if _storage._startLocationLng != 0 {
        try visitor.visitSingularDoubleField(value: _storage._startLocationLng, fieldNumber: 15)
      }
      if _storage._endLocationLng != 0 {
        try visitor.visitSingularDoubleField(value: _storage._endLocationLng, fieldNumber: 16)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 17)
      }
      if !_storage._abstractMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._abstractMsg, fieldNumber: 18)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 19)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if !_storage._history.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._history, fieldNumber: 21)
      }
      if !_storage._subscriberStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberStatus, fieldNumber: 22)
      }
      if _storage._registeredCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._registeredCount, fieldNumber: 23)
      }
      if _storage._startedCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startedCount, fieldNumber: 24)
      }
      if _storage._endedCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endedCount, fieldNumber: 25)
      }
      if !_storage._eventID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventID, fieldNumber: 26)
      }
      if _storage._userStartTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._userStartTime, fieldNumber: 27)
      }
      if _storage._userEndTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._userEndTime, fieldNumber: 28)
      }
      if !_storage._achievement.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._achievement, fieldNumber: 29)
      }
      if _storage._step != 0 {
        try visitor.visitSingularInt64Field(value: _storage._step, fieldNumber: 30)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerApi, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerApi) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._leaderBoard != rhs_storage._leaderBoard {return false}
        if _storage._lotteryDate != rhs_storage._lotteryDate {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._insertTime != rhs_storage._insertTime {return false}
        if _storage._eventStatus != rhs_storage._eventStatus {return false}
        if _storage._likeCount != rhs_storage._likeCount {return false}
        if _storage._startLocationLat != rhs_storage._startLocationLat {return false}
        if _storage._endLocationLat != rhs_storage._endLocationLat {return false}
        if _storage._startLocationLng != rhs_storage._startLocationLng {return false}
        if _storage._endLocationLng != rhs_storage._endLocationLng {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._abstractMsg != rhs_storage._abstractMsg {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._history != rhs_storage._history {return false}
        if _storage._subscriberStatus != rhs_storage._subscriberStatus {return false}
        if _storage._registeredCount != rhs_storage._registeredCount {return false}
        if _storage._startedCount != rhs_storage._startedCount {return false}
        if _storage._endedCount != rhs_storage._endedCount {return false}
        if _storage._eventID != rhs_storage._eventID {return false}
        if _storage._userStartTime != rhs_storage._userStartTime {return false}
        if _storage._userEndTime != rhs_storage._userEndTime {return false}
        if _storage._achievement != rhs_storage._achievement {return false}
        if _storage._step != rhs_storage._step {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberEvents: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberEvents"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberEvents, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberEvents) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventSubscribers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventSubscribers"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventSubscribers, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventSubscribers) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GiftList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftList, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftListApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GiftListApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftListApi, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftListApi) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Gift: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Gift"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "images"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.images)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.images.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.images, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Gift, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Gift) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.images != rhs.images {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GiftGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Gift? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftGet, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GiftGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Action"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
    3: .same(proto: "title"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.key)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Action, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Action) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.key != rhs.key {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Achievement"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "action"),
    4: .same(proto: "images"),
    5: .same(proto: "target"),
    6: .same(proto: "point"),
    7: .same(proto: "title"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.action)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.images)
      case 5: try decoder.decodeSingularInt64Field(value: &self.target)
      case 6: try decoder.decodeSingularInt64Field(value: &self.point)
      case 7: try decoder.decodeSingularStringField(value: &self.title)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.action, fieldNumber: 3)
    }
    if !self.images.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.images, fieldNumber: 4)
    }
    if self.target != 0 {
      try visitor.visitSingularInt64Field(value: self.target, fieldNumber: 5)
    }
    if self.point != 0 {
      try visitor.visitSingularInt64Field(value: self.point, fieldNumber: 6)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.action != rhs.action {return false}
    if lhs.images != rhs.images {return false}
    if lhs.target != rhs.target {return false}
    if lhs.point != rhs.point {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievementGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AchievementGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Achievement? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievementGet, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievementGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievemenList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AchievemenList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievemenList, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievemenList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievemenListApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AchievemenListApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievemenListApi, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_AchievemenListApi) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumAllEvents: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SumAllEvents"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumEvent? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumAllEvents, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumAllEvents) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SumEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "totalStep"),
    2: .same(proto: "totalCalories"),
    3: .same(proto: "totalDurationTime"),
    4: .same(proto: "totalDistanceMove"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.totalStep)
      case 2: try decoder.decodeSingularInt64Field(value: &self.totalCalories)
      case 3: try decoder.decodeSingularInt64Field(value: &self.totalDurationTime)
      case 4: try decoder.decodeSingularDoubleField(value: &self.totalDistanceMove)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalStep != 0 {
      try visitor.visitSingularInt64Field(value: self.totalStep, fieldNumber: 1)
    }
    if self.totalCalories != 0 {
      try visitor.visitSingularInt64Field(value: self.totalCalories, fieldNumber: 2)
    }
    if self.totalDurationTime != 0 {
      try visitor.visitSingularInt64Field(value: self.totalDurationTime, fieldNumber: 3)
    }
    if self.totalDistanceMove != 0 {
      try visitor.visitSingularDoubleField(value: self.totalDistanceMove, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumEvent, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SumEvent) -> Bool {
    if lhs.totalStep != rhs.totalStep {return false}
    if lhs.totalCalories != rhs.totalCalories {return false}
    if lhs.totalDurationTime != rhs.totalDurationTime {return false}
    if lhs.totalDistanceMove != rhs.totalDistanceMove {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscriberId"),
    2: .same(proto: "profileNickName"),
    3: .same(proto: "userName"),
    4: .same(proto: "confirmedMobile"),
    5: .same(proto: "status"),
    6: .same(proto: "firstName"),
    7: .same(proto: "lastName"),
    8: .same(proto: "imageUrl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.subscriberID)
      case 2: try decoder.decodeSingularStringField(value: &self.profileNickName)
      case 3: try decoder.decodeSingularStringField(value: &self.userName)
      case 4: try decoder.decodeSingularStringField(value: &self.confirmedMobile)
      case 5: try decoder.decodeSingularStringField(value: &self.status)
      case 6: try decoder.decodeSingularStringField(value: &self.firstName)
      case 7: try decoder.decodeSingularStringField(value: &self.lastName)
      case 8: try decoder.decodeSingularStringField(value: &self.imageURL)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subscriberID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberID, fieldNumber: 1)
    }
    if !self.profileNickName.isEmpty {
      try visitor.visitSingularStringField(value: self.profileNickName, fieldNumber: 2)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 3)
    }
    if !self.confirmedMobile.isEmpty {
      try visitor.visitSingularStringField(value: self.confirmedMobile, fieldNumber: 4)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 5)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 6)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 7)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo) -> Bool {
    if lhs.subscriberID != rhs.subscriberID {return false}
    if lhs.profileNickName != rhs.profileNickName {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.confirmedMobile != rhs.confirmedMobile {return false}
    if lhs.status != rhs.status {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_MakeLottery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MakeLottery"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_MakeLottery, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_MakeLottery) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_WinnerList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WinnerList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_WinnerList, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_WinnerList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Winner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Winner"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "winnerId"),
    2: .same(proto: "winnerStep"),
    3: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _winnerID: String = String()
    var _winnerStep: Int64 = 0
    var _data: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _winnerID = source._winnerID
      _winnerStep = source._winnerStep
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._winnerID)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._winnerStep)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._winnerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._winnerID, fieldNumber: 1)
      }
      if _storage._winnerStep != 0 {
        try visitor.visitSingularInt64Field(value: _storage._winnerStep, fieldNumber: 2)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Winner, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Winner) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._winnerID != rhs_storage._winnerID {return false}
        if _storage._winnerStep != rhs_storage._winnerStep {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
