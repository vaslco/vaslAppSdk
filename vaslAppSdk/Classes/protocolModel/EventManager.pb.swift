// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: EventManager.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_General {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var comment: String = String()

  public var eventID: String = String()

  public var status: String = String()

  public var insertTime: String = String()

  public var creatorID: String = String()

  public var updateUserID: String = String()

  public var updateTime: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var abstractMsg: String {
    get {return _storage._abstractMsg}
    set {_uniqueStorage()._abstractMsg = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var leaderBoard: String {
    get {return _storage._leaderBoard}
    set {_uniqueStorage()._leaderBoard = newValue}
  }

  public var lotteryDate: String {
    get {return _storage._lotteryDate}
    set {_uniqueStorage()._lotteryDate = newValue}
  }

  public var startTime: String {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  public var endTime: String {
    get {return _storage._endTime}
    set {_uniqueStorage()._endTime = newValue}
  }

  public var creatorID: String {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  public var insertTime: String {
    get {return _storage._insertTime}
    set {_uniqueStorage()._insertTime = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var likeCount: Int64 {
    get {return _storage._likeCount}
    set {_uniqueStorage()._likeCount = newValue}
  }

  public var startLocationLat: Int64 {
    get {return _storage._startLocationLat}
    set {_uniqueStorage()._startLocationLat = newValue}
  }

  public var endLocationLat: Int64 {
    get {return _storage._endLocationLat}
    set {_uniqueStorage()._endLocationLat = newValue}
  }

  public var startLocationLng: Int64 {
    get {return _storage._startLocationLng}
    set {_uniqueStorage()._startLocationLng = newValue}
  }

  public var endLocationLng: Int64 {
    get {return _storage._endLocationLng}
    set {_uniqueStorage()._endLocationLng = newValue}
  }

  public var images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images {
    get {return _storage._images ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  public var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  public mutating func clearImages() {_uniqueStorage()._images = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var size: Int64 = 0

  public var width: Int32 = 0

  public var height: Int32 = 0

  public var type: String = String()

  public var path: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var updateTime: String = String()

  public var userID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var leaderBoard: String {
    get {return _storage._leaderBoard}
    set {_uniqueStorage()._leaderBoard = newValue}
  }

  public var lotteryDate: String {
    get {return _storage._lotteryDate}
    set {_uniqueStorage()._lotteryDate = newValue}
  }

  public var startTime: String {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  public var endTime: String {
    get {return _storage._endTime}
    set {_uniqueStorage()._endTime = newValue}
  }

  public var creatorID: String {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  public var insertTime: String {
    get {return _storage._insertTime}
    set {_uniqueStorage()._insertTime = newValue}
  }

  public var eventStatus: String {
    get {return _storage._eventStatus}
    set {_uniqueStorage()._eventStatus = newValue}
  }

  public var likeCount: Int64 {
    get {return _storage._likeCount}
    set {_uniqueStorage()._likeCount = newValue}
  }

  public var startLocationLat: Int64 {
    get {return _storage._startLocationLat}
    set {_uniqueStorage()._startLocationLat = newValue}
  }

  public var endLocationLat: Int64 {
    get {return _storage._endLocationLat}
    set {_uniqueStorage()._endLocationLat = newValue}
  }

  public var startLocationLng: Int64 {
    get {return _storage._startLocationLng}
    set {_uniqueStorage()._startLocationLng = newValue}
  }

  public var endLocationLng: Int64 {
    get {return _storage._endLocationLng}
    set {_uniqueStorage()._endLocationLng = newValue}
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var abstractMsg: String {
    get {return _storage._abstractMsg}
    set {_uniqueStorage()._abstractMsg = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images {
    get {return _storage._images ?? Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  public var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  public mutating func clearImages() {_uniqueStorage()._images = nil}

  public var history: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History] {
    get {return _storage._history}
    set {_uniqueStorage()._history = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventManagerHistoryItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: String = String()

  public var updateTime: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventManagerHistoryList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.modules.event.manager.global.proto.holder"

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_General: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".General"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_General, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_General) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentItemPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "comment"),
    3: .same(proto: "eventId"),
    4: .same(proto: "status"),
    5: .same(proto: "insertTime"),
    6: .same(proto: "creatorId"),
    7: .same(proto: "updateUserId"),
    8: .same(proto: "updateTime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.comment)
      case 3: try decoder.decodeSingularStringField(value: &self.eventID)
      case 4: try decoder.decodeSingularStringField(value: &self.status)
      case 5: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 6: try decoder.decodeSingularStringField(value: &self.creatorID)
      case 7: try decoder.decodeSingularStringField(value: &self.updateUserID)
      case 8: try decoder.decodeSingularStringField(value: &self.updateTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.comment.isEmpty {
      try visitor.visitSingularStringField(value: self.comment, fieldNumber: 2)
    }
    if !self.eventID.isEmpty {
      try visitor.visitSingularStringField(value: self.eventID, fieldNumber: 3)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 4)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 5)
    }
    if !self.creatorID.isEmpty {
      try visitor.visitSingularStringField(value: self.creatorID, fieldNumber: 6)
    }
    if !self.updateUserID.isEmpty {
      try visitor.visitSingularStringField(value: self.updateUserID, fieldNumber: 7)
    }
    if !self.updateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.updateTime, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_CommentItemPanel) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.comment != rhs.comment {return false}
    if lhs.eventID != rhs.eventID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.creatorID != rhs.creatorID {return false}
    if lhs.updateUserID != rhs.updateUserID {return false}
    if lhs.updateTime != rhs.updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCommentPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentPanel, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentPanel) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCommentApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentApi, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListCommentApi) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListEventManagerPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerPanel, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_ListEventManagerPanel) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetEventManagerItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "abstractMSG"),
    4: .same(proto: "description"),
    5: .same(proto: "leaderBoard"),
    6: .same(proto: "lotteryDate"),
    7: .same(proto: "startTime"),
    8: .same(proto: "endTime"),
    9: .same(proto: "creatorId"),
    10: .same(proto: "insertTime"),
    11: .same(proto: "status"),
    12: .same(proto: "likeCount"),
    13: .same(proto: "startLocationLat"),
    14: .same(proto: "endLocationLat"),
    15: .same(proto: "startLocationLng"),
    16: .same(proto: "endLocationLng"),
    17: .same(proto: "images"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _title: String = String()
    var _abstractMsg: String = String()
    var _description_p: String = String()
    var _leaderBoard: String = String()
    var _lotteryDate: String = String()
    var _startTime: String = String()
    var _endTime: String = String()
    var _creatorID: String = String()
    var _insertTime: String = String()
    var _status: String = String()
    var _likeCount: Int64 = 0
    var _startLocationLat: Int64 = 0
    var _endLocationLat: Int64 = 0
    var _startLocationLng: Int64 = 0
    var _endLocationLng: Int64 = 0
    var _images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _abstractMsg = source._abstractMsg
      _description_p = source._description_p
      _leaderBoard = source._leaderBoard
      _lotteryDate = source._lotteryDate
      _startTime = source._startTime
      _endTime = source._endTime
      _creatorID = source._creatorID
      _insertTime = source._insertTime
      _status = source._status
      _likeCount = source._likeCount
      _startLocationLat = source._startLocationLat
      _endLocationLat = source._endLocationLat
      _startLocationLng = source._startLocationLng
      _endLocationLng = source._endLocationLng
      _images = source._images
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._abstractMsg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularStringField(value: &_storage._leaderBoard)
        case 6: try decoder.decodeSingularStringField(value: &_storage._lotteryDate)
        case 7: try decoder.decodeSingularStringField(value: &_storage._startTime)
        case 8: try decoder.decodeSingularStringField(value: &_storage._endTime)
        case 9: try decoder.decodeSingularStringField(value: &_storage._creatorID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._insertTime)
        case 11: try decoder.decodeSingularStringField(value: &_storage._status)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._likeCount)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._startLocationLat)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._endLocationLat)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._startLocationLng)
        case 16: try decoder.decodeSingularInt64Field(value: &_storage._endLocationLng)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._images)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._abstractMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._abstractMsg, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if !_storage._leaderBoard.isEmpty {
        try visitor.visitSingularStringField(value: _storage._leaderBoard, fieldNumber: 5)
      }
      if !_storage._lotteryDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lotteryDate, fieldNumber: 6)
      }
      if !_storage._startTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startTime, fieldNumber: 7)
      }
      if !_storage._endTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endTime, fieldNumber: 8)
      }
      if !_storage._creatorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._creatorID, fieldNumber: 9)
      }
      if !_storage._insertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insertTime, fieldNumber: 10)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 11)
      }
      if _storage._likeCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likeCount, fieldNumber: 12)
      }
      if _storage._startLocationLat != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startLocationLat, fieldNumber: 13)
      }
      if _storage._endLocationLat != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endLocationLat, fieldNumber: 14)
      }
      if _storage._startLocationLng != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startLocationLng, fieldNumber: 15)
      }
      if _storage._endLocationLng != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endLocationLng, fieldNumber: 16)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItem, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._abstractMsg != rhs_storage._abstractMsg {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._leaderBoard != rhs_storage._leaderBoard {return false}
        if _storage._lotteryDate != rhs_storage._lotteryDate {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._insertTime != rhs_storage._insertTime {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._likeCount != rhs_storage._likeCount {return false}
        if _storage._startLocationLat != rhs_storage._startLocationLat {return false}
        if _storage._endLocationLat != rhs_storage._endLocationLat {return false}
        if _storage._startLocationLng != rhs_storage._startLocationLng {return false}
        if _storage._endLocationLng != rhs_storage._endLocationLng {return false}
        if _storage._images != rhs_storage._images {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Images"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "size"),
    3: .same(proto: "width"),
    4: .same(proto: "height"),
    5: .same(proto: "type"),
    6: .same(proto: "path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularInt64Field(value: &self.size)
      case 3: try decoder.decodeSingularInt32Field(value: &self.width)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.type)
      case 6: try decoder.decodeSingularStringField(value: &self.path)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 5)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.size != rhs.size {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.type != rhs.type {return false}
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".History"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "updateTime"),
    2: .same(proto: "userId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.updateTime)
      case 2: try decoder.decodeSingularStringField(value: &self.userID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.updateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.updateTime, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History) -> Bool {
    if lhs.updateTime != rhs.updateTime {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetEventManagerPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "description"),
    5: .same(proto: "leaderBoard"),
    6: .same(proto: "lotteryDate"),
    7: .same(proto: "startTime"),
    8: .same(proto: "endTime"),
    9: .same(proto: "creatorId"),
    10: .same(proto: "insertTime"),
    11: .same(proto: "eventStatus"),
    12: .same(proto: "likeCount"),
    13: .same(proto: "startLocationLat"),
    14: .same(proto: "endLocationLat"),
    15: .same(proto: "startLocationLng"),
    16: .same(proto: "endLocationLng"),
    17: .same(proto: "id"),
    18: .same(proto: "abstractMSG"),
    19: .same(proto: "title"),
    20: .same(proto: "images"),
    21: .same(proto: "history"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _description_p: String = String()
    var _leaderBoard: String = String()
    var _lotteryDate: String = String()
    var _startTime: String = String()
    var _endTime: String = String()
    var _creatorID: String = String()
    var _insertTime: String = String()
    var _eventStatus: String = String()
    var _likeCount: Int64 = 0
    var _startLocationLat: Int64 = 0
    var _endLocationLat: Int64 = 0
    var _startLocationLng: Int64 = 0
    var _endLocationLng: Int64 = 0
    var _id: String = String()
    var _abstractMsg: String = String()
    var _title: String = String()
    var _images: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_Images? = nil
    var _history: [Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_History] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _description_p = source._description_p
      _leaderBoard = source._leaderBoard
      _lotteryDate = source._lotteryDate
      _startTime = source._startTime
      _endTime = source._endTime
      _creatorID = source._creatorID
      _insertTime = source._insertTime
      _eventStatus = source._eventStatus
      _likeCount = source._likeCount
      _startLocationLat = source._startLocationLat
      _endLocationLat = source._endLocationLat
      _startLocationLng = source._startLocationLng
      _endLocationLng = source._endLocationLng
      _id = source._id
      _abstractMsg = source._abstractMsg
      _title = source._title
      _images = source._images
      _history = source._history
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularStringField(value: &_storage._leaderBoard)
        case 6: try decoder.decodeSingularStringField(value: &_storage._lotteryDate)
        case 7: try decoder.decodeSingularStringField(value: &_storage._startTime)
        case 8: try decoder.decodeSingularStringField(value: &_storage._endTime)
        case 9: try decoder.decodeSingularStringField(value: &_storage._creatorID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._insertTime)
        case 11: try decoder.decodeSingularStringField(value: &_storage._eventStatus)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._likeCount)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._startLocationLat)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._endLocationLat)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._startLocationLng)
        case 16: try decoder.decodeSingularInt64Field(value: &_storage._endLocationLng)
        case 17: try decoder.decodeSingularStringField(value: &_storage._id)
        case 18: try decoder.decodeSingularStringField(value: &_storage._abstractMsg)
        case 19: try decoder.decodeSingularStringField(value: &_storage._title)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._images)
        case 21: try decoder.decodeRepeatedMessageField(value: &_storage._history)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if !_storage._leaderBoard.isEmpty {
        try visitor.visitSingularStringField(value: _storage._leaderBoard, fieldNumber: 5)
      }
      if !_storage._lotteryDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lotteryDate, fieldNumber: 6)
      }
      if !_storage._startTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startTime, fieldNumber: 7)
      }
      if !_storage._endTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endTime, fieldNumber: 8)
      }
      if !_storage._creatorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._creatorID, fieldNumber: 9)
      }
      if !_storage._insertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insertTime, fieldNumber: 10)
      }
      if !_storage._eventStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventStatus, fieldNumber: 11)
      }
      if _storage._likeCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likeCount, fieldNumber: 12)
      }
      if _storage._startLocationLat != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startLocationLat, fieldNumber: 13)
      }
      if _storage._endLocationLat != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endLocationLat, fieldNumber: 14)
      }
      if _storage._startLocationLng != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startLocationLng, fieldNumber: 15)
      }
      if _storage._endLocationLng != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endLocationLng, fieldNumber: 16)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 17)
      }
      if !_storage._abstractMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._abstractMsg, fieldNumber: 18)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 19)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if !_storage._history.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._history, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerPanel, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_GetEventManagerPanel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._leaderBoard != rhs_storage._leaderBoard {return false}
        if _storage._lotteryDate != rhs_storage._lotteryDate {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._insertTime != rhs_storage._insertTime {return false}
        if _storage._eventStatus != rhs_storage._eventStatus {return false}
        if _storage._likeCount != rhs_storage._likeCount {return false}
        if _storage._startLocationLat != rhs_storage._startLocationLat {return false}
        if _storage._endLocationLat != rhs_storage._endLocationLat {return false}
        if _storage._startLocationLng != rhs_storage._startLocationLng {return false}
        if _storage._endLocationLng != rhs_storage._endLocationLng {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._abstractMsg != rhs_storage._abstractMsg {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._history != rhs_storage._history {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventManagerHistoryItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventManagerHistoryItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "updateTime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userID)
      case 2: try decoder.decodeSingularStringField(value: &self.updateTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if !self.updateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.updateTime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventManagerHistoryItem, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventManagerHistoryItem) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.updateTime != rhs.updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventManagerHistoryList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventManagerHistoryList"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventManagerHistoryList, rhs: Com_Vasl_Vaslapp_Modules_Event_Manager_Global_Proto_Holder_EventManagerHistoryList) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
