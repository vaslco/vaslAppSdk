// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Billing.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_BaseMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var credit: Int64 = 0

  public var debit: Int64 = 0

  public var balance: Int64 = 0

  public var type: String = String()

  public var insertTime: String = String()

  public var accountID: String = String()

  public var userID: String = String()

  public var lastUpdateTime: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_AccountList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_AccountItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_AccountItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountID: String = String()

  public var userID: String = String()

  public var lastUpdateTime: String = String()

  public var credit: Int64 = 0

  public var debit: Int64 = 0

  public var balance: Int64 = 0

  public var type: String = String()

  public var insertTime: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_TransactionList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Transaction] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var accoundID: String {
    get {return _storage._accoundID}
    set {_uniqueStorage()._accoundID = newValue}
  }

  public var ipgTransactionID: String {
    get {return _storage._ipgTransactionID}
    set {_uniqueStorage()._ipgTransactionID = newValue}
  }

  public var amount: Int64 {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var insertTime: String {
    get {return _storage._insertTime}
    set {_uniqueStorage()._insertTime = newValue}
  }

  public var paymentSuccessTime: String {
    get {return _storage._paymentSuccessTime}
    set {_uniqueStorage()._paymentSuccessTime = newValue}
  }

  public var orderID: String {
    get {return _storage._orderID}
    set {_uniqueStorage()._orderID = newValue}
  }

  public var packageID: String {
    get {return _storage._packageID}
    set {_uniqueStorage()._packageID = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var ipgTransaction: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_IpgTransaction {
    get {return _storage._ipgTransaction ?? Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_IpgTransaction()}
    set {_uniqueStorage()._ipgTransaction = newValue}
  }
  /// Returns true if `ipgTransaction` has been explicitly set.
  public var hasIpgTransaction: Bool {return _storage._ipgTransaction != nil}
  /// Clears the value of `ipgTransaction`. Subsequent reads from it will return its default value.
  public mutating func clearIpgTransaction() {_uniqueStorage()._ipgTransaction = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_GetTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var accoundID: String {
    get {return _storage._accoundID}
    set {_uniqueStorage()._accoundID = newValue}
  }

  public var ipgTransactionID: String {
    get {return _storage._ipgTransactionID}
    set {_uniqueStorage()._ipgTransactionID = newValue}
  }

  public var amount: Int64 {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  public var newDebit: Int64 {
    get {return _storage._newDebit}
    set {_uniqueStorage()._newDebit = newValue}
  }

  public var oldDebit: Int64 {
    get {return _storage._oldDebit}
    set {_uniqueStorage()._oldDebit = newValue}
  }

  public var transactionStatus: String {
    get {return _storage._transactionStatus}
    set {_uniqueStorage()._transactionStatus = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var insertTime: Int64 {
    get {return _storage._insertTime}
    set {_uniqueStorage()._insertTime = newValue}
  }

  public var paymentSuccessTime: String {
    get {return _storage._paymentSuccessTime}
    set {_uniqueStorage()._paymentSuccessTime = newValue}
  }

  public var orderID: String {
    get {return _storage._orderID}
    set {_uniqueStorage()._orderID = newValue}
  }

  public var packageID: String {
    get {return _storage._packageID}
    set {_uniqueStorage()._packageID = newValue}
  }

  public var newCredit: Int64 {
    get {return _storage._newCredit}
    set {_uniqueStorage()._newCredit = newValue}
  }

  public var oldCredit: Int64 {
    get {return _storage._oldCredit}
    set {_uniqueStorage()._oldCredit = newValue}
  }

  public var ipgTransaction: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_IpgTransaction {
    get {return _storage._ipgTransaction ?? Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_IpgTransaction()}
    set {_uniqueStorage()._ipgTransaction = newValue}
  }
  /// Returns true if `ipgTransaction` has been explicitly set.
  public var hasIpgTransaction: Bool {return _storage._ipgTransaction != nil}
  /// Clears the value of `ipgTransaction`. Subsequent reads from it will return its default value.
  public mutating func clearIpgTransaction() {_uniqueStorage()._ipgTransaction = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_IpgTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var amount: Int64 = 0

  public var bankName: String = String()

  public var token: String = String()

  public var paymentTime: String = String()

  public var transactionStatus: String = String()

  public var rollBackTime: String = String()

  public var payOrderID: String = String()

  public var orderID: String = String()

  public var callBackTime: String = String()

  public var refIDHolder: String = String()

  public var statusHolder: String = String()

  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Pay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var ipgTransactionID: String = String()

  public var bankURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Callback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var orderID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.modules.billing.global.proto.holder"

extension Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_BaseMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BaseMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_BaseMessage, rhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_BaseMessage) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Account"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "credit"),
    5: .same(proto: "debit"),
    6: .same(proto: "balance"),
    7: .same(proto: "type"),
    8: .same(proto: "insertTime"),
    12: .same(proto: "accountId"),
    13: .same(proto: "userId"),
    14: .same(proto: "lastUpdateTime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt64Field(value: &self.credit)
      case 5: try decoder.decodeSingularInt64Field(value: &self.debit)
      case 6: try decoder.decodeSingularInt64Field(value: &self.balance)
      case 7: try decoder.decodeSingularStringField(value: &self.type)
      case 8: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 12: try decoder.decodeSingularStringField(value: &self.accountID)
      case 13: try decoder.decodeSingularStringField(value: &self.userID)
      case 14: try decoder.decodeSingularStringField(value: &self.lastUpdateTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.credit != 0 {
      try visitor.visitSingularInt64Field(value: self.credit, fieldNumber: 4)
    }
    if self.debit != 0 {
      try visitor.visitSingularInt64Field(value: self.debit, fieldNumber: 5)
    }
    if self.balance != 0 {
      try visitor.visitSingularInt64Field(value: self.balance, fieldNumber: 6)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 7)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 8)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 12)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 13)
    }
    if !self.lastUpdateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.lastUpdateTime, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Account, rhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Account) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.credit != rhs.credit {return false}
    if lhs.debit != rhs.debit {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.type != rhs.type {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.lastUpdateTime != rhs.lastUpdateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_AccountList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_AccountList, rhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_AccountList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_AccountItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accountId"),
    2: .same(proto: "userId"),
    3: .same(proto: "lastUpdateTime"),
    4: .same(proto: "credit"),
    5: .same(proto: "debit"),
    6: .same(proto: "balance"),
    7: .same(proto: "type"),
    8: .same(proto: "insertTime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularStringField(value: &self.userID)
      case 3: try decoder.decodeSingularStringField(value: &self.lastUpdateTime)
      case 4: try decoder.decodeSingularInt64Field(value: &self.credit)
      case 5: try decoder.decodeSingularInt64Field(value: &self.debit)
      case 6: try decoder.decodeSingularInt64Field(value: &self.balance)
      case 7: try decoder.decodeSingularStringField(value: &self.type)
      case 8: try decoder.decodeSingularStringField(value: &self.insertTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if !self.lastUpdateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.lastUpdateTime, fieldNumber: 3)
    }
    if self.credit != 0 {
      try visitor.visitSingularInt64Field(value: self.credit, fieldNumber: 4)
    }
    if self.debit != 0 {
      try visitor.visitSingularInt64Field(value: self.debit, fieldNumber: 5)
    }
    if self.balance != 0 {
      try visitor.visitSingularInt64Field(value: self.balance, fieldNumber: 6)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 7)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_AccountItem, rhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_AccountItem) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.lastUpdateTime != rhs.lastUpdateTime {return false}
    if lhs.credit != rhs.credit {return false}
    if lhs.debit != rhs.debit {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.type != rhs.type {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_TransactionList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_TransactionList, rhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_TransactionList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "AccoundId"),
    3: .same(proto: "ipgTransactionId"),
    4: .same(proto: "amount"),
    10: .same(proto: "status"),
    11: .same(proto: "description"),
    12: .same(proto: "insertTime"),
    13: .same(proto: "paymentSuccessTime"),
    14: .same(proto: "orderId"),
    16: .same(proto: "packageId"),
    17: .same(proto: "type"),
    18: .same(proto: "ipgTransaction"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _accoundID: String = String()
    var _ipgTransactionID: String = String()
    var _amount: Int64 = 0
    var _status: String = String()
    var _description_p: String = String()
    var _insertTime: String = String()
    var _paymentSuccessTime: String = String()
    var _orderID: String = String()
    var _packageID: String = String()
    var _type: String = String()
    var _ipgTransaction: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_IpgTransaction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _accoundID = source._accoundID
      _ipgTransactionID = source._ipgTransactionID
      _amount = source._amount
      _status = source._status
      _description_p = source._description_p
      _insertTime = source._insertTime
      _paymentSuccessTime = source._paymentSuccessTime
      _orderID = source._orderID
      _packageID = source._packageID
      _type = source._type
      _ipgTransaction = source._ipgTransaction
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._accoundID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._ipgTransactionID)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._amount)
        case 10: try decoder.decodeSingularStringField(value: &_storage._status)
        case 11: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 12: try decoder.decodeSingularStringField(value: &_storage._insertTime)
        case 13: try decoder.decodeSingularStringField(value: &_storage._paymentSuccessTime)
        case 14: try decoder.decodeSingularStringField(value: &_storage._orderID)
        case 16: try decoder.decodeSingularStringField(value: &_storage._packageID)
        case 17: try decoder.decodeSingularStringField(value: &_storage._type)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._ipgTransaction)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._accoundID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accoundID, fieldNumber: 2)
      }
      if !_storage._ipgTransactionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ipgTransactionID, fieldNumber: 3)
      }
      if _storage._amount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._amount, fieldNumber: 4)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 10)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 11)
      }
      if !_storage._insertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insertTime, fieldNumber: 12)
      }
      if !_storage._paymentSuccessTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._paymentSuccessTime, fieldNumber: 13)
      }
      if !_storage._orderID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderID, fieldNumber: 14)
      }
      if !_storage._packageID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._packageID, fieldNumber: 16)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 17)
      }
      if let v = _storage._ipgTransaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Transaction, rhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Transaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._accoundID != rhs_storage._accoundID {return false}
        if _storage._ipgTransactionID != rhs_storage._ipgTransactionID {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._insertTime != rhs_storage._insertTime {return false}
        if _storage._paymentSuccessTime != rhs_storage._paymentSuccessTime {return false}
        if _storage._orderID != rhs_storage._orderID {return false}
        if _storage._packageID != rhs_storage._packageID {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._ipgTransaction != rhs_storage._ipgTransaction {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_GetTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "id"),
    5: .same(proto: "AccoundId"),
    6: .same(proto: "ipgTransactionId"),
    7: .same(proto: "amount"),
    8: .same(proto: "newDebit"),
    9: .same(proto: "oldDebit"),
    10: .same(proto: "transactionStatus"),
    11: .same(proto: "description"),
    12: .same(proto: "insertTime"),
    13: .same(proto: "paymentSuccessTime"),
    14: .same(proto: "orderId"),
    16: .same(proto: "packageId"),
    19: .same(proto: "newCredit"),
    20: .same(proto: "oldCredit"),
    21: .same(proto: "ipgTransaction"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _id: String = String()
    var _accoundID: String = String()
    var _ipgTransactionID: String = String()
    var _amount: Int64 = 0
    var _newDebit: Int64 = 0
    var _oldDebit: Int64 = 0
    var _transactionStatus: String = String()
    var _description_p: String = String()
    var _insertTime: Int64 = 0
    var _paymentSuccessTime: String = String()
    var _orderID: String = String()
    var _packageID: String = String()
    var _newCredit: Int64 = 0
    var _oldCredit: Int64 = 0
    var _ipgTransaction: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_IpgTransaction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _id = source._id
      _accoundID = source._accoundID
      _ipgTransactionID = source._ipgTransactionID
      _amount = source._amount
      _newDebit = source._newDebit
      _oldDebit = source._oldDebit
      _transactionStatus = source._transactionStatus
      _description_p = source._description_p
      _insertTime = source._insertTime
      _paymentSuccessTime = source._paymentSuccessTime
      _orderID = source._orderID
      _packageID = source._packageID
      _newCredit = source._newCredit
      _oldCredit = source._oldCredit
      _ipgTransaction = source._ipgTransaction
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._id)
        case 5: try decoder.decodeSingularStringField(value: &_storage._accoundID)
        case 6: try decoder.decodeSingularStringField(value: &_storage._ipgTransactionID)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._amount)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._newDebit)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._oldDebit)
        case 10: try decoder.decodeSingularStringField(value: &_storage._transactionStatus)
        case 11: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._insertTime)
        case 13: try decoder.decodeSingularStringField(value: &_storage._paymentSuccessTime)
        case 14: try decoder.decodeSingularStringField(value: &_storage._orderID)
        case 16: try decoder.decodeSingularStringField(value: &_storage._packageID)
        case 19: try decoder.decodeSingularInt64Field(value: &_storage._newCredit)
        case 20: try decoder.decodeSingularInt64Field(value: &_storage._oldCredit)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._ipgTransaction)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 4)
      }
      if !_storage._accoundID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accoundID, fieldNumber: 5)
      }
      if !_storage._ipgTransactionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ipgTransactionID, fieldNumber: 6)
      }
      if _storage._amount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._amount, fieldNumber: 7)
      }
      if _storage._newDebit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._newDebit, fieldNumber: 8)
      }
      if _storage._oldDebit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._oldDebit, fieldNumber: 9)
      }
      if !_storage._transactionStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transactionStatus, fieldNumber: 10)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 11)
      }
      if _storage._insertTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._insertTime, fieldNumber: 12)
      }
      if !_storage._paymentSuccessTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._paymentSuccessTime, fieldNumber: 13)
      }
      if !_storage._orderID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderID, fieldNumber: 14)
      }
      if !_storage._packageID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._packageID, fieldNumber: 16)
      }
      if _storage._newCredit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._newCredit, fieldNumber: 19)
      }
      if _storage._oldCredit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._oldCredit, fieldNumber: 20)
      }
      if let v = _storage._ipgTransaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_GetTransaction, rhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_GetTransaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._accoundID != rhs_storage._accoundID {return false}
        if _storage._ipgTransactionID != rhs_storage._ipgTransactionID {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._newDebit != rhs_storage._newDebit {return false}
        if _storage._oldDebit != rhs_storage._oldDebit {return false}
        if _storage._transactionStatus != rhs_storage._transactionStatus {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._insertTime != rhs_storage._insertTime {return false}
        if _storage._paymentSuccessTime != rhs_storage._paymentSuccessTime {return false}
        if _storage._orderID != rhs_storage._orderID {return false}
        if _storage._packageID != rhs_storage._packageID {return false}
        if _storage._newCredit != rhs_storage._newCredit {return false}
        if _storage._oldCredit != rhs_storage._oldCredit {return false}
        if _storage._ipgTransaction != rhs_storage._ipgTransaction {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_IpgTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IpgTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "amount"),
    3: .same(proto: "bankName"),
    4: .same(proto: "token"),
    5: .same(proto: "paymentTime"),
    6: .same(proto: "transactionStatus"),
    7: .same(proto: "rollBackTime"),
    8: .same(proto: "payOrderId"),
    9: .same(proto: "orderId"),
    10: .same(proto: "callBackTime"),
    11: .same(proto: "refIdHolder"),
    12: .same(proto: "statusHolder"),
    13: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 3: try decoder.decodeSingularStringField(value: &self.bankName)
      case 4: try decoder.decodeSingularStringField(value: &self.token)
      case 5: try decoder.decodeSingularStringField(value: &self.paymentTime)
      case 6: try decoder.decodeSingularStringField(value: &self.transactionStatus)
      case 7: try decoder.decodeSingularStringField(value: &self.rollBackTime)
      case 8: try decoder.decodeSingularStringField(value: &self.payOrderID)
      case 9: try decoder.decodeSingularStringField(value: &self.orderID)
      case 10: try decoder.decodeSingularStringField(value: &self.callBackTime)
      case 11: try decoder.decodeSingularStringField(value: &self.refIDHolder)
      case 12: try decoder.decodeSingularStringField(value: &self.statusHolder)
      case 13: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    if !self.bankName.isEmpty {
      try visitor.visitSingularStringField(value: self.bankName, fieldNumber: 3)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 4)
    }
    if !self.paymentTime.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentTime, fieldNumber: 5)
    }
    if !self.transactionStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionStatus, fieldNumber: 6)
    }
    if !self.rollBackTime.isEmpty {
      try visitor.visitSingularStringField(value: self.rollBackTime, fieldNumber: 7)
    }
    if !self.payOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.payOrderID, fieldNumber: 8)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 9)
    }
    if !self.callBackTime.isEmpty {
      try visitor.visitSingularStringField(value: self.callBackTime, fieldNumber: 10)
    }
    if !self.refIDHolder.isEmpty {
      try visitor.visitSingularStringField(value: self.refIDHolder, fieldNumber: 11)
    }
    if !self.statusHolder.isEmpty {
      try visitor.visitSingularStringField(value: self.statusHolder, fieldNumber: 12)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_IpgTransaction, rhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_IpgTransaction) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.bankName != rhs.bankName {return false}
    if lhs.token != rhs.token {return false}
    if lhs.paymentTime != rhs.paymentTime {return false}
    if lhs.transactionStatus != rhs.transactionStatus {return false}
    if lhs.rollBackTime != rhs.rollBackTime {return false}
    if lhs.payOrderID != rhs.payOrderID {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.callBackTime != rhs.callBackTime {return false}
    if lhs.refIDHolder != rhs.refIDHolder {return false}
    if lhs.statusHolder != rhs.statusHolder {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Pay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Pay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "ipgTransactionId"),
    6: .same(proto: "bankUrl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.ipgTransactionID)
      case 6: try decoder.decodeSingularStringField(value: &self.bankURL)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.ipgTransactionID.isEmpty {
      try visitor.visitSingularStringField(value: self.ipgTransactionID, fieldNumber: 4)
    }
    if !self.bankURL.isEmpty {
      try visitor.visitSingularStringField(value: self.bankURL, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Pay, rhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Pay) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.ipgTransactionID != rhs.ipgTransactionID {return false}
    if lhs.bankURL != rhs.bankURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Callback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Callback"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "orderId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.orderID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Callback, rhs: Com_Vasl_Vaslapp_Modules_Billing_Global_Proto_Holder_Callback) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
