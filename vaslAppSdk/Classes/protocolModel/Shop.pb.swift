// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Shop.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_AddProduct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_AddProductCart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentPannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var commentID: String = String()

  public var insertTime: String = String()

  public var updateTime: String = String()

  public var status: Bool = false

  public var userID: String = String()

  public var productID: String = String()

  public var content: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentListPannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var count: Int32 = 0

  public var commentsList: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentPannel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var commentID: String = String()

  public var insertTime: String = String()

  public var updateTime: String = String()

  public var content: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentListApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var count: Int32 = 0

  public var commentsList: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentApi] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerPannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var questionID: String = String()

  public var question: String = String()

  public var questionTime: String = String()

  public var answer: String = String()

  public var answerTime: String = String()

  public var status: Bool = false

  public var userID: String = String()

  public var productID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerListPannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var count: Int32 = 0

  public var questionAnswerList: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerPannel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var questionID: String = String()

  public var question: String = String()

  public var questionTime: String = String()

  public var answer: String = String()

  public var answerTime: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerListApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var count: Int32 = 0

  public var questionAnswerList: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerApi] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productStatusPerName: String = String()

  public var productStatusEngName: String = String()

  public var productStatusCode: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductStatusList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var count: Int32 = 0

  public var productStatus: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductStatus] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var enName: String {
    get {return _storage._enName}
    set {_uniqueStorage()._enName = newValue}
  }

  public var perName: String {
    get {return _storage._perName}
    set {_uniqueStorage()._perName = newValue}
  }

  public var brand: String {
    get {return _storage._brand}
    set {_uniqueStorage()._brand = newValue}
  }

  public var model: String {
    get {return _storage._model}
    set {_uniqueStorage()._model = newValue}
  }

  public var productGroupID: String {
    get {return _storage._productGroupID}
    set {_uniqueStorage()._productGroupID = newValue}
  }

  public var productGroupName: String {
    get {return _storage._productGroupName}
    set {_uniqueStorage()._productGroupName = newValue}
  }

  public var payAllowCount: Int32 {
    get {return _storage._payAllowCount}
    set {_uniqueStorage()._payAllowCount = newValue}
  }

  public var featureCount: Int32 {
    get {return _storage._featureCount}
    set {_uniqueStorage()._featureCount = newValue}
  }

  public var sellerCount: Int32 {
    get {return _storage._sellerCount}
    set {_uniqueStorage()._sellerCount = newValue}
  }

  public var like: Int32 {
    get {return _storage._like}
    set {_uniqueStorage()._like = newValue}
  }

  public var unLike: Int32 {
    get {return _storage._unLike}
    set {_uniqueStorage()._unLike = newValue}
  }

  public var productStatus: String {
    get {return _storage._productStatus}
    set {_uniqueStorage()._productStatus = newValue}
  }

  public var commentActive: Bool {
    get {return _storage._commentActive}
    set {_uniqueStorage()._commentActive = newValue}
  }

  public var questionAnswerActive: Bool {
    get {return _storage._questionAnswerActive}
    set {_uniqueStorage()._questionAnswerActive = newValue}
  }

  public var productInsertTime: String {
    get {return _storage._productInsertTime}
    set {_uniqueStorage()._productInsertTime = newValue}
  }

  public var productUpdateTime: String {
    get {return _storage._productUpdateTime}
    set {_uniqueStorage()._productUpdateTime = newValue}
  }

  public var productID: String {
    get {return _storage._productID}
    set {_uniqueStorage()._productID = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var images: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductListPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var count: Int32 = 0

  public var productPanel: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductPanel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var enName: String {
    get {return _storage._enName}
    set {_uniqueStorage()._enName = newValue}
  }

  public var perName: String {
    get {return _storage._perName}
    set {_uniqueStorage()._perName = newValue}
  }

  public var brand: String {
    get {return _storage._brand}
    set {_uniqueStorage()._brand = newValue}
  }

  public var model: String {
    get {return _storage._model}
    set {_uniqueStorage()._model = newValue}
  }

  public var productGroupID: String {
    get {return _storage._productGroupID}
    set {_uniqueStorage()._productGroupID = newValue}
  }

  public var productGroupName: String {
    get {return _storage._productGroupName}
    set {_uniqueStorage()._productGroupName = newValue}
  }

  public var payAllowCount: Int32 {
    get {return _storage._payAllowCount}
    set {_uniqueStorage()._payAllowCount = newValue}
  }

  public var featureCount: Int32 {
    get {return _storage._featureCount}
    set {_uniqueStorage()._featureCount = newValue}
  }

  public var sellerCount: Int32 {
    get {return _storage._sellerCount}
    set {_uniqueStorage()._sellerCount = newValue}
  }

  public var like: Int32 {
    get {return _storage._like}
    set {_uniqueStorage()._like = newValue}
  }

  public var unLike: Int32 {
    get {return _storage._unLike}
    set {_uniqueStorage()._unLike = newValue}
  }

  public var productStatus: String {
    get {return _storage._productStatus}
    set {_uniqueStorage()._productStatus = newValue}
  }

  public var commentActive: Bool {
    get {return _storage._commentActive}
    set {_uniqueStorage()._commentActive = newValue}
  }

  public var questionAnswerActive: Bool {
    get {return _storage._questionAnswerActive}
    set {_uniqueStorage()._questionAnswerActive = newValue}
  }

  public var productInsertTime: String {
    get {return _storage._productInsertTime}
    set {_uniqueStorage()._productInsertTime = newValue}
  }

  public var productUpdateTime: String {
    get {return _storage._productUpdateTime}
    set {_uniqueStorage()._productUpdateTime = newValue}
  }

  public var productID: String {
    get {return _storage._productID}
    set {_uniqueStorage()._productID = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var images: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductListApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var count: Int32 = 0

  public var productApi: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductApi] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var productID: String {
    get {return _storage._productID}
    set {_uniqueStorage()._productID = newValue}
  }

  public var perName: String {
    get {return _storage._perName}
    set {_uniqueStorage()._perName = newValue}
  }

  public var brand: String {
    get {return _storage._brand}
    set {_uniqueStorage()._brand = newValue}
  }

  public var model: String {
    get {return _storage._model}
    set {_uniqueStorage()._model = newValue}
  }

  public var productGroupID: String {
    get {return _storage._productGroupID}
    set {_uniqueStorage()._productGroupID = newValue}
  }

  public var productGroupName: String {
    get {return _storage._productGroupName}
    set {_uniqueStorage()._productGroupName = newValue}
  }

  public var payAllowCount: Int32 {
    get {return _storage._payAllowCount}
    set {_uniqueStorage()._payAllowCount = newValue}
  }

  public var featureCounter: Int32 {
    get {return _storage._featureCounter}
    set {_uniqueStorage()._featureCounter = newValue}
  }

  public var sellerCounter: Int32 {
    get {return _storage._sellerCounter}
    set {_uniqueStorage()._sellerCounter = newValue}
  }

  public var like: Int32 {
    get {return _storage._like}
    set {_uniqueStorage()._like = newValue}
  }

  public var unLike: Int32 {
    get {return _storage._unLike}
    set {_uniqueStorage()._unLike = newValue}
  }

  public var productStatus: String {
    get {return _storage._productStatus}
    set {_uniqueStorage()._productStatus = newValue}
  }

  public var commentActive: Bool {
    get {return _storage._commentActive}
    set {_uniqueStorage()._commentActive = newValue}
  }

  public var questionAnswerActive: Bool {
    get {return _storage._questionAnswerActive}
    set {_uniqueStorage()._questionAnswerActive = newValue}
  }

  public var productInsertTime: String {
    get {return _storage._productInsertTime}
    set {_uniqueStorage()._productInsertTime = newValue}
  }

  public var productUpdateTime: String {
    get {return _storage._productUpdateTime}
    set {_uniqueStorage()._productUpdateTime = newValue}
  }

  public var enName: String {
    get {return _storage._enName}
    set {_uniqueStorage()._enName = newValue}
  }

  public var feature: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Feature] {
    get {return _storage._feature}
    set {_uniqueStorage()._feature = newValue}
  }

  /////
  public var sellerDoc: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetPanel] {
    get {return _storage._sellerDoc}
    set {_uniqueStorage()._sellerDoc = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var images: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  public var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var score: Int32 {
    get {return _storage._score}
    set {_uniqueStorage()._score = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sellerID: String = String()

  public var guaranteeDay: Int32 = 0

  public var discountPricePercent: Int32 = 0

  public var productCount: Int32 = 0

  public var sellerInsertTime: String = String()

  public var sellerUpdateTime: String = String()

  public var color: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ColorGetPanel] = []

  public var price: Int64 = 0

  public var payable: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ColorGetPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var engName: String = String()

  public var perName: String = String()

  public var code: String = String()

  public var count: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGetApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var productID: String {
    get {return _storage._productID}
    set {_uniqueStorage()._productID = newValue}
  }

  public var perName: String {
    get {return _storage._perName}
    set {_uniqueStorage()._perName = newValue}
  }

  public var brand: String {
    get {return _storage._brand}
    set {_uniqueStorage()._brand = newValue}
  }

  public var model: String {
    get {return _storage._model}
    set {_uniqueStorage()._model = newValue}
  }

  public var productGroupID: String {
    get {return _storage._productGroupID}
    set {_uniqueStorage()._productGroupID = newValue}
  }

  public var productGroupName: String {
    get {return _storage._productGroupName}
    set {_uniqueStorage()._productGroupName = newValue}
  }

  public var payAllowCount: Int32 {
    get {return _storage._payAllowCount}
    set {_uniqueStorage()._payAllowCount = newValue}
  }

  public var featureCounter: Int32 {
    get {return _storage._featureCounter}
    set {_uniqueStorage()._featureCounter = newValue}
  }

  public var sellerCounter: Int32 {
    get {return _storage._sellerCounter}
    set {_uniqueStorage()._sellerCounter = newValue}
  }

  public var like: Int32 {
    get {return _storage._like}
    set {_uniqueStorage()._like = newValue}
  }

  public var unLike: Int32 {
    get {return _storage._unLike}
    set {_uniqueStorage()._unLike = newValue}
  }

  public var productStatus: String {
    get {return _storage._productStatus}
    set {_uniqueStorage()._productStatus = newValue}
  }

  public var commentActive: Bool {
    get {return _storage._commentActive}
    set {_uniqueStorage()._commentActive = newValue}
  }

  public var questionAnswerActive: Bool {
    get {return _storage._questionAnswerActive}
    set {_uniqueStorage()._questionAnswerActive = newValue}
  }

  public var productInsertTime: String {
    get {return _storage._productInsertTime}
    set {_uniqueStorage()._productInsertTime = newValue}
  }

  public var productUpdateTime: String {
    get {return _storage._productUpdateTime}
    set {_uniqueStorage()._productUpdateTime = newValue}
  }

  public var enName: String {
    get {return _storage._enName}
    set {_uniqueStorage()._enName = newValue}
  }

  public var feature: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Feature] {
    get {return _storage._feature}
    set {_uniqueStorage()._feature = newValue}
  }

  public var sellerDoc: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetApi] {
    get {return _storage._sellerDoc}
    set {_uniqueStorage()._sellerDoc = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var images: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  public var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var score: Int32 {
    get {return _storage._score}
    set {_uniqueStorage()._score = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sellerID: String = String()

  public var guaranteeDay: Int32 = 0

  public var discountPricePercent: Int32 = 0

  public var productCount: Int32 = 0

  public var sellerInsertTime: String = String()

  public var sellerUpdateTime: String = String()

  public var color: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ColorGetApi] = []

  public var price: Int64 = 0

  public var payable: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ColorGetApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var engName: String = String()

  public var perName: String = String()

  public var code: String = String()

  public var count: Int32 = 0

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Feature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: String = String()

  public var value: String = String()

  public var unit: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Seller {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sellerID: String = String()

  public var guaranteeDay: Int32 = 0

  public var discountPricePercent: Int32 = 0

  public var productCount: Int32 = 0

  public var sellerInsertTime: String = String()

  public var sellerUpdateTime: String = String()

  public var color: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Color] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var size: Int64 = 0

  public var width: Int32 = 0

  public var height: Int32 = 0

  public var type: String = String()

  public var path: String = String()

  public var imageDefaultActive: Bool = false

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var orderID: String = String()

  public var productID: String = String()

  public var sellerID: String = String()

  public var colorID: String = String()

  public var count: Int32 = 0

  public var requestDate: String = String()

  public var updateDate: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductCart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var productCart: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCart] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CartUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cartID: String = String()

  public var productCart: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCart] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListAllCart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var cart: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CartUser] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sellerID: String = String()

  public var address: String = String()

  public var engName: String = String()

  ///bool active = 5;
  public var perName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var sellers: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGroupId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var engName: String = String()

  public var perName: String = String()

  public var code: String = String()

  public var parentCode: String = String()

  public var child: Int32 = 0

  public var parentName: String = String()

  public var productGroupID: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGroupId] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductGroupId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var productGroupID: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGroupId] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Color {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var engName: String = String()

  public var perName: String = String()

  public var code: String = String()

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListColorId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var count: Int32 = 0

  public var colorID: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Color] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCartApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var orderID: String = String()

  public var productID: String = String()

  public var productEngName: String = String()

  public var productPerName: String = String()

  public var sellerID: String = String()

  public var sellerEngName: String = String()

  public var sellerPerName: String = String()

  public var colorID: String = String()

  public var colorEngName: String = String()

  public var colorPerName: String = String()

  public var colorVaue: String = String()

  public var price: Int64 = 0

  public var discountPrice: Int64 = 0

  public var count: Int32 = 0

  public var requestDate: String = String()

  public var updateDate: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductCartApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var productCart: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCartApi] = []

  public var totalPrice: Int64 = 0

  public var totlaDiscountPrice: Int64 = 0

  public var totalCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Transport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var description_p: String = String()

  public var price: Int64 = 0

  public var dayOfWeek: [Int32] = []

  public var earliestTime: Int32 = 0

  public var latestTime: Int32 = 0

  public var possibleCities: [String] = []

  public var capacity: Int32 = 0

  public var status: String = String()

  public var exceptionDays: [String] = []

  public var possibleHours: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SendPlan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var date: String = String()

  public var transportType: String = String()

  public var orderIds: [String] = []

  public var full: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListTransport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Transport] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListSendPlan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SendPlan] = []

  public var page: Int32 = 0

  public var totalPage: Int64 = 0

  public var totalItem: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleTime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var time: String = String()

  public var full: Bool = false

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleDate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var date: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleTime] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleTransports {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var description_p: String = String()

  public var price: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleDate] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListPossibleTimes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleTransports] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Discount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: String = String()

  public var expireTime: String = String()

  public var `public`: Bool = false

  public var discountPercent: Int32 = 0

  public var discountAmount: Int64 = 0

  public var minBuy: Int64 = 0

  public var description_p: String = String()

  public var insertTime: String = String()

  public var id: String = String()

  public var status: String = String()

  public var allowedUsers: [String] = []

  public var availableCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListDiscount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Discount] = []

  public var page: Int32 = 0

  public var totalPage: Int64 = 0

  public var totalItem: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Address {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var priority: Int32 = 0

  public var nickName: String = String()

  public var mobile: String = String()

  public var phone: String = String()

  ///استان
  public var province: String = String()

  ///شهرستان
  public var city: String = String()

  ///ناحیه (محله ویژه تهران)
  public var sector: String = String()

  ///آدرس پستی
  public var address: String = String()

  ///کد پستی
  public var postalCode: String = String()

  public var recipientName: String = String()

  public var recipientPhone: String = String()

  public var locationLatitude: Double = 0

  public var locationLongitude: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Address] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PaymentResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var orderID: String = String()

  public var bankURL: String = String()

  public var transactionID: String = String()

  /// repeated ProductCartApi data = 6;
  ///  string nextStatus = 7;
  ///  string address = 8;
  public var totalPrice: Int64 = 0

  ///  int32 totalCount = 11;
  public var totlaDiscountPrice: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_OrderProduct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var count: Int32 = 0

  public var price: Int64 = 0

  public var payable: Int64 = 0

  public var guaranteeDay: Int32 = 0

  public var sellerID: String = String()

  public var sellerName: String = String()

  public var colorID: String = String()

  public var colorName: String = String()

  public var colorValue: String = String()

  public var productStatus: String = String()

  public var productID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Order {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var subscriberID: String = String()

  public var insertTime: String = String()

  public var transportID: String = String()

  public var transportPrice: Int64 = 0

  public var totalPrice: Int64 = 0

  public var totalPayable: Int64 = 0

  public var orderStatus: String = String()

  public var payStatus: String = String()

  public var products: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_OrderProduct] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListOrders {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Order] = []

  public var totalPage: Int32 = 0

  public var page: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_GetDiscountPrice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var oldPrice: Int64 = 0

  public var newPrice: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_City {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var state: String = String()

  public var city: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListCities {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_City] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Unit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var prName: String = String()

  public var enName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListUnits {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Unit] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var orderID: String = String()

  public var paymentID: String = String()

  public var price: Int64 = 0

  public var payable: Int64 = 0

  public var agentID: String = String()

  public var insertTime: String = String()

  public var comment: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListTransactions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Transaction] = []

  public var totalPrice: Int64 = 0

  public var totalPayable: Int64 = 0

  public var page: Int32 = 0

  public var totalItem: Int64 = 0

  public var totalPage: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Featur {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var unit: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListFeature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Featur] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SaleReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productID: String = String()

  public var productName: String = String()

  public var sellerID: String = String()

  public var sellerName: String = String()

  public var colorID: String = String()

  public var colorName: String = String()

  public var status: String = String()

  public var count: Int32 = 0

  public var totalPrice: Int64 = 0

  public var totalPayable: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListSaleReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SaleReport] = []

  public var page: Int32 = 0

  public var totalItem: Int64 = 0

  public var totalPage: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.modules.shop.global.proto.holder"

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_AddProduct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddProduct"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_AddProduct, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_AddProduct) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_AddProductCart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddProductCart"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_AddProductCart, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_AddProductCart) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentPannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentPannel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commentId"),
    2: .same(proto: "insertTime"),
    3: .same(proto: "updateTime"),
    4: .same(proto: "status"),
    5: .same(proto: "userId"),
    6: .same(proto: "productId"),
    7: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.commentID)
      case 2: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 3: try decoder.decodeSingularStringField(value: &self.updateTime)
      case 4: try decoder.decodeSingularBoolField(value: &self.status)
      case 5: try decoder.decodeSingularStringField(value: &self.userID)
      case 6: try decoder.decodeSingularStringField(value: &self.productID)
      case 7: try decoder.decodeSingularStringField(value: &self.content)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.commentID.isEmpty {
      try visitor.visitSingularStringField(value: self.commentID, fieldNumber: 1)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 2)
    }
    if !self.updateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.updateTime, fieldNumber: 3)
    }
    if self.status != false {
      try visitor.visitSingularBoolField(value: self.status, fieldNumber: 4)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 5)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 6)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentPannel, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentPannel) -> Bool {
    if lhs.commentID != rhs.commentID {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.updateTime != rhs.updateTime {return false}
    if lhs.status != rhs.status {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentListPannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentListPannel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "count"),
    8: .same(proto: "commentsList"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeSingularInt32Field(value: &self.count)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.commentsList)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 7)
    }
    if !self.commentsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commentsList, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentListPannel, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentListPannel) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.count != rhs.count {return false}
    if lhs.commentsList != rhs.commentsList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commentId"),
    2: .same(proto: "insertTime"),
    3: .same(proto: "updateTime"),
    7: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.commentID)
      case 2: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 3: try decoder.decodeSingularStringField(value: &self.updateTime)
      case 7: try decoder.decodeSingularStringField(value: &self.content)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.commentID.isEmpty {
      try visitor.visitSingularStringField(value: self.commentID, fieldNumber: 1)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 2)
    }
    if !self.updateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.updateTime, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentApi) -> Bool {
    if lhs.commentID != rhs.commentID {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.updateTime != rhs.updateTime {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentListApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentListApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "count"),
    8: .same(proto: "commentsList"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeSingularInt32Field(value: &self.count)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.commentsList)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 7)
    }
    if !self.commentsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commentsList, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentListApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CommentListApi) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.count != rhs.count {return false}
    if lhs.commentsList != rhs.commentsList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerPannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuestionAnswerPannel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "questionId"),
    2: .same(proto: "question"),
    3: .same(proto: "questionTime"),
    4: .same(proto: "answer"),
    5: .same(proto: "answerTime"),
    6: .same(proto: "status"),
    7: .same(proto: "userId"),
    8: .same(proto: "productId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.questionID)
      case 2: try decoder.decodeSingularStringField(value: &self.question)
      case 3: try decoder.decodeSingularStringField(value: &self.questionTime)
      case 4: try decoder.decodeSingularStringField(value: &self.answer)
      case 5: try decoder.decodeSingularStringField(value: &self.answerTime)
      case 6: try decoder.decodeSingularBoolField(value: &self.status)
      case 7: try decoder.decodeSingularStringField(value: &self.userID)
      case 8: try decoder.decodeSingularStringField(value: &self.productID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.questionID.isEmpty {
      try visitor.visitSingularStringField(value: self.questionID, fieldNumber: 1)
    }
    if !self.question.isEmpty {
      try visitor.visitSingularStringField(value: self.question, fieldNumber: 2)
    }
    if !self.questionTime.isEmpty {
      try visitor.visitSingularStringField(value: self.questionTime, fieldNumber: 3)
    }
    if !self.answer.isEmpty {
      try visitor.visitSingularStringField(value: self.answer, fieldNumber: 4)
    }
    if !self.answerTime.isEmpty {
      try visitor.visitSingularStringField(value: self.answerTime, fieldNumber: 5)
    }
    if self.status != false {
      try visitor.visitSingularBoolField(value: self.status, fieldNumber: 6)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 7)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerPannel, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerPannel) -> Bool {
    if lhs.questionID != rhs.questionID {return false}
    if lhs.question != rhs.question {return false}
    if lhs.questionTime != rhs.questionTime {return false}
    if lhs.answer != rhs.answer {return false}
    if lhs.answerTime != rhs.answerTime {return false}
    if lhs.status != rhs.status {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerListPannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuestionAnswerListPannel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "count"),
    8: .same(proto: "questionAnswerList"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeSingularInt32Field(value: &self.count)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.questionAnswerList)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 7)
    }
    if !self.questionAnswerList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.questionAnswerList, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerListPannel, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerListPannel) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.count != rhs.count {return false}
    if lhs.questionAnswerList != rhs.questionAnswerList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuestionAnswerApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "questionId"),
    2: .same(proto: "question"),
    3: .same(proto: "questionTime"),
    4: .same(proto: "answer"),
    5: .same(proto: "answerTime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.questionID)
      case 2: try decoder.decodeSingularStringField(value: &self.question)
      case 3: try decoder.decodeSingularStringField(value: &self.questionTime)
      case 4: try decoder.decodeSingularStringField(value: &self.answer)
      case 5: try decoder.decodeSingularStringField(value: &self.answerTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.questionID.isEmpty {
      try visitor.visitSingularStringField(value: self.questionID, fieldNumber: 1)
    }
    if !self.question.isEmpty {
      try visitor.visitSingularStringField(value: self.question, fieldNumber: 2)
    }
    if !self.questionTime.isEmpty {
      try visitor.visitSingularStringField(value: self.questionTime, fieldNumber: 3)
    }
    if !self.answer.isEmpty {
      try visitor.visitSingularStringField(value: self.answer, fieldNumber: 4)
    }
    if !self.answerTime.isEmpty {
      try visitor.visitSingularStringField(value: self.answerTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerApi) -> Bool {
    if lhs.questionID != rhs.questionID {return false}
    if lhs.question != rhs.question {return false}
    if lhs.questionTime != rhs.questionTime {return false}
    if lhs.answer != rhs.answer {return false}
    if lhs.answerTime != rhs.answerTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerListApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuestionAnswerListApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "count"),
    8: .same(proto: "QuestionAnswerList"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeSingularInt32Field(value: &self.count)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.questionAnswerList)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 7)
    }
    if !self.questionAnswerList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.questionAnswerList, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerListApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_QuestionAnswerListApi) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.count != rhs.count {return false}
    if lhs.questionAnswerList != rhs.questionAnswerList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "productStatusPerName"),
    2: .same(proto: "productStatusEngName"),
    3: .same(proto: "productStatusCode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.productStatusPerName)
      case 2: try decoder.decodeSingularStringField(value: &self.productStatusEngName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.productStatusCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productStatusPerName.isEmpty {
      try visitor.visitSingularStringField(value: self.productStatusPerName, fieldNumber: 1)
    }
    if !self.productStatusEngName.isEmpty {
      try visitor.visitSingularStringField(value: self.productStatusEngName, fieldNumber: 2)
    }
    if self.productStatusCode != 0 {
      try visitor.visitSingularInt32Field(value: self.productStatusCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductStatus, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductStatus) -> Bool {
    if lhs.productStatusPerName != rhs.productStatusPerName {return false}
    if lhs.productStatusEngName != rhs.productStatusEngName {return false}
    if lhs.productStatusCode != rhs.productStatusCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductStatusList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductStatusList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "count"),
    8: .same(proto: "ProductStatus"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeSingularInt32Field(value: &self.count)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.productStatus)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 7)
    }
    if !self.productStatus.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productStatus, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductStatusList, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductStatusList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.count != rhs.count {return false}
    if lhs.productStatus != rhs.productStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "EnName"),
    2: .same(proto: "PerName"),
    3: .same(proto: "brand"),
    4: .same(proto: "model"),
    5: .same(proto: "productGroupId"),
    6: .same(proto: "productGroupName"),
    7: .same(proto: "payAllowCount"),
    8: .same(proto: "featureCount"),
    9: .same(proto: "sellerCount"),
    10: .same(proto: "like"),
    11: .same(proto: "unLike"),
    12: .same(proto: "productStatus"),
    13: .same(proto: "commentActive"),
    14: .same(proto: "questionAnswerActive"),
    15: .same(proto: "productInsertTime"),
    16: .same(proto: "productUpdateTime"),
    1: .same(proto: "productId"),
    18: .same(proto: "description"),
    19: .same(proto: "images"),
  ]

  fileprivate class _StorageClass {
    var _enName: String = String()
    var _perName: String = String()
    var _brand: String = String()
    var _model: String = String()
    var _productGroupID: String = String()
    var _productGroupName: String = String()
    var _payAllowCount: Int32 = 0
    var _featureCount: Int32 = 0
    var _sellerCount: Int32 = 0
    var _like: Int32 = 0
    var _unLike: Int32 = 0
    var _productStatus: String = String()
    var _commentActive: Bool = false
    var _questionAnswerActive: Bool = false
    var _productInsertTime: String = String()
    var _productUpdateTime: String = String()
    var _productID: String = String()
    var _description_p: String = String()
    var _images: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _enName = source._enName
      _perName = source._perName
      _brand = source._brand
      _model = source._model
      _productGroupID = source._productGroupID
      _productGroupName = source._productGroupName
      _payAllowCount = source._payAllowCount
      _featureCount = source._featureCount
      _sellerCount = source._sellerCount
      _like = source._like
      _unLike = source._unLike
      _productStatus = source._productStatus
      _commentActive = source._commentActive
      _questionAnswerActive = source._questionAnswerActive
      _productInsertTime = source._productInsertTime
      _productUpdateTime = source._productUpdateTime
      _productID = source._productID
      _description_p = source._description_p
      _images = source._images
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._productID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._perName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._brand)
        case 4: try decoder.decodeSingularStringField(value: &_storage._model)
        case 5: try decoder.decodeSingularStringField(value: &_storage._productGroupID)
        case 6: try decoder.decodeSingularStringField(value: &_storage._productGroupName)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._payAllowCount)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._featureCount)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._sellerCount)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._like)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._unLike)
        case 12: try decoder.decodeSingularStringField(value: &_storage._productStatus)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._commentActive)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._questionAnswerActive)
        case 15: try decoder.decodeSingularStringField(value: &_storage._productInsertTime)
        case 16: try decoder.decodeSingularStringField(value: &_storage._productUpdateTime)
        case 17: try decoder.decodeSingularStringField(value: &_storage._enName)
        case 18: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 19: try decoder.decodeRepeatedMessageField(value: &_storage._images)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._productID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productID, fieldNumber: 1)
      }
      if !_storage._perName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._perName, fieldNumber: 2)
      }
      if !_storage._brand.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brand, fieldNumber: 3)
      }
      if !_storage._model.isEmpty {
        try visitor.visitSingularStringField(value: _storage._model, fieldNumber: 4)
      }
      if !_storage._productGroupID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productGroupID, fieldNumber: 5)
      }
      if !_storage._productGroupName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productGroupName, fieldNumber: 6)
      }
      if _storage._payAllowCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._payAllowCount, fieldNumber: 7)
      }
      if _storage._featureCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._featureCount, fieldNumber: 8)
      }
      if _storage._sellerCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sellerCount, fieldNumber: 9)
      }
      if _storage._like != 0 {
        try visitor.visitSingularInt32Field(value: _storage._like, fieldNumber: 10)
      }
      if _storage._unLike != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unLike, fieldNumber: 11)
      }
      if !_storage._productStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productStatus, fieldNumber: 12)
      }
      if _storage._commentActive != false {
        try visitor.visitSingularBoolField(value: _storage._commentActive, fieldNumber: 13)
      }
      if _storage._questionAnswerActive != false {
        try visitor.visitSingularBoolField(value: _storage._questionAnswerActive, fieldNumber: 14)
      }
      if !_storage._productInsertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productInsertTime, fieldNumber: 15)
      }
      if !_storage._productUpdateTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productUpdateTime, fieldNumber: 16)
      }
      if !_storage._enName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._enName, fieldNumber: 17)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 18)
      }
      if !_storage._images.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._images, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductPanel, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductPanel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._enName != rhs_storage._enName {return false}
        if _storage._perName != rhs_storage._perName {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._model != rhs_storage._model {return false}
        if _storage._productGroupID != rhs_storage._productGroupID {return false}
        if _storage._productGroupName != rhs_storage._productGroupName {return false}
        if _storage._payAllowCount != rhs_storage._payAllowCount {return false}
        if _storage._featureCount != rhs_storage._featureCount {return false}
        if _storage._sellerCount != rhs_storage._sellerCount {return false}
        if _storage._like != rhs_storage._like {return false}
        if _storage._unLike != rhs_storage._unLike {return false}
        if _storage._productStatus != rhs_storage._productStatus {return false}
        if _storage._commentActive != rhs_storage._commentActive {return false}
        if _storage._questionAnswerActive != rhs_storage._questionAnswerActive {return false}
        if _storage._productInsertTime != rhs_storage._productInsertTime {return false}
        if _storage._productUpdateTime != rhs_storage._productUpdateTime {return false}
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._images != rhs_storage._images {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductListPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductListPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "count"),
    8: .same(proto: "productPanel"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeSingularInt32Field(value: &self.count)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.productPanel)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 7)
    }
    if !self.productPanel.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productPanel, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductListPanel, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductListPanel) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.count != rhs.count {return false}
    if lhs.productPanel != rhs.productPanel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "EnName"),
    2: .same(proto: "PerName"),
    3: .same(proto: "brand"),
    4: .same(proto: "model"),
    5: .same(proto: "productGroupId"),
    6: .same(proto: "productGroupName"),
    7: .same(proto: "payAllowCount"),
    8: .same(proto: "featureCount"),
    9: .same(proto: "sellerCount"),
    10: .same(proto: "like"),
    11: .same(proto: "unLike"),
    12: .same(proto: "productStatus"),
    13: .same(proto: "commentActive"),
    14: .same(proto: "questionAnswerActive"),
    15: .same(proto: "productInsertTime"),
    16: .same(proto: "productUpdateTime"),
    1: .same(proto: "productId"),
    18: .same(proto: "description"),
    19: .same(proto: "images"),
  ]

  fileprivate class _StorageClass {
    var _enName: String = String()
    var _perName: String = String()
    var _brand: String = String()
    var _model: String = String()
    var _productGroupID: String = String()
    var _productGroupName: String = String()
    var _payAllowCount: Int32 = 0
    var _featureCount: Int32 = 0
    var _sellerCount: Int32 = 0
    var _like: Int32 = 0
    var _unLike: Int32 = 0
    var _productStatus: String = String()
    var _commentActive: Bool = false
    var _questionAnswerActive: Bool = false
    var _productInsertTime: String = String()
    var _productUpdateTime: String = String()
    var _productID: String = String()
    var _description_p: String = String()
    var _images: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _enName = source._enName
      _perName = source._perName
      _brand = source._brand
      _model = source._model
      _productGroupID = source._productGroupID
      _productGroupName = source._productGroupName
      _payAllowCount = source._payAllowCount
      _featureCount = source._featureCount
      _sellerCount = source._sellerCount
      _like = source._like
      _unLike = source._unLike
      _productStatus = source._productStatus
      _commentActive = source._commentActive
      _questionAnswerActive = source._questionAnswerActive
      _productInsertTime = source._productInsertTime
      _productUpdateTime = source._productUpdateTime
      _productID = source._productID
      _description_p = source._description_p
      _images = source._images
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._productID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._perName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._brand)
        case 4: try decoder.decodeSingularStringField(value: &_storage._model)
        case 5: try decoder.decodeSingularStringField(value: &_storage._productGroupID)
        case 6: try decoder.decodeSingularStringField(value: &_storage._productGroupName)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._payAllowCount)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._featureCount)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._sellerCount)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._like)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._unLike)
        case 12: try decoder.decodeSingularStringField(value: &_storage._productStatus)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._commentActive)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._questionAnswerActive)
        case 15: try decoder.decodeSingularStringField(value: &_storage._productInsertTime)
        case 16: try decoder.decodeSingularStringField(value: &_storage._productUpdateTime)
        case 17: try decoder.decodeSingularStringField(value: &_storage._enName)
        case 18: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 19: try decoder.decodeRepeatedMessageField(value: &_storage._images)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._productID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productID, fieldNumber: 1)
      }
      if !_storage._perName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._perName, fieldNumber: 2)
      }
      if !_storage._brand.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brand, fieldNumber: 3)
      }
      if !_storage._model.isEmpty {
        try visitor.visitSingularStringField(value: _storage._model, fieldNumber: 4)
      }
      if !_storage._productGroupID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productGroupID, fieldNumber: 5)
      }
      if !_storage._productGroupName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productGroupName, fieldNumber: 6)
      }
      if _storage._payAllowCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._payAllowCount, fieldNumber: 7)
      }
      if _storage._featureCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._featureCount, fieldNumber: 8)
      }
      if _storage._sellerCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sellerCount, fieldNumber: 9)
      }
      if _storage._like != 0 {
        try visitor.visitSingularInt32Field(value: _storage._like, fieldNumber: 10)
      }
      if _storage._unLike != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unLike, fieldNumber: 11)
      }
      if !_storage._productStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productStatus, fieldNumber: 12)
      }
      if _storage._commentActive != false {
        try visitor.visitSingularBoolField(value: _storage._commentActive, fieldNumber: 13)
      }
      if _storage._questionAnswerActive != false {
        try visitor.visitSingularBoolField(value: _storage._questionAnswerActive, fieldNumber: 14)
      }
      if !_storage._productInsertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productInsertTime, fieldNumber: 15)
      }
      if !_storage._productUpdateTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productUpdateTime, fieldNumber: 16)
      }
      if !_storage._enName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._enName, fieldNumber: 17)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 18)
      }
      if !_storage._images.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._images, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductApi) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._enName != rhs_storage._enName {return false}
        if _storage._perName != rhs_storage._perName {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._model != rhs_storage._model {return false}
        if _storage._productGroupID != rhs_storage._productGroupID {return false}
        if _storage._productGroupName != rhs_storage._productGroupName {return false}
        if _storage._payAllowCount != rhs_storage._payAllowCount {return false}
        if _storage._featureCount != rhs_storage._featureCount {return false}
        if _storage._sellerCount != rhs_storage._sellerCount {return false}
        if _storage._like != rhs_storage._like {return false}
        if _storage._unLike != rhs_storage._unLike {return false}
        if _storage._productStatus != rhs_storage._productStatus {return false}
        if _storage._commentActive != rhs_storage._commentActive {return false}
        if _storage._questionAnswerActive != rhs_storage._questionAnswerActive {return false}
        if _storage._productInsertTime != rhs_storage._productInsertTime {return false}
        if _storage._productUpdateTime != rhs_storage._productUpdateTime {return false}
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._images != rhs_storage._images {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductListApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductListApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "count"),
    8: .same(proto: "productApi"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeSingularInt32Field(value: &self.count)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.productApi)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 7)
    }
    if !self.productApi.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productApi, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductListApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductListApi) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.count != rhs.count {return false}
    if lhs.productApi != rhs.productApi {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "productId"),
    5: .same(proto: "PerName"),
    7: .same(proto: "brand"),
    8: .same(proto: "model"),
    17: .same(proto: "productGroupId"),
    18: .same(proto: "productGroupName"),
    19: .same(proto: "payAllowCount"),
    20: .same(proto: "featureCounter"),
    9: .same(proto: "sellerCounter"),
    10: .same(proto: "like"),
    11: .same(proto: "unLike"),
    12: .same(proto: "productStatus"),
    13: .same(proto: "commentActive"),
    14: .same(proto: "questionAnswerActive"),
    15: .same(proto: "productInsertTime"),
    16: .same(proto: "productUpdateTime"),
    6: .same(proto: "EnName"),
    21: .same(proto: "feature"),
    22: .same(proto: "sellerDoc"),
    23: .same(proto: "description"),
    24: .same(proto: "images"),
    25: .same(proto: "tags"),
    26: .same(proto: "score"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _productID: String = String()
    var _perName: String = String()
    var _brand: String = String()
    var _model: String = String()
    var _productGroupID: String = String()
    var _productGroupName: String = String()
    var _payAllowCount: Int32 = 0
    var _featureCounter: Int32 = 0
    var _sellerCounter: Int32 = 0
    var _like: Int32 = 0
    var _unLike: Int32 = 0
    var _productStatus: String = String()
    var _commentActive: Bool = false
    var _questionAnswerActive: Bool = false
    var _productInsertTime: String = String()
    var _productUpdateTime: String = String()
    var _enName: String = String()
    var _feature: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Feature] = []
    var _sellerDoc: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetPanel] = []
    var _description_p: String = String()
    var _images: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images] = []
    var _tags: [String] = []
    var _score: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _productID = source._productID
      _perName = source._perName
      _brand = source._brand
      _model = source._model
      _productGroupID = source._productGroupID
      _productGroupName = source._productGroupName
      _payAllowCount = source._payAllowCount
      _featureCounter = source._featureCounter
      _sellerCounter = source._sellerCounter
      _like = source._like
      _unLike = source._unLike
      _productStatus = source._productStatus
      _commentActive = source._commentActive
      _questionAnswerActive = source._questionAnswerActive
      _productInsertTime = source._productInsertTime
      _productUpdateTime = source._productUpdateTime
      _enName = source._enName
      _feature = source._feature
      _sellerDoc = source._sellerDoc
      _description_p = source._description_p
      _images = source._images
      _tags = source._tags
      _score = source._score
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._productID)
        case 5: try decoder.decodeSingularStringField(value: &_storage._perName)
        case 6: try decoder.decodeSingularStringField(value: &_storage._enName)
        case 7: try decoder.decodeSingularStringField(value: &_storage._brand)
        case 8: try decoder.decodeSingularStringField(value: &_storage._model)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._sellerCounter)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._like)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._unLike)
        case 12: try decoder.decodeSingularStringField(value: &_storage._productStatus)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._commentActive)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._questionAnswerActive)
        case 15: try decoder.decodeSingularStringField(value: &_storage._productInsertTime)
        case 16: try decoder.decodeSingularStringField(value: &_storage._productUpdateTime)
        case 17: try decoder.decodeSingularStringField(value: &_storage._productGroupID)
        case 18: try decoder.decodeSingularStringField(value: &_storage._productGroupName)
        case 19: try decoder.decodeSingularInt32Field(value: &_storage._payAllowCount)
        case 20: try decoder.decodeSingularInt32Field(value: &_storage._featureCounter)
        case 21: try decoder.decodeRepeatedMessageField(value: &_storage._feature)
        case 22: try decoder.decodeRepeatedMessageField(value: &_storage._sellerDoc)
        case 23: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 24: try decoder.decodeRepeatedMessageField(value: &_storage._images)
        case 25: try decoder.decodeRepeatedStringField(value: &_storage._tags)
        case 26: try decoder.decodeSingularInt32Field(value: &_storage._score)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if !_storage._productID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productID, fieldNumber: 4)
      }
      if !_storage._perName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._perName, fieldNumber: 5)
      }
      if !_storage._enName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._enName, fieldNumber: 6)
      }
      if !_storage._brand.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brand, fieldNumber: 7)
      }
      if !_storage._model.isEmpty {
        try visitor.visitSingularStringField(value: _storage._model, fieldNumber: 8)
      }
      if _storage._sellerCounter != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sellerCounter, fieldNumber: 9)
      }
      if _storage._like != 0 {
        try visitor.visitSingularInt32Field(value: _storage._like, fieldNumber: 10)
      }
      if _storage._unLike != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unLike, fieldNumber: 11)
      }
      if !_storage._productStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productStatus, fieldNumber: 12)
      }
      if _storage._commentActive != false {
        try visitor.visitSingularBoolField(value: _storage._commentActive, fieldNumber: 13)
      }
      if _storage._questionAnswerActive != false {
        try visitor.visitSingularBoolField(value: _storage._questionAnswerActive, fieldNumber: 14)
      }
      if !_storage._productInsertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productInsertTime, fieldNumber: 15)
      }
      if !_storage._productUpdateTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productUpdateTime, fieldNumber: 16)
      }
      if !_storage._productGroupID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productGroupID, fieldNumber: 17)
      }
      if !_storage._productGroupName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productGroupName, fieldNumber: 18)
      }
      if _storage._payAllowCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._payAllowCount, fieldNumber: 19)
      }
      if _storage._featureCounter != 0 {
        try visitor.visitSingularInt32Field(value: _storage._featureCounter, fieldNumber: 20)
      }
      if !_storage._feature.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._feature, fieldNumber: 21)
      }
      if !_storage._sellerDoc.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sellerDoc, fieldNumber: 22)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 23)
      }
      if !_storage._images.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._images, fieldNumber: 24)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 25)
      }
      if _storage._score != 0 {
        try visitor.visitSingularInt32Field(value: _storage._score, fieldNumber: 26)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGet, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._perName != rhs_storage._perName {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._model != rhs_storage._model {return false}
        if _storage._productGroupID != rhs_storage._productGroupID {return false}
        if _storage._productGroupName != rhs_storage._productGroupName {return false}
        if _storage._payAllowCount != rhs_storage._payAllowCount {return false}
        if _storage._featureCounter != rhs_storage._featureCounter {return false}
        if _storage._sellerCounter != rhs_storage._sellerCounter {return false}
        if _storage._like != rhs_storage._like {return false}
        if _storage._unLike != rhs_storage._unLike {return false}
        if _storage._productStatus != rhs_storage._productStatus {return false}
        if _storage._commentActive != rhs_storage._commentActive {return false}
        if _storage._questionAnswerActive != rhs_storage._questionAnswerActive {return false}
        if _storage._productInsertTime != rhs_storage._productInsertTime {return false}
        if _storage._productUpdateTime != rhs_storage._productUpdateTime {return false}
        if _storage._enName != rhs_storage._enName {return false}
        if _storage._feature != rhs_storage._feature {return false}
        if _storage._sellerDoc != rhs_storage._sellerDoc {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._score != rhs_storage._score {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SellerGetPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sellerId"),
    2: .same(proto: "guaranteeDay"),
    3: .same(proto: "discountPricePercent"),
    4: .same(proto: "productCount"),
    5: .same(proto: "sellerInsertTime"),
    6: .same(proto: "sellerUpdateTime"),
    7: .same(proto: "color"),
    8: .same(proto: "price"),
    9: .same(proto: "payable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sellerID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.guaranteeDay)
      case 3: try decoder.decodeSingularInt32Field(value: &self.discountPricePercent)
      case 4: try decoder.decodeSingularInt32Field(value: &self.productCount)
      case 5: try decoder.decodeSingularStringField(value: &self.sellerInsertTime)
      case 6: try decoder.decodeSingularStringField(value: &self.sellerUpdateTime)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.color)
      case 8: try decoder.decodeSingularInt64Field(value: &self.price)
      case 9: try decoder.decodeSingularInt64Field(value: &self.payable)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sellerID.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerID, fieldNumber: 1)
    }
    if self.guaranteeDay != 0 {
      try visitor.visitSingularInt32Field(value: self.guaranteeDay, fieldNumber: 2)
    }
    if self.discountPricePercent != 0 {
      try visitor.visitSingularInt32Field(value: self.discountPricePercent, fieldNumber: 3)
    }
    if self.productCount != 0 {
      try visitor.visitSingularInt32Field(value: self.productCount, fieldNumber: 4)
    }
    if !self.sellerInsertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerInsertTime, fieldNumber: 5)
    }
    if !self.sellerUpdateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerUpdateTime, fieldNumber: 6)
    }
    if !self.color.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.color, fieldNumber: 7)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 8)
    }
    if self.payable != 0 {
      try visitor.visitSingularInt64Field(value: self.payable, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetPanel, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetPanel) -> Bool {
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.guaranteeDay != rhs.guaranteeDay {return false}
    if lhs.discountPricePercent != rhs.discountPricePercent {return false}
    if lhs.productCount != rhs.productCount {return false}
    if lhs.sellerInsertTime != rhs.sellerInsertTime {return false}
    if lhs.sellerUpdateTime != rhs.sellerUpdateTime {return false}
    if lhs.color != rhs.color {return false}
    if lhs.price != rhs.price {return false}
    if lhs.payable != rhs.payable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ColorGetPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ColorGetPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "engName"),
    2: .same(proto: "perName"),
    3: .same(proto: "code"),
    4: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.engName)
      case 2: try decoder.decodeSingularStringField(value: &self.perName)
      case 3: try decoder.decodeSingularStringField(value: &self.code)
      case 4: try decoder.decodeSingularInt32Field(value: &self.count)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.engName.isEmpty {
      try visitor.visitSingularStringField(value: self.engName, fieldNumber: 1)
    }
    if !self.perName.isEmpty {
      try visitor.visitSingularStringField(value: self.perName, fieldNumber: 2)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ColorGetPanel, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ColorGetPanel) -> Bool {
    if lhs.engName != rhs.engName {return false}
    if lhs.perName != rhs.perName {return false}
    if lhs.code != rhs.code {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGetApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductGetApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "productId"),
    5: .same(proto: "PerName"),
    7: .same(proto: "brand"),
    8: .same(proto: "model"),
    17: .same(proto: "productGroupId"),
    18: .same(proto: "productGroupName"),
    19: .same(proto: "payAllowCount"),
    20: .same(proto: "featureCounter"),
    9: .same(proto: "sellerCounter"),
    10: .same(proto: "like"),
    11: .same(proto: "unLike"),
    12: .same(proto: "productStatus"),
    13: .same(proto: "commentActive"),
    14: .same(proto: "questionAnswerActive"),
    15: .same(proto: "productInsertTime"),
    16: .same(proto: "productUpdateTime"),
    6: .same(proto: "EnName"),
    21: .same(proto: "feature"),
    22: .same(proto: "sellerDoc"),
    23: .same(proto: "description"),
    24: .same(proto: "images"),
    25: .same(proto: "tags"),
    26: .same(proto: "score"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _productID: String = String()
    var _perName: String = String()
    var _brand: String = String()
    var _model: String = String()
    var _productGroupID: String = String()
    var _productGroupName: String = String()
    var _payAllowCount: Int32 = 0
    var _featureCounter: Int32 = 0
    var _sellerCounter: Int32 = 0
    var _like: Int32 = 0
    var _unLike: Int32 = 0
    var _productStatus: String = String()
    var _commentActive: Bool = false
    var _questionAnswerActive: Bool = false
    var _productInsertTime: String = String()
    var _productUpdateTime: String = String()
    var _enName: String = String()
    var _feature: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Feature] = []
    var _sellerDoc: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetApi] = []
    var _description_p: String = String()
    var _images: [Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images] = []
    var _tags: [String] = []
    var _score: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _productID = source._productID
      _perName = source._perName
      _brand = source._brand
      _model = source._model
      _productGroupID = source._productGroupID
      _productGroupName = source._productGroupName
      _payAllowCount = source._payAllowCount
      _featureCounter = source._featureCounter
      _sellerCounter = source._sellerCounter
      _like = source._like
      _unLike = source._unLike
      _productStatus = source._productStatus
      _commentActive = source._commentActive
      _questionAnswerActive = source._questionAnswerActive
      _productInsertTime = source._productInsertTime
      _productUpdateTime = source._productUpdateTime
      _enName = source._enName
      _feature = source._feature
      _sellerDoc = source._sellerDoc
      _description_p = source._description_p
      _images = source._images
      _tags = source._tags
      _score = source._score
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._productID)
        case 5: try decoder.decodeSingularStringField(value: &_storage._perName)
        case 6: try decoder.decodeSingularStringField(value: &_storage._enName)
        case 7: try decoder.decodeSingularStringField(value: &_storage._brand)
        case 8: try decoder.decodeSingularStringField(value: &_storage._model)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._sellerCounter)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._like)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._unLike)
        case 12: try decoder.decodeSingularStringField(value: &_storage._productStatus)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._commentActive)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._questionAnswerActive)
        case 15: try decoder.decodeSingularStringField(value: &_storage._productInsertTime)
        case 16: try decoder.decodeSingularStringField(value: &_storage._productUpdateTime)
        case 17: try decoder.decodeSingularStringField(value: &_storage._productGroupID)
        case 18: try decoder.decodeSingularStringField(value: &_storage._productGroupName)
        case 19: try decoder.decodeSingularInt32Field(value: &_storage._payAllowCount)
        case 20: try decoder.decodeSingularInt32Field(value: &_storage._featureCounter)
        case 21: try decoder.decodeRepeatedMessageField(value: &_storage._feature)
        case 22: try decoder.decodeRepeatedMessageField(value: &_storage._sellerDoc)
        case 23: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 24: try decoder.decodeRepeatedMessageField(value: &_storage._images)
        case 25: try decoder.decodeRepeatedStringField(value: &_storage._tags)
        case 26: try decoder.decodeSingularInt32Field(value: &_storage._score)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if !_storage._productID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productID, fieldNumber: 4)
      }
      if !_storage._perName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._perName, fieldNumber: 5)
      }
      if !_storage._enName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._enName, fieldNumber: 6)
      }
      if !_storage._brand.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brand, fieldNumber: 7)
      }
      if !_storage._model.isEmpty {
        try visitor.visitSingularStringField(value: _storage._model, fieldNumber: 8)
      }
      if _storage._sellerCounter != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sellerCounter, fieldNumber: 9)
      }
      if _storage._like != 0 {
        try visitor.visitSingularInt32Field(value: _storage._like, fieldNumber: 10)
      }
      if _storage._unLike != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unLike, fieldNumber: 11)
      }
      if !_storage._productStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productStatus, fieldNumber: 12)
      }
      if _storage._commentActive != false {
        try visitor.visitSingularBoolField(value: _storage._commentActive, fieldNumber: 13)
      }
      if _storage._questionAnswerActive != false {
        try visitor.visitSingularBoolField(value: _storage._questionAnswerActive, fieldNumber: 14)
      }
      if !_storage._productInsertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productInsertTime, fieldNumber: 15)
      }
      if !_storage._productUpdateTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productUpdateTime, fieldNumber: 16)
      }
      if !_storage._productGroupID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productGroupID, fieldNumber: 17)
      }
      if !_storage._productGroupName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productGroupName, fieldNumber: 18)
      }
      if _storage._payAllowCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._payAllowCount, fieldNumber: 19)
      }
      if _storage._featureCounter != 0 {
        try visitor.visitSingularInt32Field(value: _storage._featureCounter, fieldNumber: 20)
      }
      if !_storage._feature.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._feature, fieldNumber: 21)
      }
      if !_storage._sellerDoc.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sellerDoc, fieldNumber: 22)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 23)
      }
      if !_storage._images.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._images, fieldNumber: 24)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 25)
      }
      if _storage._score != 0 {
        try visitor.visitSingularInt32Field(value: _storage._score, fieldNumber: 26)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGetApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGetApi) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._perName != rhs_storage._perName {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._model != rhs_storage._model {return false}
        if _storage._productGroupID != rhs_storage._productGroupID {return false}
        if _storage._productGroupName != rhs_storage._productGroupName {return false}
        if _storage._payAllowCount != rhs_storage._payAllowCount {return false}
        if _storage._featureCounter != rhs_storage._featureCounter {return false}
        if _storage._sellerCounter != rhs_storage._sellerCounter {return false}
        if _storage._like != rhs_storage._like {return false}
        if _storage._unLike != rhs_storage._unLike {return false}
        if _storage._productStatus != rhs_storage._productStatus {return false}
        if _storage._commentActive != rhs_storage._commentActive {return false}
        if _storage._questionAnswerActive != rhs_storage._questionAnswerActive {return false}
        if _storage._productInsertTime != rhs_storage._productInsertTime {return false}
        if _storage._productUpdateTime != rhs_storage._productUpdateTime {return false}
        if _storage._enName != rhs_storage._enName {return false}
        if _storage._feature != rhs_storage._feature {return false}
        if _storage._sellerDoc != rhs_storage._sellerDoc {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._score != rhs_storage._score {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SellerGetApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sellerId"),
    2: .same(proto: "guaranteeDay"),
    3: .same(proto: "discountPricePercent"),
    4: .same(proto: "productCount"),
    5: .same(proto: "sellerInsertTime"),
    6: .same(proto: "sellerUpdateTime"),
    7: .same(proto: "color"),
    8: .same(proto: "price"),
    9: .same(proto: "payable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sellerID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.guaranteeDay)
      case 3: try decoder.decodeSingularInt32Field(value: &self.discountPricePercent)
      case 4: try decoder.decodeSingularInt32Field(value: &self.productCount)
      case 5: try decoder.decodeSingularStringField(value: &self.sellerInsertTime)
      case 6: try decoder.decodeSingularStringField(value: &self.sellerUpdateTime)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.color)
      case 8: try decoder.decodeSingularInt64Field(value: &self.price)
      case 9: try decoder.decodeSingularInt64Field(value: &self.payable)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sellerID.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerID, fieldNumber: 1)
    }
    if self.guaranteeDay != 0 {
      try visitor.visitSingularInt32Field(value: self.guaranteeDay, fieldNumber: 2)
    }
    if self.discountPricePercent != 0 {
      try visitor.visitSingularInt32Field(value: self.discountPricePercent, fieldNumber: 3)
    }
    if self.productCount != 0 {
      try visitor.visitSingularInt32Field(value: self.productCount, fieldNumber: 4)
    }
    if !self.sellerInsertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerInsertTime, fieldNumber: 5)
    }
    if !self.sellerUpdateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerUpdateTime, fieldNumber: 6)
    }
    if !self.color.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.color, fieldNumber: 7)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 8)
    }
    if self.payable != 0 {
      try visitor.visitSingularInt64Field(value: self.payable, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerGetApi) -> Bool {
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.guaranteeDay != rhs.guaranteeDay {return false}
    if lhs.discountPricePercent != rhs.discountPricePercent {return false}
    if lhs.productCount != rhs.productCount {return false}
    if lhs.sellerInsertTime != rhs.sellerInsertTime {return false}
    if lhs.sellerUpdateTime != rhs.sellerUpdateTime {return false}
    if lhs.color != rhs.color {return false}
    if lhs.price != rhs.price {return false}
    if lhs.payable != rhs.payable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ColorGetApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ColorGetApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "engName"),
    2: .same(proto: "perName"),
    3: .same(proto: "code"),
    4: .same(proto: "count"),
    5: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.engName)
      case 2: try decoder.decodeSingularStringField(value: &self.perName)
      case 3: try decoder.decodeSingularStringField(value: &self.code)
      case 4: try decoder.decodeSingularInt32Field(value: &self.count)
      case 5: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.engName.isEmpty {
      try visitor.visitSingularStringField(value: self.engName, fieldNumber: 1)
    }
    if !self.perName.isEmpty {
      try visitor.visitSingularStringField(value: self.perName, fieldNumber: 2)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 4)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ColorGetApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ColorGetApi) -> Bool {
    if lhs.engName != rhs.engName {return false}
    if lhs.perName != rhs.perName {return false}
    if lhs.code != rhs.code {return false}
    if lhs.count != rhs.count {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Feature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Feature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
    3: .same(proto: "unit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      case 3: try decoder.decodeSingularStringField(value: &self.unit)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    if !self.unit.isEmpty {
      try visitor.visitSingularStringField(value: self.unit, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Feature, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Feature) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Seller: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Seller"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sellerId"),
    2: .same(proto: "guaranteeDay"),
    3: .same(proto: "discountPricePercent"),
    4: .same(proto: "productCount"),
    5: .same(proto: "sellerInsertTime"),
    6: .same(proto: "sellerUpdateTime"),
    7: .same(proto: "color"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sellerID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.guaranteeDay)
      case 3: try decoder.decodeSingularInt32Field(value: &self.discountPricePercent)
      case 4: try decoder.decodeSingularInt32Field(value: &self.productCount)
      case 5: try decoder.decodeSingularStringField(value: &self.sellerInsertTime)
      case 6: try decoder.decodeSingularStringField(value: &self.sellerUpdateTime)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.color)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sellerID.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerID, fieldNumber: 1)
    }
    if self.guaranteeDay != 0 {
      try visitor.visitSingularInt32Field(value: self.guaranteeDay, fieldNumber: 2)
    }
    if self.discountPricePercent != 0 {
      try visitor.visitSingularInt32Field(value: self.discountPricePercent, fieldNumber: 3)
    }
    if self.productCount != 0 {
      try visitor.visitSingularInt32Field(value: self.productCount, fieldNumber: 4)
    }
    if !self.sellerInsertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerInsertTime, fieldNumber: 5)
    }
    if !self.sellerUpdateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerUpdateTime, fieldNumber: 6)
    }
    if !self.color.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.color, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Seller, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Seller) -> Bool {
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.guaranteeDay != rhs.guaranteeDay {return false}
    if lhs.discountPricePercent != rhs.discountPricePercent {return false}
    if lhs.productCount != rhs.productCount {return false}
    if lhs.sellerInsertTime != rhs.sellerInsertTime {return false}
    if lhs.sellerUpdateTime != rhs.sellerUpdateTime {return false}
    if lhs.color != rhs.color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Images"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "size"),
    3: .same(proto: "width"),
    4: .same(proto: "height"),
    5: .same(proto: "type"),
    6: .same(proto: "path"),
    7: .same(proto: "imageDefaultActive"),
    8: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularInt64Field(value: &self.size)
      case 3: try decoder.decodeSingularInt32Field(value: &self.width)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.type)
      case 6: try decoder.decodeSingularStringField(value: &self.path)
      case 7: try decoder.decodeSingularBoolField(value: &self.imageDefaultActive)
      case 8: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 5)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 6)
    }
    if self.imageDefaultActive != false {
      try visitor.visitSingularBoolField(value: self.imageDefaultActive, fieldNumber: 7)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Images) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.size != rhs.size {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.type != rhs.type {return false}
    if lhs.path != rhs.path {return false}
    if lhs.imageDefaultActive != rhs.imageDefaultActive {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductCart"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderId"),
    2: .same(proto: "productId"),
    3: .same(proto: "sellerId"),
    4: .same(proto: "colorId"),
    5: .same(proto: "count"),
    6: .same(proto: "requestDate"),
    7: .same(proto: "updateDate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.orderID)
      case 2: try decoder.decodeSingularStringField(value: &self.productID)
      case 3: try decoder.decodeSingularStringField(value: &self.sellerID)
      case 4: try decoder.decodeSingularStringField(value: &self.colorID)
      case 5: try decoder.decodeSingularInt32Field(value: &self.count)
      case 6: try decoder.decodeSingularStringField(value: &self.requestDate)
      case 7: try decoder.decodeSingularStringField(value: &self.updateDate)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 1)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 2)
    }
    if !self.sellerID.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerID, fieldNumber: 3)
    }
    if !self.colorID.isEmpty {
      try visitor.visitSingularStringField(value: self.colorID, fieldNumber: 4)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 5)
    }
    if !self.requestDate.isEmpty {
      try visitor.visitSingularStringField(value: self.requestDate, fieldNumber: 6)
    }
    if !self.updateDate.isEmpty {
      try visitor.visitSingularStringField(value: self.updateDate, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCart, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCart) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.colorID != rhs.colorID {return false}
    if lhs.count != rhs.count {return false}
    if lhs.requestDate != rhs.requestDate {return false}
    if lhs.updateDate != rhs.updateDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductCart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListProductCart"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "productCart"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.productCart)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.productCart.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productCart, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductCart, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductCart) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.productCart != rhs.productCart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CartUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CartUser"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CartId"),
    2: .same(proto: "productCart"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.cartID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.productCart)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cartID.isEmpty {
      try visitor.visitSingularStringField(value: self.cartID, fieldNumber: 1)
    }
    if !self.productCart.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productCart, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CartUser, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_CartUser) -> Bool {
    if lhs.cartID != rhs.cartID {return false}
    if lhs.productCart != rhs.productCart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListAllCart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAllCart"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "cart"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.cart)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.cart.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cart, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListAllCart, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListAllCart) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.cart != rhs.cart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SellerInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sellerId"),
    2: .same(proto: "address"),
    3: .same(proto: "engName"),
    4: .same(proto: "perName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sellerID)
      case 2: try decoder.decodeSingularStringField(value: &self.address)
      case 3: try decoder.decodeSingularStringField(value: &self.engName)
      case 4: try decoder.decodeSingularStringField(value: &self.perName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sellerID.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerID, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if !self.engName.isEmpty {
      try visitor.visitSingularStringField(value: self.engName, fieldNumber: 3)
    }
    if !self.perName.isEmpty {
      try visitor.visitSingularStringField(value: self.perName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerInfo, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerInfo) -> Bool {
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.address != rhs.address {return false}
    if lhs.engName != rhs.engName {return false}
    if lhs.perName != rhs.perName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SellerList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "sellers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.sellers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.sellers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sellers, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerList, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SellerList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.sellers != rhs.sellers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGroupId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductGroupId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "engName"),
    2: .same(proto: "perName"),
    3: .same(proto: "code"),
    4: .same(proto: "parentCode"),
    5: .same(proto: "child"),
    6: .same(proto: "parentName"),
    7: .same(proto: "productGroupId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.engName)
      case 2: try decoder.decodeSingularStringField(value: &self.perName)
      case 3: try decoder.decodeSingularStringField(value: &self.code)
      case 4: try decoder.decodeSingularStringField(value: &self.parentCode)
      case 5: try decoder.decodeSingularInt32Field(value: &self.child)
      case 6: try decoder.decodeSingularStringField(value: &self.parentName)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.productGroupID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.engName.isEmpty {
      try visitor.visitSingularStringField(value: self.engName, fieldNumber: 1)
    }
    if !self.perName.isEmpty {
      try visitor.visitSingularStringField(value: self.perName, fieldNumber: 2)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 3)
    }
    if !self.parentCode.isEmpty {
      try visitor.visitSingularStringField(value: self.parentCode, fieldNumber: 4)
    }
    if self.child != 0 {
      try visitor.visitSingularInt32Field(value: self.child, fieldNumber: 5)
    }
    if !self.parentName.isEmpty {
      try visitor.visitSingularStringField(value: self.parentName, fieldNumber: 6)
    }
    if !self.productGroupID.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productGroupID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGroupId, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductGroupId) -> Bool {
    if lhs.engName != rhs.engName {return false}
    if lhs.perName != rhs.perName {return false}
    if lhs.code != rhs.code {return false}
    if lhs.parentCode != rhs.parentCode {return false}
    if lhs.child != rhs.child {return false}
    if lhs.parentName != rhs.parentName {return false}
    if lhs.productGroupID != rhs.productGroupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductGroupId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListProductGroupId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "productGroupId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.productGroupID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.productGroupID.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productGroupID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductGroupId, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductGroupId) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.productGroupID != rhs.productGroupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Color"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "engName"),
    2: .same(proto: "perName"),
    3: .same(proto: "code"),
    4: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.engName)
      case 2: try decoder.decodeSingularStringField(value: &self.perName)
      case 3: try decoder.decodeSingularStringField(value: &self.code)
      case 4: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.engName.isEmpty {
      try visitor.visitSingularStringField(value: self.engName, fieldNumber: 1)
    }
    if !self.perName.isEmpty {
      try visitor.visitSingularStringField(value: self.perName, fieldNumber: 2)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Color, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Color) -> Bool {
    if lhs.engName != rhs.engName {return false}
    if lhs.perName != rhs.perName {return false}
    if lhs.code != rhs.code {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListColorId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListColorId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "count"),
    8: .same(proto: "colorId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeSingularInt32Field(value: &self.count)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.colorID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 7)
    }
    if !self.colorID.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.colorID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListColorId, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListColorId) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.count != rhs.count {return false}
    if lhs.colorID != rhs.colorID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCartApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductCartApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderId"),
    2: .same(proto: "productId"),
    3: .same(proto: "productEngName"),
    4: .same(proto: "productPerName"),
    5: .same(proto: "sellerId"),
    6: .same(proto: "sellerEngName"),
    7: .same(proto: "sellerPerName"),
    8: .same(proto: "colorId"),
    9: .same(proto: "colorEngName"),
    10: .same(proto: "colorPerName"),
    16: .same(proto: "colorVaue"),
    11: .same(proto: "price"),
    12: .same(proto: "discountPrice"),
    13: .same(proto: "count"),
    14: .same(proto: "requestDate"),
    15: .same(proto: "updateDate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.orderID)
      case 2: try decoder.decodeSingularStringField(value: &self.productID)
      case 3: try decoder.decodeSingularStringField(value: &self.productEngName)
      case 4: try decoder.decodeSingularStringField(value: &self.productPerName)
      case 5: try decoder.decodeSingularStringField(value: &self.sellerID)
      case 6: try decoder.decodeSingularStringField(value: &self.sellerEngName)
      case 7: try decoder.decodeSingularStringField(value: &self.sellerPerName)
      case 8: try decoder.decodeSingularStringField(value: &self.colorID)
      case 9: try decoder.decodeSingularStringField(value: &self.colorEngName)
      case 10: try decoder.decodeSingularStringField(value: &self.colorPerName)
      case 11: try decoder.decodeSingularInt64Field(value: &self.price)
      case 12: try decoder.decodeSingularInt64Field(value: &self.discountPrice)
      case 13: try decoder.decodeSingularInt32Field(value: &self.count)
      case 14: try decoder.decodeSingularStringField(value: &self.requestDate)
      case 15: try decoder.decodeSingularStringField(value: &self.updateDate)
      case 16: try decoder.decodeSingularStringField(value: &self.colorVaue)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 1)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 2)
    }
    if !self.productEngName.isEmpty {
      try visitor.visitSingularStringField(value: self.productEngName, fieldNumber: 3)
    }
    if !self.productPerName.isEmpty {
      try visitor.visitSingularStringField(value: self.productPerName, fieldNumber: 4)
    }
    if !self.sellerID.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerID, fieldNumber: 5)
    }
    if !self.sellerEngName.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerEngName, fieldNumber: 6)
    }
    if !self.sellerPerName.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerPerName, fieldNumber: 7)
    }
    if !self.colorID.isEmpty {
      try visitor.visitSingularStringField(value: self.colorID, fieldNumber: 8)
    }
    if !self.colorEngName.isEmpty {
      try visitor.visitSingularStringField(value: self.colorEngName, fieldNumber: 9)
    }
    if !self.colorPerName.isEmpty {
      try visitor.visitSingularStringField(value: self.colorPerName, fieldNumber: 10)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 11)
    }
    if self.discountPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.discountPrice, fieldNumber: 12)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 13)
    }
    if !self.requestDate.isEmpty {
      try visitor.visitSingularStringField(value: self.requestDate, fieldNumber: 14)
    }
    if !self.updateDate.isEmpty {
      try visitor.visitSingularStringField(value: self.updateDate, fieldNumber: 15)
    }
    if !self.colorVaue.isEmpty {
      try visitor.visitSingularStringField(value: self.colorVaue, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCartApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ProductCartApi) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.productEngName != rhs.productEngName {return false}
    if lhs.productPerName != rhs.productPerName {return false}
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.sellerEngName != rhs.sellerEngName {return false}
    if lhs.sellerPerName != rhs.sellerPerName {return false}
    if lhs.colorID != rhs.colorID {return false}
    if lhs.colorEngName != rhs.colorEngName {return false}
    if lhs.colorPerName != rhs.colorPerName {return false}
    if lhs.colorVaue != rhs.colorVaue {return false}
    if lhs.price != rhs.price {return false}
    if lhs.discountPrice != rhs.discountPrice {return false}
    if lhs.count != rhs.count {return false}
    if lhs.requestDate != rhs.requestDate {return false}
    if lhs.updateDate != rhs.updateDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductCartApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListProductCartApi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "productCart"),
    5: .same(proto: "totalPrice"),
    6: .same(proto: "totlaDiscountPrice"),
    7: .same(proto: "totalCount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.productCart)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalPrice)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totlaDiscountPrice)
      case 7: try decoder.decodeSingularInt32Field(value: &self.totalCount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.productCart.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productCart, fieldNumber: 4)
    }
    if self.totalPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPrice, fieldNumber: 5)
    }
    if self.totlaDiscountPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.totlaDiscountPrice, fieldNumber: 6)
    }
    if self.totalCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalCount, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductCartApi, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListProductCartApi) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.productCart != rhs.productCart {return false}
    if lhs.totalPrice != rhs.totalPrice {return false}
    if lhs.totlaDiscountPrice != rhs.totlaDiscountPrice {return false}
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Transport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "price"),
    4: .same(proto: "dayOfWeek"),
    5: .same(proto: "earliestTime"),
    6: .same(proto: "latestTime"),
    7: .same(proto: "possibleCities"),
    8: .same(proto: "capacity"),
    9: .same(proto: "status"),
    10: .same(proto: "exceptionDays"),
    11: .same(proto: "possibleHours"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      case 3: try decoder.decodeSingularInt64Field(value: &self.price)
      case 4: try decoder.decodeRepeatedInt32Field(value: &self.dayOfWeek)
      case 5: try decoder.decodeSingularInt32Field(value: &self.earliestTime)
      case 6: try decoder.decodeSingularInt32Field(value: &self.latestTime)
      case 7: try decoder.decodeRepeatedStringField(value: &self.possibleCities)
      case 8: try decoder.decodeSingularInt32Field(value: &self.capacity)
      case 9: try decoder.decodeSingularStringField(value: &self.status)
      case 10: try decoder.decodeRepeatedStringField(value: &self.exceptionDays)
      case 11: try decoder.decodeRepeatedStringField(value: &self.possibleHours)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 3)
    }
    if !self.dayOfWeek.isEmpty {
      try visitor.visitPackedInt32Field(value: self.dayOfWeek, fieldNumber: 4)
    }
    if self.earliestTime != 0 {
      try visitor.visitSingularInt32Field(value: self.earliestTime, fieldNumber: 5)
    }
    if self.latestTime != 0 {
      try visitor.visitSingularInt32Field(value: self.latestTime, fieldNumber: 6)
    }
    if !self.possibleCities.isEmpty {
      try visitor.visitRepeatedStringField(value: self.possibleCities, fieldNumber: 7)
    }
    if self.capacity != 0 {
      try visitor.visitSingularInt32Field(value: self.capacity, fieldNumber: 8)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 9)
    }
    if !self.exceptionDays.isEmpty {
      try visitor.visitRepeatedStringField(value: self.exceptionDays, fieldNumber: 10)
    }
    if !self.possibleHours.isEmpty {
      try visitor.visitRepeatedStringField(value: self.possibleHours, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Transport, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Transport) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.price != rhs.price {return false}
    if lhs.dayOfWeek != rhs.dayOfWeek {return false}
    if lhs.earliestTime != rhs.earliestTime {return false}
    if lhs.latestTime != rhs.latestTime {return false}
    if lhs.possibleCities != rhs.possibleCities {return false}
    if lhs.capacity != rhs.capacity {return false}
    if lhs.status != rhs.status {return false}
    if lhs.exceptionDays != rhs.exceptionDays {return false}
    if lhs.possibleHours != rhs.possibleHours {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SendPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendPlan"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "transportType"),
    3: .same(proto: "orderIds"),
    4: .same(proto: "full"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.date)
      case 2: try decoder.decodeSingularStringField(value: &self.transportType)
      case 3: try decoder.decodeRepeatedStringField(value: &self.orderIds)
      case 4: try decoder.decodeSingularBoolField(value: &self.full)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 1)
    }
    if !self.transportType.isEmpty {
      try visitor.visitSingularStringField(value: self.transportType, fieldNumber: 2)
    }
    if !self.orderIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.orderIds, fieldNumber: 3)
    }
    if self.full != false {
      try visitor.visitSingularBoolField(value: self.full, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SendPlan, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SendPlan) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.transportType != rhs.transportType {return false}
    if lhs.orderIds != rhs.orderIds {return false}
    if lhs.full != rhs.full {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListTransport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTransport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListTransport, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListTransport) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListSendPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSendPlan"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
    5: .same(proto: "page"),
    6: .same(proto: "totalPage"),
    7: .same(proto: "totalItem"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 5: try decoder.decodeSingularInt32Field(value: &self.page)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalPage)
      case 7: try decoder.decodeSingularInt64Field(value: &self.totalItem)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 5)
    }
    if self.totalPage != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPage, fieldNumber: 6)
    }
    if self.totalItem != 0 {
      try visitor.visitSingularInt64Field(value: self.totalItem, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListSendPlan, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListSendPlan) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalPage != rhs.totalPage {return false}
    if lhs.totalItem != rhs.totalItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PossibleTime"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "time"),
    3: .same(proto: "full"),
    4: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.time)
      case 3: try decoder.decodeSingularBoolField(value: &self.full)
      case 4: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.time.isEmpty {
      try visitor.visitSingularStringField(value: self.time, fieldNumber: 2)
    }
    if self.full != false {
      try visitor.visitSingularBoolField(value: self.full, fieldNumber: 3)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleTime, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleTime) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.time != rhs.time {return false}
    if lhs.full != rhs.full {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleDate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PossibleDate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.date)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleDate, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleDate) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleTransports: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PossibleTransports"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "price"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      case 3: try decoder.decodeSingularInt64Field(value: &self.price)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleTransports, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PossibleTransports) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.price != rhs.price {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListPossibleTimes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListPossibleTimes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    5: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListPossibleTimes, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListPossibleTimes) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Discount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Discount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "expireTime"),
    3: .same(proto: "public"),
    4: .same(proto: "discountPercent"),
    5: .same(proto: "discountAmount"),
    6: .same(proto: "minBuy"),
    7: .same(proto: "description"),
    8: .same(proto: "insertTime"),
    9: .same(proto: "id"),
    10: .same(proto: "status"),
    11: .same(proto: "allowedUsers"),
    12: .same(proto: "availableCount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.expireTime)
      case 3: try decoder.decodeSingularBoolField(value: &self.`public`)
      case 4: try decoder.decodeSingularInt32Field(value: &self.discountPercent)
      case 5: try decoder.decodeSingularInt64Field(value: &self.discountAmount)
      case 6: try decoder.decodeSingularInt64Field(value: &self.minBuy)
      case 7: try decoder.decodeSingularStringField(value: &self.description_p)
      case 8: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 9: try decoder.decodeSingularStringField(value: &self.id)
      case 10: try decoder.decodeSingularStringField(value: &self.status)
      case 11: try decoder.decodeRepeatedStringField(value: &self.allowedUsers)
      case 12: try decoder.decodeSingularInt32Field(value: &self.availableCount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.expireTime.isEmpty {
      try visitor.visitSingularStringField(value: self.expireTime, fieldNumber: 2)
    }
    if self.`public` != false {
      try visitor.visitSingularBoolField(value: self.`public`, fieldNumber: 3)
    }
    if self.discountPercent != 0 {
      try visitor.visitSingularInt32Field(value: self.discountPercent, fieldNumber: 4)
    }
    if self.discountAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.discountAmount, fieldNumber: 5)
    }
    if self.minBuy != 0 {
      try visitor.visitSingularInt64Field(value: self.minBuy, fieldNumber: 6)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 7)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 8)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 9)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 10)
    }
    if !self.allowedUsers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.allowedUsers, fieldNumber: 11)
    }
    if self.availableCount != 0 {
      try visitor.visitSingularInt32Field(value: self.availableCount, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Discount, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Discount) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.expireTime != rhs.expireTime {return false}
    if lhs.`public` != rhs.`public` {return false}
    if lhs.discountPercent != rhs.discountPercent {return false}
    if lhs.discountAmount != rhs.discountAmount {return false}
    if lhs.minBuy != rhs.minBuy {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.id != rhs.id {return false}
    if lhs.status != rhs.status {return false}
    if lhs.allowedUsers != rhs.allowedUsers {return false}
    if lhs.availableCount != rhs.availableCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListDiscount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListDiscount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
    5: .same(proto: "page"),
    6: .same(proto: "totalPage"),
    7: .same(proto: "totalItem"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 5: try decoder.decodeSingularInt32Field(value: &self.page)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalPage)
      case 7: try decoder.decodeSingularInt64Field(value: &self.totalItem)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 5)
    }
    if self.totalPage != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPage, fieldNumber: 6)
    }
    if self.totalItem != 0 {
      try visitor.visitSingularInt64Field(value: self.totalItem, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListDiscount, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListDiscount) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalPage != rhs.totalPage {return false}
    if lhs.totalItem != rhs.totalItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Address"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "priority"),
    3: .same(proto: "nickName"),
    4: .same(proto: "mobile"),
    5: .same(proto: "phone"),
    6: .same(proto: "province"),
    7: .same(proto: "city"),
    8: .same(proto: "sector"),
    9: .same(proto: "address"),
    10: .same(proto: "postalCode"),
    11: .same(proto: "recipientName"),
    12: .same(proto: "recipientPhone"),
    13: .same(proto: "locationLatitude"),
    14: .same(proto: "locationLongitude"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt32Field(value: &self.priority)
      case 3: try decoder.decodeSingularStringField(value: &self.nickName)
      case 4: try decoder.decodeSingularStringField(value: &self.mobile)
      case 5: try decoder.decodeSingularStringField(value: &self.phone)
      case 6: try decoder.decodeSingularStringField(value: &self.province)
      case 7: try decoder.decodeSingularStringField(value: &self.city)
      case 8: try decoder.decodeSingularStringField(value: &self.sector)
      case 9: try decoder.decodeSingularStringField(value: &self.address)
      case 10: try decoder.decodeSingularStringField(value: &self.postalCode)
      case 11: try decoder.decodeSingularStringField(value: &self.recipientName)
      case 12: try decoder.decodeSingularStringField(value: &self.recipientPhone)
      case 13: try decoder.decodeSingularDoubleField(value: &self.locationLatitude)
      case 14: try decoder.decodeSingularDoubleField(value: &self.locationLongitude)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 2)
    }
    if !self.nickName.isEmpty {
      try visitor.visitSingularStringField(value: self.nickName, fieldNumber: 3)
    }
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 4)
    }
    if !self.phone.isEmpty {
      try visitor.visitSingularStringField(value: self.phone, fieldNumber: 5)
    }
    if !self.province.isEmpty {
      try visitor.visitSingularStringField(value: self.province, fieldNumber: 6)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 7)
    }
    if !self.sector.isEmpty {
      try visitor.visitSingularStringField(value: self.sector, fieldNumber: 8)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 9)
    }
    if !self.postalCode.isEmpty {
      try visitor.visitSingularStringField(value: self.postalCode, fieldNumber: 10)
    }
    if !self.recipientName.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientName, fieldNumber: 11)
    }
    if !self.recipientPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientPhone, fieldNumber: 12)
    }
    if self.locationLatitude != 0 {
      try visitor.visitSingularDoubleField(value: self.locationLatitude, fieldNumber: 13)
    }
    if self.locationLongitude != 0 {
      try visitor.visitSingularDoubleField(value: self.locationLongitude, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Address, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Address) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.nickName != rhs.nickName {return false}
    if lhs.mobile != rhs.mobile {return false}
    if lhs.phone != rhs.phone {return false}
    if lhs.province != rhs.province {return false}
    if lhs.city != rhs.city {return false}
    if lhs.sector != rhs.sector {return false}
    if lhs.address != rhs.address {return false}
    if lhs.postalCode != rhs.postalCode {return false}
    if lhs.recipientName != rhs.recipientName {return false}
    if lhs.recipientPhone != rhs.recipientPhone {return false}
    if lhs.locationLatitude != rhs.locationLatitude {return false}
    if lhs.locationLongitude != rhs.locationLongitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAddress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListAddress, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListAddress) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PaymentResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaymentResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "orderId"),
    5: .same(proto: "bankUrl"),
    6: .same(proto: "transactionId"),
    9: .same(proto: "totalPrice"),
    10: .same(proto: "totlaDiscountPrice"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.orderID)
      case 5: try decoder.decodeSingularStringField(value: &self.bankURL)
      case 6: try decoder.decodeSingularStringField(value: &self.transactionID)
      case 9: try decoder.decodeSingularInt64Field(value: &self.totalPrice)
      case 10: try decoder.decodeSingularInt64Field(value: &self.totlaDiscountPrice)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 4)
    }
    if !self.bankURL.isEmpty {
      try visitor.visitSingularStringField(value: self.bankURL, fieldNumber: 5)
    }
    if !self.transactionID.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionID, fieldNumber: 6)
    }
    if self.totalPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPrice, fieldNumber: 9)
    }
    if self.totlaDiscountPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.totlaDiscountPrice, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PaymentResult, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_PaymentResult) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.bankURL != rhs.bankURL {return false}
    if lhs.transactionID != rhs.transactionID {return false}
    if lhs.totalPrice != rhs.totalPrice {return false}
    if lhs.totlaDiscountPrice != rhs.totlaDiscountPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_OrderProduct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrderProduct"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "count"),
    4: .same(proto: "price"),
    5: .same(proto: "payable"),
    6: .same(proto: "guaranteeDay"),
    7: .same(proto: "sellerId"),
    8: .same(proto: "sellerName"),
    9: .same(proto: "colorId"),
    10: .same(proto: "colorName"),
    11: .same(proto: "colorValue"),
    12: .same(proto: "productStatus"),
    13: .same(proto: "productId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularInt32Field(value: &self.count)
      case 4: try decoder.decodeSingularInt64Field(value: &self.price)
      case 5: try decoder.decodeSingularInt64Field(value: &self.payable)
      case 6: try decoder.decodeSingularInt32Field(value: &self.guaranteeDay)
      case 7: try decoder.decodeSingularStringField(value: &self.sellerID)
      case 8: try decoder.decodeSingularStringField(value: &self.sellerName)
      case 9: try decoder.decodeSingularStringField(value: &self.colorID)
      case 10: try decoder.decodeSingularStringField(value: &self.colorName)
      case 11: try decoder.decodeSingularStringField(value: &self.colorValue)
      case 12: try decoder.decodeSingularStringField(value: &self.productStatus)
      case 13: try decoder.decodeSingularStringField(value: &self.productID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 3)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 4)
    }
    if self.payable != 0 {
      try visitor.visitSingularInt64Field(value: self.payable, fieldNumber: 5)
    }
    if self.guaranteeDay != 0 {
      try visitor.visitSingularInt32Field(value: self.guaranteeDay, fieldNumber: 6)
    }
    if !self.sellerID.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerID, fieldNumber: 7)
    }
    if !self.sellerName.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerName, fieldNumber: 8)
    }
    if !self.colorID.isEmpty {
      try visitor.visitSingularStringField(value: self.colorID, fieldNumber: 9)
    }
    if !self.colorName.isEmpty {
      try visitor.visitSingularStringField(value: self.colorName, fieldNumber: 10)
    }
    if !self.colorValue.isEmpty {
      try visitor.visitSingularStringField(value: self.colorValue, fieldNumber: 11)
    }
    if !self.productStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.productStatus, fieldNumber: 12)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_OrderProduct, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_OrderProduct) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.count != rhs.count {return false}
    if lhs.price != rhs.price {return false}
    if lhs.payable != rhs.payable {return false}
    if lhs.guaranteeDay != rhs.guaranteeDay {return false}
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.sellerName != rhs.sellerName {return false}
    if lhs.colorID != rhs.colorID {return false}
    if lhs.colorName != rhs.colorName {return false}
    if lhs.colorValue != rhs.colorValue {return false}
    if lhs.productStatus != rhs.productStatus {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Order: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Order"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "id"),
    5: .same(proto: "subscriberId"),
    6: .same(proto: "insertTime"),
    7: .same(proto: "transportId"),
    8: .same(proto: "transportPrice"),
    9: .same(proto: "totalPrice"),
    10: .same(proto: "totalPayable"),
    11: .same(proto: "orderStatus"),
    12: .same(proto: "payStatus"),
    13: .same(proto: "products"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularStringField(value: &self.id)
      case 5: try decoder.decodeSingularStringField(value: &self.subscriberID)
      case 6: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 7: try decoder.decodeSingularStringField(value: &self.transportID)
      case 8: try decoder.decodeSingularInt64Field(value: &self.transportPrice)
      case 9: try decoder.decodeSingularInt64Field(value: &self.totalPrice)
      case 10: try decoder.decodeSingularInt64Field(value: &self.totalPayable)
      case 11: try decoder.decodeSingularStringField(value: &self.orderStatus)
      case 12: try decoder.decodeSingularStringField(value: &self.payStatus)
      case 13: try decoder.decodeRepeatedMessageField(value: &self.products)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 4)
    }
    if !self.subscriberID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberID, fieldNumber: 5)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 6)
    }
    if !self.transportID.isEmpty {
      try visitor.visitSingularStringField(value: self.transportID, fieldNumber: 7)
    }
    if self.transportPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.transportPrice, fieldNumber: 8)
    }
    if self.totalPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPrice, fieldNumber: 9)
    }
    if self.totalPayable != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPayable, fieldNumber: 10)
    }
    if !self.orderStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.orderStatus, fieldNumber: 11)
    }
    if !self.payStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.payStatus, fieldNumber: 12)
    }
    if !self.products.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.products, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Order, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Order) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.subscriberID != rhs.subscriberID {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.transportID != rhs.transportID {return false}
    if lhs.transportPrice != rhs.transportPrice {return false}
    if lhs.totalPrice != rhs.totalPrice {return false}
    if lhs.totalPayable != rhs.totalPayable {return false}
    if lhs.orderStatus != rhs.orderStatus {return false}
    if lhs.payStatus != rhs.payStatus {return false}
    if lhs.products != rhs.products {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListOrders: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListOrders"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
    5: .same(proto: "totalPage"),
    6: .same(proto: "page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 5: try decoder.decodeSingularInt32Field(value: &self.totalPage)
      case 6: try decoder.decodeSingularInt32Field(value: &self.page)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    if self.totalPage != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPage, fieldNumber: 5)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListOrders, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListOrders) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.totalPage != rhs.totalPage {return false}
    if lhs.page != rhs.page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_GetDiscountPrice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDiscountPrice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "oldPrice"),
    5: .same(proto: "newPrice"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt64Field(value: &self.oldPrice)
      case 5: try decoder.decodeSingularInt64Field(value: &self.newPrice)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.oldPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.oldPrice, fieldNumber: 4)
    }
    if self.newPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.newPrice, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_GetDiscountPrice, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_GetDiscountPrice) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.oldPrice != rhs.oldPrice {return false}
    if lhs.newPrice != rhs.newPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_City: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".City"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "id"),
    1: .same(proto: "state"),
    2: .same(proto: "city"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.state)
      case 2: try decoder.decodeSingularStringField(value: &self.city)
      case 3: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.state.isEmpty {
      try visitor.visitSingularStringField(value: self.state, fieldNumber: 1)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_City, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_City) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.state != rhs.state {return false}
    if lhs.city != rhs.city {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListCities: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCities"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    5: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListCities, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListCities) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Unit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Unit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "id"),
    1: .same(proto: "prName"),
    2: .same(proto: "enName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.prName)
      case 2: try decoder.decodeSingularStringField(value: &self.enName)
      case 3: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prName.isEmpty {
      try visitor.visitSingularStringField(value: self.prName, fieldNumber: 1)
    }
    if !self.enName.isEmpty {
      try visitor.visitSingularStringField(value: self.enName, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Unit, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Unit) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.prName != rhs.prName {return false}
    if lhs.enName != rhs.enName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListUnits: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListUnits"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    5: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListUnits, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListUnits) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "orderId"),
    3: .same(proto: "paymentId"),
    4: .same(proto: "price"),
    5: .same(proto: "payable"),
    6: .same(proto: "agentId"),
    7: .same(proto: "insertTime"),
    8: .same(proto: "comment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.orderID)
      case 3: try decoder.decodeSingularStringField(value: &self.paymentID)
      case 4: try decoder.decodeSingularInt64Field(value: &self.price)
      case 5: try decoder.decodeSingularInt64Field(value: &self.payable)
      case 6: try decoder.decodeSingularStringField(value: &self.agentID)
      case 7: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 8: try decoder.decodeSingularStringField(value: &self.comment)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 2)
    }
    if !self.paymentID.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentID, fieldNumber: 3)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 4)
    }
    if self.payable != 0 {
      try visitor.visitSingularInt64Field(value: self.payable, fieldNumber: 5)
    }
    if !self.agentID.isEmpty {
      try visitor.visitSingularStringField(value: self.agentID, fieldNumber: 6)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 7)
    }
    if !self.comment.isEmpty {
      try visitor.visitSingularStringField(value: self.comment, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Transaction, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Transaction) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.paymentID != rhs.paymentID {return false}
    if lhs.price != rhs.price {return false}
    if lhs.payable != rhs.payable {return false}
    if lhs.agentID != rhs.agentID {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.comment != rhs.comment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListTransactions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTransactions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    5: .same(proto: "data"),
    6: .same(proto: "totalPrice"),
    7: .same(proto: "totalPayable"),
    8: .same(proto: "page"),
    9: .same(proto: "totalItem"),
    10: .same(proto: "totalPage"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalPrice)
      case 7: try decoder.decodeSingularInt64Field(value: &self.totalPayable)
      case 8: try decoder.decodeSingularInt32Field(value: &self.page)
      case 9: try decoder.decodeSingularInt64Field(value: &self.totalItem)
      case 10: try decoder.decodeSingularInt64Field(value: &self.totalPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 5)
    }
    if self.totalPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPrice, fieldNumber: 6)
    }
    if self.totalPayable != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPayable, fieldNumber: 7)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 8)
    }
    if self.totalItem != 0 {
      try visitor.visitSingularInt64Field(value: self.totalItem, fieldNumber: 9)
    }
    if self.totalPage != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPage, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListTransactions, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListTransactions) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.totalPrice != rhs.totalPrice {return false}
    if lhs.totalPayable != rhs.totalPayable {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalItem != rhs.totalItem {return false}
    if lhs.totalPage != rhs.totalPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Featur: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Featur"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "unit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.unit)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.unit.isEmpty {
      try visitor.visitSingularStringField(value: self.unit, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Featur, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_Featur) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListFeature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListFeature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListFeature, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListFeature) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SaleReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SaleReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "productId"),
    2: .same(proto: "productName"),
    3: .same(proto: "sellerId"),
    4: .same(proto: "sellerName"),
    5: .same(proto: "colorId"),
    6: .same(proto: "colorName"),
    7: .same(proto: "status"),
    8: .same(proto: "count"),
    9: .same(proto: "totalPrice"),
    10: .same(proto: "totalPayable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.productID)
      case 2: try decoder.decodeSingularStringField(value: &self.productName)
      case 3: try decoder.decodeSingularStringField(value: &self.sellerID)
      case 4: try decoder.decodeSingularStringField(value: &self.sellerName)
      case 5: try decoder.decodeSingularStringField(value: &self.colorID)
      case 6: try decoder.decodeSingularStringField(value: &self.colorName)
      case 7: try decoder.decodeSingularStringField(value: &self.status)
      case 8: try decoder.decodeSingularInt32Field(value: &self.count)
      case 9: try decoder.decodeSingularInt64Field(value: &self.totalPrice)
      case 10: try decoder.decodeSingularInt64Field(value: &self.totalPayable)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 1)
    }
    if !self.productName.isEmpty {
      try visitor.visitSingularStringField(value: self.productName, fieldNumber: 2)
    }
    if !self.sellerID.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerID, fieldNumber: 3)
    }
    if !self.sellerName.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerName, fieldNumber: 4)
    }
    if !self.colorID.isEmpty {
      try visitor.visitSingularStringField(value: self.colorID, fieldNumber: 5)
    }
    if !self.colorName.isEmpty {
      try visitor.visitSingularStringField(value: self.colorName, fieldNumber: 6)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 7)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 8)
    }
    if self.totalPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPrice, fieldNumber: 9)
    }
    if self.totalPayable != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPayable, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SaleReport, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_SaleReport) -> Bool {
    if lhs.productID != rhs.productID {return false}
    if lhs.productName != rhs.productName {return false}
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.sellerName != rhs.sellerName {return false}
    if lhs.colorID != rhs.colorID {return false}
    if lhs.colorName != rhs.colorName {return false}
    if lhs.status != rhs.status {return false}
    if lhs.count != rhs.count {return false}
    if lhs.totalPrice != rhs.totalPrice {return false}
    if lhs.totalPayable != rhs.totalPayable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListSaleReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSaleReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    5: .same(proto: "data"),
    8: .same(proto: "page"),
    9: .same(proto: "totalItem"),
    10: .same(proto: "totalPage"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 8: try decoder.decodeSingularInt32Field(value: &self.page)
      case 9: try decoder.decodeSingularInt64Field(value: &self.totalItem)
      case 10: try decoder.decodeSingularInt64Field(value: &self.totalPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 5)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 8)
    }
    if self.totalItem != 0 {
      try visitor.visitSingularInt64Field(value: self.totalItem, fieldNumber: 9)
    }
    if self.totalPage != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPage, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListSaleReport, rhs: Com_Vasl_Vaslapp_Modules_Shop_Global_Proto_Holder_ListSaleReport) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalItem != rhs.totalItem {return false}
    if lhs.totalPage != rhs.totalPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
