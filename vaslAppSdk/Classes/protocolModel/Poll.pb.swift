// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Poll.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_HelloWorld {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var title: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollForm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var title: String = String()

  public var submitDate: String = String()

  public var link: String = String()

  public var startTime: String = String()

  public var expireTime: String = String()

  public var isActive: Bool = false

  public var description_p: String = String()

  public var isDeleted: Bool = false

  public var tags: [String] = []

  public var user: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_User {
    get {return _user ?? Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {self._user = nil}

  public var questions: [Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Question] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _user: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_User? = nil
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_QuestionGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var totalScore: Int32 = 0

  public var totalRank: Int32 = 0

  public var data: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Question {
    get {return _data ?? Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Question()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Question? = nil
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Question {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var questionNumber: Int32 = 0

  public var question: String = String()

  public var questionType: String = String()

  public var rankOrderQuestion: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_RankOrderQuestion {
    get {return _rankOrderQuestion ?? Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_RankOrderQuestion()}
    set {_rankOrderQuestion = newValue}
  }
  /// Returns true if `rankOrderQuestion` has been explicitly set.
  public var hasRankOrderQuestion: Bool {return self._rankOrderQuestion != nil}
  /// Clears the value of `rankOrderQuestion`. Subsequent reads from it will return its default value.
  public mutating func clearRankOrderQuestion() {self._rankOrderQuestion = nil}

  public var textMessageQuestion: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_TextMessageQuestion {
    get {return _textMessageQuestion ?? Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_TextMessageQuestion()}
    set {_textMessageQuestion = newValue}
  }
  /// Returns true if `textMessageQuestion` has been explicitly set.
  public var hasTextMessageQuestion: Bool {return self._textMessageQuestion != nil}
  /// Clears the value of `textMessageQuestion`. Subsequent reads from it will return its default value.
  public mutating func clearTextMessageQuestion() {self._textMessageQuestion = nil}

  public var multipleChoiceQuestion: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_MultipleChoiceQuestion {
    get {return _multipleChoiceQuestion ?? Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_MultipleChoiceQuestion()}
    set {_multipleChoiceQuestion = newValue}
  }
  /// Returns true if `multipleChoiceQuestion` has been explicitly set.
  public var hasMultipleChoiceQuestion: Bool {return self._multipleChoiceQuestion != nil}
  /// Clears the value of `multipleChoiceQuestion`. Subsequent reads from it will return its default value.
  public mutating func clearMultipleChoiceQuestion() {self._multipleChoiceQuestion = nil}

  public var checkBoxQuestion: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_CheckBoxQuestion {
    get {return _checkBoxQuestion ?? Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_CheckBoxQuestion()}
    set {_checkBoxQuestion = newValue}
  }
  /// Returns true if `checkBoxQuestion` has been explicitly set.
  public var hasCheckBoxQuestion: Bool {return self._checkBoxQuestion != nil}
  /// Clears the value of `checkBoxQuestion`. Subsequent reads from it will return its default value.
  public mutating func clearCheckBoxQuestion() {self._checkBoxQuestion = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rankOrderQuestion: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_RankOrderQuestion? = nil
  fileprivate var _textMessageQuestion: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_TextMessageQuestion? = nil
  fileprivate var _multipleChoiceQuestion: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_MultipleChoiceQuestion? = nil
  fileprivate var _checkBoxQuestion: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_CheckBoxQuestion? = nil
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_QuestionList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Question] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_RankOrderQuestion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: Int32 = 0

  public var answers: [Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Answer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_TextMessageQuestion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///TODO what will happen to voting here !!!!!
  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: Int32 = 0

  public var answer: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Answer {
    get {return _answer ?? Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Answer()}
    set {_answer = newValue}
  }
  /// Returns true if `answer` has been explicitly set.
  public var hasAnswer: Bool {return self._answer != nil}
  /// Clears the value of `answer`. Subsequent reads from it will return its default value.
  public mutating func clearAnswer() {self._answer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _answer: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Answer? = nil
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_MultipleChoiceQuestion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: Int32 = 0

  public var answers: [Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Answer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_CheckBoxQuestion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: Int32 = 0

  public var answers: [Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Answer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Answer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var answerID: Int32 = 0

  public var answerNumber: Int32 = 0

  public var answerText: String = String()

  ///TODO check for text message question there is no need to vote I think
  public var votes: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///when user wants to see his/her own poll forms defined in panel
public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollsList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: String = String()

  public var code: String = String()

  public var message: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var polls: [Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollInList] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollInList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var title: String = String()

  public var startTime: String = String()

  public var expireTime: String = String()

  public var isActive: Bool = false

  public var isDeleted: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var title: String = String()

  public var tags: [String] = []

  public var startTime: String = String()

  public var expireTime: String = String()

  public var data: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollForm {
    get {return _data ?? Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollForm()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollForm? = nil
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Subscriber {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: String = String()

  public var nickName: String = String()

  public var userName: String = String()

  public var email: String = String()

  public var mobile: String = String()

  public var imageURL: String = String()

  public var firstName: String = String()

  public var lastName: String = String()

  public var subscriberType: String = String()

  public var gender: String = String()

  public var birthDate: String = String()

  public var address: [Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Address] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: String = String()

  public var firstName: String = String()

  public var lastName: String = String()

  public var email: String = String()

  public var mobile: String = String()

  public var gender: String = String()

  public var address: [Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Address] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Address {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var priority: Int32 = 0

  public var nickName: String = String()

  public var mobile: String = String()

  public var phone: String = String()

  ///استان
  public var province: String = String()

  ///شهرستان
  public var city: String = String()

  ///ناحیه (محله ویژه تهران)
  public var sector: String = String()

  ///آدرس پستی
  public var address: String = String()

  ///کد پستی
  public var postalCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.modules.poll.global.proto.holder"

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_HelloWorld: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HelloWorld"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "title"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.title)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_HelloWorld, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_HelloWorld) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollForm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PollForm"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "submitDate"),
    4: .same(proto: "link"),
    5: .same(proto: "startTime"),
    6: .same(proto: "expireTime"),
    7: .same(proto: "isActive"),
    8: .same(proto: "description"),
    9: .same(proto: "isDeleted"),
    10: .same(proto: "tags"),
    11: .same(proto: "user"),
    12: .same(proto: "questions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.submitDate)
      case 4: try decoder.decodeSingularStringField(value: &self.link)
      case 5: try decoder.decodeSingularStringField(value: &self.startTime)
      case 6: try decoder.decodeSingularStringField(value: &self.expireTime)
      case 7: try decoder.decodeSingularBoolField(value: &self.isActive)
      case 8: try decoder.decodeSingularStringField(value: &self.description_p)
      case 9: try decoder.decodeSingularBoolField(value: &self.isDeleted)
      case 10: try decoder.decodeRepeatedStringField(value: &self.tags)
      case 11: try decoder.decodeSingularMessageField(value: &self._user)
      case 12: try decoder.decodeRepeatedMessageField(value: &self.questions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.submitDate.isEmpty {
      try visitor.visitSingularStringField(value: self.submitDate, fieldNumber: 3)
    }
    if !self.link.isEmpty {
      try visitor.visitSingularStringField(value: self.link, fieldNumber: 4)
    }
    if !self.startTime.isEmpty {
      try visitor.visitSingularStringField(value: self.startTime, fieldNumber: 5)
    }
    if !self.expireTime.isEmpty {
      try visitor.visitSingularStringField(value: self.expireTime, fieldNumber: 6)
    }
    if self.isActive != false {
      try visitor.visitSingularBoolField(value: self.isActive, fieldNumber: 7)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 8)
    }
    if self.isDeleted != false {
      try visitor.visitSingularBoolField(value: self.isDeleted, fieldNumber: 9)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 10)
    }
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if !self.questions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.questions, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollForm, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollForm) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.submitDate != rhs.submitDate {return false}
    if lhs.link != rhs.link {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.expireTime != rhs.expireTime {return false}
    if lhs.isActive != rhs.isActive {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.isDeleted != rhs.isDeleted {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs._user != rhs._user {return false}
    if lhs.questions != rhs.questions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_QuestionGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuestionGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "totalScore"),
    5: .same(proto: "totalRank"),
    6: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.totalScore)
      case 5: try decoder.decodeSingularInt32Field(value: &self.totalRank)
      case 6: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.totalScore != 0 {
      try visitor.visitSingularInt32Field(value: self.totalScore, fieldNumber: 4)
    }
    if self.totalRank != 0 {
      try visitor.visitSingularInt32Field(value: self.totalRank, fieldNumber: 5)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_QuestionGet, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_QuestionGet) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.totalScore != rhs.totalScore {return false}
    if lhs.totalRank != rhs.totalRank {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Question: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Question"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "questionNumber"),
    3: .same(proto: "question"),
    4: .same(proto: "questionType"),
    5: .same(proto: "rankOrderQuestion"),
    6: .same(proto: "textMessageQuestion"),
    7: .same(proto: "multipleChoiceQuestion"),
    8: .same(proto: "checkBoxQuestion"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt32Field(value: &self.questionNumber)
      case 3: try decoder.decodeSingularStringField(value: &self.question)
      case 4: try decoder.decodeSingularStringField(value: &self.questionType)
      case 5: try decoder.decodeSingularMessageField(value: &self._rankOrderQuestion)
      case 6: try decoder.decodeSingularMessageField(value: &self._textMessageQuestion)
      case 7: try decoder.decodeSingularMessageField(value: &self._multipleChoiceQuestion)
      case 8: try decoder.decodeSingularMessageField(value: &self._checkBoxQuestion)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.questionNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.questionNumber, fieldNumber: 2)
    }
    if !self.question.isEmpty {
      try visitor.visitSingularStringField(value: self.question, fieldNumber: 3)
    }
    if !self.questionType.isEmpty {
      try visitor.visitSingularStringField(value: self.questionType, fieldNumber: 4)
    }
    if let v = self._rankOrderQuestion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._textMessageQuestion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._multipleChoiceQuestion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._checkBoxQuestion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Question, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Question) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.questionNumber != rhs.questionNumber {return false}
    if lhs.question != rhs.question {return false}
    if lhs.questionType != rhs.questionType {return false}
    if lhs._rankOrderQuestion != rhs._rankOrderQuestion {return false}
    if lhs._textMessageQuestion != rhs._textMessageQuestion {return false}
    if lhs._multipleChoiceQuestion != rhs._multipleChoiceQuestion {return false}
    if lhs._checkBoxQuestion != rhs._checkBoxQuestion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_QuestionList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuestionList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_QuestionList, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_QuestionList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_RankOrderQuestion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RankOrderQuestion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "answers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularInt32Field(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.answers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if self.msg != 0 {
      try visitor.visitSingularInt32Field(value: self.msg, fieldNumber: 3)
    }
    if !self.answers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.answers, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_RankOrderQuestion, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_RankOrderQuestion) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.answers != rhs.answers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_TextMessageQuestion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TextMessageQuestion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "answer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularInt32Field(value: &self.msg)
      case 4: try decoder.decodeSingularMessageField(value: &self._answer)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if self.msg != 0 {
      try visitor.visitSingularInt32Field(value: self.msg, fieldNumber: 3)
    }
    if let v = self._answer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_TextMessageQuestion, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_TextMessageQuestion) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs._answer != rhs._answer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_MultipleChoiceQuestion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultipleChoiceQuestion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "answers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularInt32Field(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.answers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if self.msg != 0 {
      try visitor.visitSingularInt32Field(value: self.msg, fieldNumber: 3)
    }
    if !self.answers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.answers, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_MultipleChoiceQuestion, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_MultipleChoiceQuestion) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.answers != rhs.answers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_CheckBoxQuestion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckBoxQuestion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "answers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularInt32Field(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.answers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if self.msg != 0 {
      try visitor.visitSingularInt32Field(value: self.msg, fieldNumber: 3)
    }
    if !self.answers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.answers, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_CheckBoxQuestion, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_CheckBoxQuestion) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.answers != rhs.answers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Answer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Answer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "answerId"),
    2: .same(proto: "answerNumber"),
    3: .same(proto: "answerText"),
    4: .same(proto: "votes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.answerID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.answerNumber)
      case 3: try decoder.decodeSingularStringField(value: &self.answerText)
      case 4: try decoder.decodeSingularInt32Field(value: &self.votes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.answerID != 0 {
      try visitor.visitSingularInt32Field(value: self.answerID, fieldNumber: 1)
    }
    if self.answerNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.answerNumber, fieldNumber: 2)
    }
    if !self.answerText.isEmpty {
      try visitor.visitSingularStringField(value: self.answerText, fieldNumber: 3)
    }
    if self.votes != 0 {
      try visitor.visitSingularInt32Field(value: self.votes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Answer, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Answer) -> Bool {
    if lhs.answerID != rhs.answerID {return false}
    if lhs.answerNumber != rhs.answerNumber {return false}
    if lhs.answerText != rhs.answerText {return false}
    if lhs.votes != rhs.votes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollsList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PollsList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "message"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "polls"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.status)
      case 2: try decoder.decodeSingularStringField(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.message)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.polls)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 1)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if !self.polls.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.polls, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollsList, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollsList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.polls != rhs.polls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollInList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PollInList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "startTime"),
    4: .same(proto: "expireTime"),
    5: .same(proto: "isActive"),
    6: .same(proto: "isDeleted"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.startTime)
      case 4: try decoder.decodeSingularStringField(value: &self.expireTime)
      case 5: try decoder.decodeSingularBoolField(value: &self.isActive)
      case 6: try decoder.decodeSingularBoolField(value: &self.isDeleted)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.startTime.isEmpty {
      try visitor.visitSingularStringField(value: self.startTime, fieldNumber: 3)
    }
    if !self.expireTime.isEmpty {
      try visitor.visitSingularStringField(value: self.expireTime, fieldNumber: 4)
    }
    if self.isActive != false {
      try visitor.visitSingularBoolField(value: self.isActive, fieldNumber: 5)
    }
    if self.isDeleted != false {
      try visitor.visitSingularBoolField(value: self.isDeleted, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollInList, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollInList) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.expireTime != rhs.expireTime {return false}
    if lhs.isActive != rhs.isActive {return false}
    if lhs.isDeleted != rhs.isDeleted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PollGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "tags"),
    4: .same(proto: "startTime"),
    5: .same(proto: "expireTime"),
    6: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeRepeatedStringField(value: &self.tags)
      case 4: try decoder.decodeSingularStringField(value: &self.startTime)
      case 5: try decoder.decodeSingularStringField(value: &self.expireTime)
      case 6: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 3)
    }
    if !self.startTime.isEmpty {
      try visitor.visitSingularStringField(value: self.startTime, fieldNumber: 4)
    }
    if !self.expireTime.isEmpty {
      try visitor.visitSingularStringField(value: self.expireTime, fieldNumber: 5)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollGet, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_PollGet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.expireTime != rhs.expireTime {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Subscriber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Subscriber"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscriberId"),
    2: .same(proto: "nickName"),
    3: .same(proto: "userName"),
    4: .same(proto: "email"),
    5: .same(proto: "mobile"),
    6: .same(proto: "imageUrl"),
    7: .same(proto: "firstName"),
    8: .same(proto: "lastName"),
    9: .same(proto: "subscriberType"),
    10: .same(proto: "gender"),
    11: .same(proto: "birthDate"),
    16: .same(proto: "address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.subscriberID)
      case 2: try decoder.decodeSingularStringField(value: &self.nickName)
      case 3: try decoder.decodeSingularStringField(value: &self.userName)
      case 4: try decoder.decodeSingularStringField(value: &self.email)
      case 5: try decoder.decodeSingularStringField(value: &self.mobile)
      case 6: try decoder.decodeSingularStringField(value: &self.imageURL)
      case 7: try decoder.decodeSingularStringField(value: &self.firstName)
      case 8: try decoder.decodeSingularStringField(value: &self.lastName)
      case 9: try decoder.decodeSingularStringField(value: &self.subscriberType)
      case 10: try decoder.decodeSingularStringField(value: &self.gender)
      case 11: try decoder.decodeSingularStringField(value: &self.birthDate)
      case 16: try decoder.decodeRepeatedMessageField(value: &self.address)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subscriberID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberID, fieldNumber: 1)
    }
    if !self.nickName.isEmpty {
      try visitor.visitSingularStringField(value: self.nickName, fieldNumber: 2)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 3)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 4)
    }
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 5)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 6)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 7)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 8)
    }
    if !self.subscriberType.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberType, fieldNumber: 9)
    }
    if !self.gender.isEmpty {
      try visitor.visitSingularStringField(value: self.gender, fieldNumber: 10)
    }
    if !self.birthDate.isEmpty {
      try visitor.visitSingularStringField(value: self.birthDate, fieldNumber: 11)
    }
    if !self.address.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.address, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Subscriber, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Subscriber) -> Bool {
    if lhs.subscriberID != rhs.subscriberID {return false}
    if lhs.nickName != rhs.nickName {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.email != rhs.email {return false}
    if lhs.mobile != rhs.mobile {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.subscriberType != rhs.subscriberType {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.birthDate != rhs.birthDate {return false}
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".User"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "firstName"),
    3: .same(proto: "lastName"),
    4: .same(proto: "email"),
    5: .same(proto: "mobile"),
    6: .same(proto: "gender"),
    7: .same(proto: "address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userID)
      case 2: try decoder.decodeSingularStringField(value: &self.firstName)
      case 3: try decoder.decodeSingularStringField(value: &self.lastName)
      case 4: try decoder.decodeSingularStringField(value: &self.email)
      case 5: try decoder.decodeSingularStringField(value: &self.mobile)
      case 6: try decoder.decodeSingularStringField(value: &self.gender)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.address)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 2)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 3)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 4)
    }
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 5)
    }
    if !self.gender.isEmpty {
      try visitor.visitSingularStringField(value: self.gender, fieldNumber: 6)
    }
    if !self.address.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.address, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_User, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_User) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.email != rhs.email {return false}
    if lhs.mobile != rhs.mobile {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Address"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "priority"),
    3: .same(proto: "nickName"),
    4: .same(proto: "mobile"),
    5: .same(proto: "phone"),
    6: .same(proto: "province"),
    7: .same(proto: "city"),
    8: .same(proto: "sector"),
    9: .same(proto: "address"),
    10: .same(proto: "postalCode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt32Field(value: &self.priority)
      case 3: try decoder.decodeSingularStringField(value: &self.nickName)
      case 4: try decoder.decodeSingularStringField(value: &self.mobile)
      case 5: try decoder.decodeSingularStringField(value: &self.phone)
      case 6: try decoder.decodeSingularStringField(value: &self.province)
      case 7: try decoder.decodeSingularStringField(value: &self.city)
      case 8: try decoder.decodeSingularStringField(value: &self.sector)
      case 9: try decoder.decodeSingularStringField(value: &self.address)
      case 10: try decoder.decodeSingularStringField(value: &self.postalCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 2)
    }
    if !self.nickName.isEmpty {
      try visitor.visitSingularStringField(value: self.nickName, fieldNumber: 3)
    }
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 4)
    }
    if !self.phone.isEmpty {
      try visitor.visitSingularStringField(value: self.phone, fieldNumber: 5)
    }
    if !self.province.isEmpty {
      try visitor.visitSingularStringField(value: self.province, fieldNumber: 6)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 7)
    }
    if !self.sector.isEmpty {
      try visitor.visitSingularStringField(value: self.sector, fieldNumber: 8)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 9)
    }
    if !self.postalCode.isEmpty {
      try visitor.visitSingularStringField(value: self.postalCode, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Address, rhs: Com_Vasl_Vaslapp_Modules_Poll_Global_Proto_Holder_Address) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.nickName != rhs.nickName {return false}
    if lhs.mobile != rhs.mobile {return false}
    if lhs.phone != rhs.phone {return false}
    if lhs.province != rhs.province {return false}
    if lhs.city != rhs.city {return false}
    if lhs.sector != rhs.sector {return false}
    if lhs.address != rhs.address {return false}
    if lhs.postalCode != rhs.postalCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
