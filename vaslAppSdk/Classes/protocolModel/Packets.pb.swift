// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Packets.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Pushro_Server_Proto_Bind {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// try to bind to server
  public var tag: Int32 = 0

  public var apiKey: String = String()

  public var packageName: String = String()

  public var userID: String = String()

  public var os: String = String()

  public var version: String = String()

  public var deviceID: String = String()

  public var sticky: Bool = false

  public var imei: String = String()

  public var appID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_BindResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// successfull bind
  public var tag: Int32 = 0

  public var clientID: Int64 = 0

  public var token: String = String()

  public var tokenRefreshed: Bool = false

  public var handshakeInterval: Int32 = 0

  public var sticky: Bool = false

  public var servers: [Com_Pushro_Server_Proto_Servers] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_Servers {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var host: String = String()

  public var port: Int32 = 0

  public var priority: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_BindReconnectResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// server is busy, reconnect to new server with host and port
  public var tag: Int32 = 0

  public var host: String = String()

  public var port: Int32 = 0

  public var priority: Int32 = 0

  public var reason: String = String()

  public var sticky: Bool = false

  public var servers: [Com_Pushro_Server_Proto_Servers] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_UserTaggedResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var userTag: String = String()

  public var userToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_BindFailedResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// failure bind
  public var tag: Int32 = 0

  public var reason: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_Handshake {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// keep alive
  public var tag: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_HandshakeResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// keep alive resp
  public var tag: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PushSubscribeToTopic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var topic: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PushUnSubscribeToTopic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var topic: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PushMessageData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var messageID: String = String()

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PushMessageDataResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var messageID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PushMessageBackData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var messageID: String = String()

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PeerMessageData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var messageID: String = String()

  public var fromTag: String = String()

  public var toTag: String = String()

  public var message: String = String()

  public var insertTime: Int64 = 0

  public var messageIndex: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PeerMessageStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var messageID: String = String()

  public var messageStatus: Int32 = 0

  public var insertTime: Int64 = 0

  public var info: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PeerMessageStatusResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var messageID: String = String()

  public var messageStatus: Int32 = 0

  public var messageFromTag: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_KeyExchange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var encoded: Data = SwiftProtobuf.Internal.emptyData

  public var algorithm: String = String()

  public var format: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_KeyExchangeResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var encoded: Data = SwiftProtobuf.Internal.emptyData

  public var algorithm: String = String()

  public var format: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_Data {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var encoded: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_StartSubscribeLastSeen {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var tags: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_FinishSubscribeLastSeen {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var tags: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_TagStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: String = String()

  public var lastseen: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_TagLastSeenResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var tagStatus: [Com_Pushro_Server_Proto_TagStatus] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_DeletePeerMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var messageID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_UpdatePeerMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var messageID: String = String()

  public var newMessage: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PeerStartTyping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var toTag: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PeerStopTyping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var toTag: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PeerStartTypingResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var fromTag: String = String()

  public var insertTime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_PeerStopTypingResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var fromTag: String = String()

  public var insertTime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_GetMessageHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var toTag: String = String()

  public var fromMessageIndex: Int64 = 0

  public var messageCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_GetMessageHistoryResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var peerMessageData: [Com_Pushro_Server_Proto_PeerMessageData] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_GetTagsHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_GetTagsHistoryResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tag: Int32 = 0

  public var tagList: [Com_Pushro_Server_Proto_TagsHistoryWithLastMessageData] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Pushro_Server_Proto_TagsHistoryWithLastMessageData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tagdata: String = String()

  public var lastPeerMessageData: Com_Pushro_Server_Proto_PeerMessageData {
    get {return _lastPeerMessageData ?? Com_Pushro_Server_Proto_PeerMessageData()}
    set {_lastPeerMessageData = newValue}
  }
  /// Returns true if `lastPeerMessageData` has been explicitly set.
  public var hasLastPeerMessageData: Bool {return self._lastPeerMessageData != nil}
  /// Clears the value of `lastPeerMessageData`. Subsequent reads from it will return its default value.
  public mutating func clearLastPeerMessageData() {self._lastPeerMessageData = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastPeerMessageData: Com_Pushro_Server_Proto_PeerMessageData? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.pushro.server.proto"

extension Com_Pushro_Server_Proto_Bind: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Bind"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "apiKey"),
    3: .same(proto: "packageName"),
    4: .same(proto: "userId"),
    5: .same(proto: "os"),
    6: .same(proto: "version"),
    7: .same(proto: "deviceId"),
    8: .same(proto: "sticky"),
    9: .same(proto: "imei"),
    10: .same(proto: "appId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.apiKey)
      case 3: try decoder.decodeSingularStringField(value: &self.packageName)
      case 4: try decoder.decodeSingularStringField(value: &self.userID)
      case 5: try decoder.decodeSingularStringField(value: &self.os)
      case 6: try decoder.decodeSingularStringField(value: &self.version)
      case 7: try decoder.decodeSingularStringField(value: &self.deviceID)
      case 8: try decoder.decodeSingularBoolField(value: &self.sticky)
      case 9: try decoder.decodeSingularStringField(value: &self.imei)
      case 10: try decoder.decodeSingularStringField(value: &self.appID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.apiKey.isEmpty {
      try visitor.visitSingularStringField(value: self.apiKey, fieldNumber: 2)
    }
    if !self.packageName.isEmpty {
      try visitor.visitSingularStringField(value: self.packageName, fieldNumber: 3)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 4)
    }
    if !self.os.isEmpty {
      try visitor.visitSingularStringField(value: self.os, fieldNumber: 5)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 6)
    }
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 7)
    }
    if self.sticky != false {
      try visitor.visitSingularBoolField(value: self.sticky, fieldNumber: 8)
    }
    if !self.imei.isEmpty {
      try visitor.visitSingularStringField(value: self.imei, fieldNumber: 9)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_Bind, rhs: Com_Pushro_Server_Proto_Bind) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.apiKey != rhs.apiKey {return false}
    if lhs.packageName != rhs.packageName {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.os != rhs.os {return false}
    if lhs.version != rhs.version {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.sticky != rhs.sticky {return false}
    if lhs.imei != rhs.imei {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_BindResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BindResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "clientId"),
    3: .same(proto: "token"),
    4: .same(proto: "tokenRefreshed"),
    5: .same(proto: "handshakeInterval"),
    6: .same(proto: "sticky"),
    7: .same(proto: "servers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularInt64Field(value: &self.clientID)
      case 3: try decoder.decodeSingularStringField(value: &self.token)
      case 4: try decoder.decodeSingularBoolField(value: &self.tokenRefreshed)
      case 5: try decoder.decodeSingularInt32Field(value: &self.handshakeInterval)
      case 6: try decoder.decodeSingularBoolField(value: &self.sticky)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.servers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if self.clientID != 0 {
      try visitor.visitSingularInt64Field(value: self.clientID, fieldNumber: 2)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 3)
    }
    if self.tokenRefreshed != false {
      try visitor.visitSingularBoolField(value: self.tokenRefreshed, fieldNumber: 4)
    }
    if self.handshakeInterval != 0 {
      try visitor.visitSingularInt32Field(value: self.handshakeInterval, fieldNumber: 5)
    }
    if self.sticky != false {
      try visitor.visitSingularBoolField(value: self.sticky, fieldNumber: 6)
    }
    if !self.servers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.servers, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_BindResp, rhs: Com_Pushro_Server_Proto_BindResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.token != rhs.token {return false}
    if lhs.tokenRefreshed != rhs.tokenRefreshed {return false}
    if lhs.handshakeInterval != rhs.handshakeInterval {return false}
    if lhs.sticky != rhs.sticky {return false}
    if lhs.servers != rhs.servers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_Servers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Servers"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "host"),
    3: .same(proto: "port"),
    4: .same(proto: "priority"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularInt32Field(value: &self.port)
      case 4: try decoder.decodeSingularInt32Field(value: &self.priority)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if self.port != 0 {
      try visitor.visitSingularInt32Field(value: self.port, fieldNumber: 3)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_Servers, rhs: Com_Pushro_Server_Proto_Servers) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.host != rhs.host {return false}
    if lhs.port != rhs.port {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_BindReconnectResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BindReconnectResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "host"),
    3: .same(proto: "port"),
    4: .same(proto: "priority"),
    5: .same(proto: "reason"),
    6: .same(proto: "sticky"),
    7: .same(proto: "servers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularInt32Field(value: &self.port)
      case 4: try decoder.decodeSingularInt32Field(value: &self.priority)
      case 5: try decoder.decodeSingularStringField(value: &self.reason)
      case 6: try decoder.decodeSingularBoolField(value: &self.sticky)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.servers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if self.port != 0 {
      try visitor.visitSingularInt32Field(value: self.port, fieldNumber: 3)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 4)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 5)
    }
    if self.sticky != false {
      try visitor.visitSingularBoolField(value: self.sticky, fieldNumber: 6)
    }
    if !self.servers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.servers, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_BindReconnectResp, rhs: Com_Pushro_Server_Proto_BindReconnectResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.host != rhs.host {return false}
    if lhs.port != rhs.port {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.sticky != rhs.sticky {return false}
    if lhs.servers != rhs.servers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_UserTaggedResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserTaggedResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "userTag"),
    3: .same(proto: "userToken"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.userTag)
      case 3: try decoder.decodeSingularStringField(value: &self.userToken)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.userTag.isEmpty {
      try visitor.visitSingularStringField(value: self.userTag, fieldNumber: 2)
    }
    if !self.userToken.isEmpty {
      try visitor.visitSingularStringField(value: self.userToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_UserTaggedResp, rhs: Com_Pushro_Server_Proto_UserTaggedResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.userTag != rhs.userTag {return false}
    if lhs.userToken != rhs.userToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_BindFailedResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BindFailedResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "reason"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.reason)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_BindFailedResp, rhs: Com_Pushro_Server_Proto_BindFailedResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_Handshake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Handshake"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_Handshake, rhs: Com_Pushro_Server_Proto_Handshake) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_HandshakeResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HandshakeResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_HandshakeResp, rhs: Com_Pushro_Server_Proto_HandshakeResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PushSubscribeToTopic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PushSubscribeToTopic"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "topic"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.topic)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.topic.isEmpty {
      try visitor.visitSingularStringField(value: self.topic, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PushSubscribeToTopic, rhs: Com_Pushro_Server_Proto_PushSubscribeToTopic) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.topic != rhs.topic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PushUnSubscribeToTopic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PushUnSubscribeToTopic"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "topic"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.topic)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.topic.isEmpty {
      try visitor.visitSingularStringField(value: self.topic, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PushUnSubscribeToTopic, rhs: Com_Pushro_Server_Proto_PushUnSubscribeToTopic) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.topic != rhs.topic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PushMessageData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PushMessageData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "messageId"),
    3: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.messageID)
      case 3: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PushMessageData, rhs: Com_Pushro_Server_Proto_PushMessageData) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PushMessageDataResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PushMessageDataResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "messageId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.messageID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PushMessageDataResp, rhs: Com_Pushro_Server_Proto_PushMessageDataResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PushMessageBackData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PushMessageBackData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "messageId"),
    3: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.messageID)
      case 3: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PushMessageBackData, rhs: Com_Pushro_Server_Proto_PushMessageBackData) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PeerMessageData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PeerMessageData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "messageId"),
    3: .same(proto: "fromTag"),
    4: .same(proto: "toTag"),
    5: .same(proto: "message"),
    6: .same(proto: "insertTime"),
    7: .same(proto: "messageIndex"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.messageID)
      case 3: try decoder.decodeSingularStringField(value: &self.fromTag)
      case 4: try decoder.decodeSingularStringField(value: &self.toTag)
      case 5: try decoder.decodeSingularStringField(value: &self.message)
      case 6: try decoder.decodeSingularInt64Field(value: &self.insertTime)
      case 7: try decoder.decodeSingularInt64Field(value: &self.messageIndex)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    if !self.fromTag.isEmpty {
      try visitor.visitSingularStringField(value: self.fromTag, fieldNumber: 3)
    }
    if !self.toTag.isEmpty {
      try visitor.visitSingularStringField(value: self.toTag, fieldNumber: 4)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 5)
    }
    if self.insertTime != 0 {
      try visitor.visitSingularInt64Field(value: self.insertTime, fieldNumber: 6)
    }
    if self.messageIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.messageIndex, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PeerMessageData, rhs: Com_Pushro_Server_Proto_PeerMessageData) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.fromTag != rhs.fromTag {return false}
    if lhs.toTag != rhs.toTag {return false}
    if lhs.message != rhs.message {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.messageIndex != rhs.messageIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PeerMessageStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PeerMessageStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "messageId"),
    3: .same(proto: "messageStatus"),
    4: .same(proto: "insertTime"),
    5: .same(proto: "info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.messageID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.messageStatus)
      case 4: try decoder.decodeSingularInt64Field(value: &self.insertTime)
      case 5: try decoder.decodeSingularStringField(value: &self.info)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    if self.messageStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.messageStatus, fieldNumber: 3)
    }
    if self.insertTime != 0 {
      try visitor.visitSingularInt64Field(value: self.insertTime, fieldNumber: 4)
    }
    if !self.info.isEmpty {
      try visitor.visitSingularStringField(value: self.info, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PeerMessageStatus, rhs: Com_Pushro_Server_Proto_PeerMessageStatus) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.messageStatus != rhs.messageStatus {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.info != rhs.info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PeerMessageStatusResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PeerMessageStatusResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "messageId"),
    3: .same(proto: "messageStatus"),
    4: .same(proto: "messageFromTag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.messageID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.messageStatus)
      case 4: try decoder.decodeSingularStringField(value: &self.messageFromTag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    if self.messageStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.messageStatus, fieldNumber: 3)
    }
    if !self.messageFromTag.isEmpty {
      try visitor.visitSingularStringField(value: self.messageFromTag, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PeerMessageStatusResp, rhs: Com_Pushro_Server_Proto_PeerMessageStatusResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.messageStatus != rhs.messageStatus {return false}
    if lhs.messageFromTag != rhs.messageFromTag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_KeyExchange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KeyExchange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "encoded"),
    3: .same(proto: "algorithm"),
    4: .same(proto: "format"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularBytesField(value: &self.encoded)
      case 3: try decoder.decodeSingularStringField(value: &self.algorithm)
      case 4: try decoder.decodeSingularStringField(value: &self.format)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 2)
    }
    if !self.algorithm.isEmpty {
      try visitor.visitSingularStringField(value: self.algorithm, fieldNumber: 3)
    }
    if !self.format.isEmpty {
      try visitor.visitSingularStringField(value: self.format, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_KeyExchange, rhs: Com_Pushro_Server_Proto_KeyExchange) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.encoded != rhs.encoded {return false}
    if lhs.algorithm != rhs.algorithm {return false}
    if lhs.format != rhs.format {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_KeyExchangeResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KeyExchangeResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "encoded"),
    3: .same(proto: "algorithm"),
    4: .same(proto: "format"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularBytesField(value: &self.encoded)
      case 3: try decoder.decodeSingularStringField(value: &self.algorithm)
      case 4: try decoder.decodeSingularStringField(value: &self.format)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 2)
    }
    if !self.algorithm.isEmpty {
      try visitor.visitSingularStringField(value: self.algorithm, fieldNumber: 3)
    }
    if !self.format.isEmpty {
      try visitor.visitSingularStringField(value: self.format, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_KeyExchangeResp, rhs: Com_Pushro_Server_Proto_KeyExchangeResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.encoded != rhs.encoded {return false}
    if lhs.algorithm != rhs.algorithm {return false}
    if lhs.format != rhs.format {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_Data: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Data"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "encoded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularBytesField(value: &self.encoded)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_Data, rhs: Com_Pushro_Server_Proto_Data) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.encoded != rhs.encoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_StartSubscribeLastSeen: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartSubscribeLastSeen"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "tags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeRepeatedStringField(value: &self.tags)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_StartSubscribeLastSeen, rhs: Com_Pushro_Server_Proto_StartSubscribeLastSeen) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_FinishSubscribeLastSeen: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FinishSubscribeLastSeen"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "tags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeRepeatedStringField(value: &self.tags)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_FinishSubscribeLastSeen, rhs: Com_Pushro_Server_Proto_FinishSubscribeLastSeen) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_TagStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TagStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "lastseen"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.lastseen)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 1)
    }
    if !self.lastseen.isEmpty {
      try visitor.visitSingularStringField(value: self.lastseen, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_TagStatus, rhs: Com_Pushro_Server_Proto_TagStatus) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.lastseen != rhs.lastseen {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_TagLastSeenResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TagLastSeenResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "tagStatus"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tagStatus)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.tagStatus.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tagStatus, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_TagLastSeenResp, rhs: Com_Pushro_Server_Proto_TagLastSeenResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.tagStatus != rhs.tagStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_DeletePeerMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeletePeerMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "messageId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.messageID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_DeletePeerMessage, rhs: Com_Pushro_Server_Proto_DeletePeerMessage) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_UpdatePeerMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdatePeerMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "messageId"),
    3: .same(proto: "newMessage"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.messageID)
      case 3: try decoder.decodeSingularStringField(value: &self.newMessage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    if !self.newMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.newMessage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_UpdatePeerMessage, rhs: Com_Pushro_Server_Proto_UpdatePeerMessage) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.newMessage != rhs.newMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PeerStartTyping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PeerStartTyping"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "toTag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.toTag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.toTag.isEmpty {
      try visitor.visitSingularStringField(value: self.toTag, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PeerStartTyping, rhs: Com_Pushro_Server_Proto_PeerStartTyping) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.toTag != rhs.toTag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PeerStopTyping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PeerStopTyping"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "toTag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.toTag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.toTag.isEmpty {
      try visitor.visitSingularStringField(value: self.toTag, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PeerStopTyping, rhs: Com_Pushro_Server_Proto_PeerStopTyping) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.toTag != rhs.toTag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PeerStartTypingResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PeerStartTypingResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "fromTag"),
    3: .same(proto: "insertTime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.fromTag)
      case 3: try decoder.decodeSingularInt64Field(value: &self.insertTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.fromTag.isEmpty {
      try visitor.visitSingularStringField(value: self.fromTag, fieldNumber: 2)
    }
    if self.insertTime != 0 {
      try visitor.visitSingularInt64Field(value: self.insertTime, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PeerStartTypingResp, rhs: Com_Pushro_Server_Proto_PeerStartTypingResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.fromTag != rhs.fromTag {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_PeerStopTypingResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PeerStopTypingResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "fromTag"),
    3: .same(proto: "insertTime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.fromTag)
      case 3: try decoder.decodeSingularInt64Field(value: &self.insertTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.fromTag.isEmpty {
      try visitor.visitSingularStringField(value: self.fromTag, fieldNumber: 2)
    }
    if self.insertTime != 0 {
      try visitor.visitSingularInt64Field(value: self.insertTime, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_PeerStopTypingResp, rhs: Com_Pushro_Server_Proto_PeerStopTypingResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.fromTag != rhs.fromTag {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_GetMessageHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetMessageHistory"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "toTag"),
    3: .same(proto: "fromMessageIndex"),
    4: .same(proto: "messageCount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeSingularStringField(value: &self.toTag)
      case 3: try decoder.decodeSingularInt64Field(value: &self.fromMessageIndex)
      case 4: try decoder.decodeSingularInt32Field(value: &self.messageCount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.toTag.isEmpty {
      try visitor.visitSingularStringField(value: self.toTag, fieldNumber: 2)
    }
    if self.fromMessageIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.fromMessageIndex, fieldNumber: 3)
    }
    if self.messageCount != 0 {
      try visitor.visitSingularInt32Field(value: self.messageCount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_GetMessageHistory, rhs: Com_Pushro_Server_Proto_GetMessageHistory) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.toTag != rhs.toTag {return false}
    if lhs.fromMessageIndex != rhs.fromMessageIndex {return false}
    if lhs.messageCount != rhs.messageCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_GetMessageHistoryResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetMessageHistoryResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "peerMessageData"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.peerMessageData)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.peerMessageData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.peerMessageData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_GetMessageHistoryResp, rhs: Com_Pushro_Server_Proto_GetMessageHistoryResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.peerMessageData != rhs.peerMessageData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_GetTagsHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTagsHistory"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_GetTagsHistory, rhs: Com_Pushro_Server_Proto_GetTagsHistory) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_GetTagsHistoryResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTagsHistoryResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "tagList"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tag)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tagList)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    if !self.tagList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tagList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_GetTagsHistoryResp, rhs: Com_Pushro_Server_Proto_GetTagsHistoryResp) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.tagList != rhs.tagList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Pushro_Server_Proto_TagsHistoryWithLastMessageData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TagsHistoryWithLastMessageData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tagdata"),
    2: .same(proto: "lastPeerMessageData"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.tagdata)
      case 2: try decoder.decodeSingularMessageField(value: &self._lastPeerMessageData)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tagdata.isEmpty {
      try visitor.visitSingularStringField(value: self.tagdata, fieldNumber: 1)
    }
    if let v = self._lastPeerMessageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Pushro_Server_Proto_TagsHistoryWithLastMessageData, rhs: Com_Pushro_Server_Proto_TagsHistoryWithLastMessageData) -> Bool {
    if lhs.tagdata != rhs.tagdata {return false}
    if lhs._lastPeerMessageData != rhs._lastPeerMessageData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
