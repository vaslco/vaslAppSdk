// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Global.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_NoProtocolBufferReturn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_UnHandledReturn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_service_return {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_DefaultReturn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///////////////////////////////////////
public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: String = String()

  public var sessionID: String = String()

  public var regdate: Int64 = 0

  public var validUntil: Int64 = 0

  public var appid: String = String()

  public var rand: String = String()

  /// appid , AppIdPaths
  public var appIDPaths: Dictionary<String,Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppIdPaths> = [:]

  public var sessionType: String = String()

  /// only for subscribers
  public var mobile: String = String()

  /// only for subscribers
  public var nationalCode: String = String()

  /// only for subscribers
  public var mobiles: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModelGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  /// path , PathData
  public var sessionData: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModel {
    get {return _storage._sessionData ?? Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModel()}
    set {_uniqueStorage()._sessionData = newValue}
  }
  /// Returns true if `sessionData` has been explicitly set.
  public var hasSessionData: Bool {return _storage._sessionData != nil}
  /// Clears the value of `sessionData`. Subsequent reads from it will return its default value.
  public mutating func clearSessionData() {_uniqueStorage()._sessionData = nil}

  /// path , PathData
  public var appInfo: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppInfo {
    get {return _storage._appInfo ?? Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppInfo()}
    set {_uniqueStorage()._appInfo = newValue}
  }
  /// Returns true if `appInfo` has been explicitly set.
  public var hasAppInfo: Bool {return _storage._appInfo != nil}
  /// Clears the value of `appInfo`. Subsequent reads from it will return its default value.
  public mutating func clearAppInfo() {_uniqueStorage()._appInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppIdPaths {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  /// path , PathData
  public var pathData: Dictionary<String,Com_Vasl_Vaslapp_Common_Global_Proto_Holder_PathData> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppLogin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var loginInfo: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_LoginInfo {
    get {return _storage._loginInfo ?? Com_Vasl_Vaslapp_Common_Global_Proto_Holder_LoginInfo()}
    set {_uniqueStorage()._loginInfo = newValue}
  }
  /// Returns true if `loginInfo` has been explicitly set.
  public var hasLoginInfo: Bool {return _storage._loginInfo != nil}
  /// Clears the value of `loginInfo`. Subsequent reads from it will return its default value.
  public mutating func clearLoginInfo() {_uniqueStorage()._loginInfo = nil}

  public var appInfo: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppInfo {
    get {return _storage._appInfo ?? Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppInfo()}
    set {_uniqueStorage()._appInfo = newValue}
  }
  /// Returns true if `appInfo` has been explicitly set.
  public var hasAppInfo: Bool {return _storage._appInfo != nil}
  /// Clears the value of `appInfo`. Subsequent reads from it will return its default value.
  public mutating func clearAppInfo() {_uniqueStorage()._appInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_PathData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var moduleID: String = String()

  public var isDynamic: Bool = false

  public var pathID: String = String()

  public var title: String = String()

  public var moduleTitle: String = String()

  public var context: String = String()

  public var version: String = String()

  public var status: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var appID: String = String()

  public var appName: String = String()

  public var insertTime: String = String()

  public var packageName: String = String()

  public var appStatus: String = String()

  public var appStatusText: String = String()

  public var appPath: String = String()

  public var dbPath: String = String()

  public var rolePaths: [Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePathModules] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_LoginInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: String = String()

  public var sessionID: String = String()

  public var shouldChangePassword: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePath {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pathID: String = String()

  public var pathName: String = String()

  public var path: String = String()

  public var selected: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePathList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePathModules] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePathModules {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var moduleID: String = String()

  public var moduleName: String = String()

  public var data: [Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePath] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.common.global.proto.holder"

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_NoProtocolBufferReturn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NoProtocolBufferReturn"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_NoProtocolBufferReturn, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_NoProtocolBufferReturn) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_UnHandledReturn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnHandledReturn"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_UnHandledReturn, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_UnHandledReturn) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_service_return: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".service_return"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_service_return, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_service_return) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_DefaultReturn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DefaultReturn"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_DefaultReturn, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_DefaultReturn) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SessionModel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "sessionId"),
    3: .same(proto: "regdate"),
    4: .same(proto: "validUntil"),
    5: .same(proto: "appid"),
    6: .same(proto: "rand"),
    7: .same(proto: "appIdPaths"),
    8: .same(proto: "sessionType"),
    9: .same(proto: "mobile"),
    10: .same(proto: "nationalCode"),
    11: .same(proto: "mobiles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userID)
      case 2: try decoder.decodeSingularStringField(value: &self.sessionID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.regdate)
      case 4: try decoder.decodeSingularInt64Field(value: &self.validUntil)
      case 5: try decoder.decodeSingularStringField(value: &self.appid)
      case 6: try decoder.decodeSingularStringField(value: &self.rand)
      case 7: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppIdPaths>.self, value: &self.appIDPaths)
      case 8: try decoder.decodeSingularStringField(value: &self.sessionType)
      case 9: try decoder.decodeSingularStringField(value: &self.mobile)
      case 10: try decoder.decodeSingularStringField(value: &self.nationalCode)
      case 11: try decoder.decodeRepeatedStringField(value: &self.mobiles)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 2)
    }
    if self.regdate != 0 {
      try visitor.visitSingularInt64Field(value: self.regdate, fieldNumber: 3)
    }
    if self.validUntil != 0 {
      try visitor.visitSingularInt64Field(value: self.validUntil, fieldNumber: 4)
    }
    if !self.appid.isEmpty {
      try visitor.visitSingularStringField(value: self.appid, fieldNumber: 5)
    }
    if !self.rand.isEmpty {
      try visitor.visitSingularStringField(value: self.rand, fieldNumber: 6)
    }
    if !self.appIDPaths.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppIdPaths>.self, value: self.appIDPaths, fieldNumber: 7)
    }
    if !self.sessionType.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionType, fieldNumber: 8)
    }
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 9)
    }
    if !self.nationalCode.isEmpty {
      try visitor.visitSingularStringField(value: self.nationalCode, fieldNumber: 10)
    }
    if !self.mobiles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.mobiles, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModel, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModel) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.regdate != rhs.regdate {return false}
    if lhs.validUntil != rhs.validUntil {return false}
    if lhs.appid != rhs.appid {return false}
    if lhs.rand != rhs.rand {return false}
    if lhs.appIDPaths != rhs.appIDPaths {return false}
    if lhs.sessionType != rhs.sessionType {return false}
    if lhs.mobile != rhs.mobile {return false}
    if lhs.nationalCode != rhs.nationalCode {return false}
    if lhs.mobiles != rhs.mobiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModelGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SessionModelGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "sessionData"),
    5: .same(proto: "appInfo"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _sessionData: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModel? = nil
    var _appInfo: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _sessionData = source._sessionData
      _appInfo = source._appInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._sessionData)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._appInfo)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._sessionData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._appInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModelGet, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_SessionModelGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._sessionData != rhs_storage._sessionData {return false}
        if _storage._appInfo != rhs_storage._appInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppIdPaths: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppIdPaths"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "pathData"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Com_Vasl_Vaslapp_Common_Global_Proto_Holder_PathData>.self, value: &self.pathData)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.pathData.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Com_Vasl_Vaslapp_Common_Global_Proto_Holder_PathData>.self, value: self.pathData, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppIdPaths, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppIdPaths) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.pathData != rhs.pathData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppLogin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppLogin"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "loginInfo"),
    7: .same(proto: "appInfo"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _loginInfo: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_LoginInfo? = nil
    var _appInfo: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _loginInfo = source._loginInfo
      _appInfo = source._appInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._loginInfo)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._appInfo)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._loginInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._appInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppLogin, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppLogin) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._loginInfo != rhs_storage._loginInfo {return false}
        if _storage._appInfo != rhs_storage._appInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_PathData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PathData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "moduleId"),
    2: .same(proto: "isDynamic"),
    3: .same(proto: "pathId"),
    4: .same(proto: "title"),
    5: .same(proto: "moduleTitle"),
    6: .same(proto: "context"),
    7: .same(proto: "version"),
    8: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.moduleID)
      case 2: try decoder.decodeSingularBoolField(value: &self.isDynamic)
      case 3: try decoder.decodeSingularStringField(value: &self.pathID)
      case 4: try decoder.decodeSingularStringField(value: &self.title)
      case 5: try decoder.decodeSingularStringField(value: &self.moduleTitle)
      case 6: try decoder.decodeSingularStringField(value: &self.context)
      case 7: try decoder.decodeSingularStringField(value: &self.version)
      case 8: try decoder.decodeSingularStringField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.moduleID.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleID, fieldNumber: 1)
    }
    if self.isDynamic != false {
      try visitor.visitSingularBoolField(value: self.isDynamic, fieldNumber: 2)
    }
    if !self.pathID.isEmpty {
      try visitor.visitSingularStringField(value: self.pathID, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.moduleTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleTitle, fieldNumber: 5)
    }
    if !self.context.isEmpty {
      try visitor.visitSingularStringField(value: self.context, fieldNumber: 6)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 7)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_PathData, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_PathData) -> Bool {
    if lhs.moduleID != rhs.moduleID {return false}
    if lhs.isDynamic != rhs.isDynamic {return false}
    if lhs.pathID != rhs.pathID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.moduleTitle != rhs.moduleTitle {return false}
    if lhs.context != rhs.context {return false}
    if lhs.version != rhs.version {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appId"),
    2: .same(proto: "appName"),
    3: .same(proto: "insertTime"),
    4: .same(proto: "packageName"),
    5: .same(proto: "appStatus"),
    6: .same(proto: "appStatusText"),
    7: .same(proto: "appPath"),
    8: .same(proto: "dbPath"),
    9: .same(proto: "rolePaths"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.appID)
      case 2: try decoder.decodeSingularStringField(value: &self.appName)
      case 3: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 4: try decoder.decodeSingularStringField(value: &self.packageName)
      case 5: try decoder.decodeSingularStringField(value: &self.appStatus)
      case 6: try decoder.decodeSingularStringField(value: &self.appStatusText)
      case 7: try decoder.decodeSingularStringField(value: &self.appPath)
      case 8: try decoder.decodeSingularStringField(value: &self.dbPath)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.rolePaths)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    if !self.appName.isEmpty {
      try visitor.visitSingularStringField(value: self.appName, fieldNumber: 2)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 3)
    }
    if !self.packageName.isEmpty {
      try visitor.visitSingularStringField(value: self.packageName, fieldNumber: 4)
    }
    if !self.appStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.appStatus, fieldNumber: 5)
    }
    if !self.appStatusText.isEmpty {
      try visitor.visitSingularStringField(value: self.appStatusText, fieldNumber: 6)
    }
    if !self.appPath.isEmpty {
      try visitor.visitSingularStringField(value: self.appPath, fieldNumber: 7)
    }
    if !self.dbPath.isEmpty {
      try visitor.visitSingularStringField(value: self.dbPath, fieldNumber: 8)
    }
    if !self.rolePaths.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rolePaths, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppInfo, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_AppInfo) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.appName != rhs.appName {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.packageName != rhs.packageName {return false}
    if lhs.appStatus != rhs.appStatus {return false}
    if lhs.appStatusText != rhs.appStatusText {return false}
    if lhs.appPath != rhs.appPath {return false}
    if lhs.dbPath != rhs.dbPath {return false}
    if lhs.rolePaths != rhs.rolePaths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_LoginInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoginInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscriberId"),
    2: .same(proto: "sessionId"),
    3: .same(proto: "shouldChangePassword"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.subscriberID)
      case 2: try decoder.decodeSingularStringField(value: &self.sessionID)
      case 3: try decoder.decodeSingularBoolField(value: &self.shouldChangePassword)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subscriberID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberID, fieldNumber: 1)
    }
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 2)
    }
    if self.shouldChangePassword != false {
      try visitor.visitSingularBoolField(value: self.shouldChangePassword, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_LoginInfo, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_LoginInfo) -> Bool {
    if lhs.subscriberID != rhs.subscriberID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.shouldChangePassword != rhs.shouldChangePassword {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePath: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RolePath"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pathId"),
    2: .same(proto: "pathName"),
    3: .same(proto: "path"),
    4: .same(proto: "selected"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.pathID)
      case 2: try decoder.decodeSingularStringField(value: &self.pathName)
      case 3: try decoder.decodeSingularStringField(value: &self.path)
      case 4: try decoder.decodeSingularBoolField(value: &self.selected)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pathID.isEmpty {
      try visitor.visitSingularStringField(value: self.pathID, fieldNumber: 1)
    }
    if !self.pathName.isEmpty {
      try visitor.visitSingularStringField(value: self.pathName, fieldNumber: 2)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 3)
    }
    if self.selected != false {
      try visitor.visitSingularBoolField(value: self.selected, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePath, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePath) -> Bool {
    if lhs.pathID != rhs.pathID {return false}
    if lhs.pathName != rhs.pathName {return false}
    if lhs.path != rhs.path {return false}
    if lhs.selected != rhs.selected {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePathList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RolePathList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePathList, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePathList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePathModules: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RolePathModules"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "moduleId"),
    2: .same(proto: "moduleName"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.moduleID)
      case 2: try decoder.decodeSingularStringField(value: &self.moduleName)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.moduleID.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleID, fieldNumber: 1)
    }
    if !self.moduleName.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleName, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePathModules, rhs: Com_Vasl_Vaslapp_Common_Global_Proto_Holder_RolePathModules) -> Bool {
    if lhs.moduleID != rhs.moduleID {return false}
    if lhs.moduleName != rhs.moduleName {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
