// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CommentGlobal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_Comment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_Comment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var commentID: String {
    get {return _storage._commentID}
    set {_uniqueStorage()._commentID = newValue}
  }

  public var commentTime: String {
    get {return _storage._commentTime}
    set {_uniqueStorage()._commentTime = newValue}
  }

  public var prettyTime: String {
    get {return _storage._prettyTime}
    set {_uniqueStorage()._prettyTime = newValue}
  }

  public var subscriberInfo: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_SubscriberInfo {
    get {return _storage._subscriberInfo ?? Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._subscriberInfo = newValue}
  }
  /// Returns true if `subscriberInfo` has been explicitly set.
  public var hasSubscriberInfo: Bool {return _storage._subscriberInfo != nil}
  /// Clears the value of `subscriberInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberInfo() {_uniqueStorage()._subscriberInfo = nil}

  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var canRemove: Bool {
    get {return _storage._canRemove}
    set {_uniqueStorage()._canRemove = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_SubscriberInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: String {
    get {return _storage._subscriberID}
    set {_uniqueStorage()._subscriberID = newValue}
  }

  public var nickName: String {
    get {return _storage._nickName}
    set {_uniqueStorage()._nickName = newValue}
  }

  public var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  public var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  public var mobile: String {
    get {return _storage._mobile}
    set {_uniqueStorage()._mobile = newValue}
  }

  public var imageURL: String {
    get {return _storage._imageURL}
    set {_uniqueStorage()._imageURL = newValue}
  }

  public var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  public var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  public var subscriberType: String {
    get {return _storage._subscriberType}
    set {_uniqueStorage()._subscriberType = newValue}
  }

  public var gender: String {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  public var birthDate: String {
    get {return _storage._birthDate}
    set {_uniqueStorage()._birthDate = newValue}
  }

  public var followers: Int64 {
    get {return _storage._followers}
    set {_uniqueStorage()._followers = newValue}
  }

  public var isPrivate: Bool {
    get {return _storage._isPrivate}
    set {_uniqueStorage()._isPrivate = newValue}
  }

  public var isFollower: Bool {
    get {return _storage._isFollower}
    set {_uniqueStorage()._isFollower = newValue}
  }

  public var followings: Int64 {
    get {return _storage._followings}
    set {_uniqueStorage()._followings = newValue}
  }

  public var playlists: Int32 {
    get {return _storage._playlists}
    set {_uniqueStorage()._playlists = newValue}
  }

  public var defaultTrackQuality: Int32 {
    get {return _storage._defaultTrackQuality}
    set {_uniqueStorage()._defaultTrackQuality = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.modules.comment.proto.holder"

extension Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentAdd, rhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentUpdate, rhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentRemove, rhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentList, rhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_CommentList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_Comment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Comment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commentId"),
    2: .same(proto: "commentTime"),
    3: .same(proto: "prettyTime"),
    4: .same(proto: "subscriberInfo"),
    5: .same(proto: "content"),
    6: .same(proto: "canRemove"),
  ]

  fileprivate class _StorageClass {
    var _commentID: String = String()
    var _commentTime: String = String()
    var _prettyTime: String = String()
    var _subscriberInfo: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_SubscriberInfo? = nil
    var _content: String = String()
    var _canRemove: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _commentID = source._commentID
      _commentTime = source._commentTime
      _prettyTime = source._prettyTime
      _subscriberInfo = source._subscriberInfo
      _content = source._content
      _canRemove = source._canRemove
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._commentID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._commentTime)
        case 3: try decoder.decodeSingularStringField(value: &_storage._prettyTime)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._subscriberInfo)
        case 5: try decoder.decodeSingularStringField(value: &_storage._content)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._canRemove)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._commentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._commentID, fieldNumber: 1)
      }
      if !_storage._commentTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._commentTime, fieldNumber: 2)
      }
      if !_storage._prettyTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._prettyTime, fieldNumber: 3)
      }
      if let v = _storage._subscriberInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 5)
      }
      if _storage._canRemove != false {
        try visitor.visitSingularBoolField(value: _storage._canRemove, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_Comment, rhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_Comment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._commentID != rhs_storage._commentID {return false}
        if _storage._commentTime != rhs_storage._commentTime {return false}
        if _storage._prettyTime != rhs_storage._prettyTime {return false}
        if _storage._subscriberInfo != rhs_storage._subscriberInfo {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._canRemove != rhs_storage._canRemove {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_SubscriberInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscriberId"),
    2: .same(proto: "nickName"),
    3: .same(proto: "username"),
    4: .same(proto: "email"),
    5: .same(proto: "mobile"),
    6: .same(proto: "imageUrl"),
    7: .same(proto: "firstName"),
    8: .same(proto: "lastName"),
    9: .same(proto: "subscriberType"),
    10: .same(proto: "gender"),
    11: .same(proto: "birthDate"),
    13: .same(proto: "followers"),
    14: .same(proto: "isPrivate"),
    15: .same(proto: "isFollower"),
    17: .same(proto: "followings"),
    18: .same(proto: "playlists"),
    19: .same(proto: "defaultTrackQuality"),
  ]

  fileprivate class _StorageClass {
    var _subscriberID: String = String()
    var _nickName: String = String()
    var _username: String = String()
    var _email: String = String()
    var _mobile: String = String()
    var _imageURL: String = String()
    var _firstName: String = String()
    var _lastName: String = String()
    var _subscriberType: String = String()
    var _gender: String = String()
    var _birthDate: String = String()
    var _followers: Int64 = 0
    var _isPrivate: Bool = false
    var _isFollower: Bool = false
    var _followings: Int64 = 0
    var _playlists: Int32 = 0
    var _defaultTrackQuality: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriberID = source._subscriberID
      _nickName = source._nickName
      _username = source._username
      _email = source._email
      _mobile = source._mobile
      _imageURL = source._imageURL
      _firstName = source._firstName
      _lastName = source._lastName
      _subscriberType = source._subscriberType
      _gender = source._gender
      _birthDate = source._birthDate
      _followers = source._followers
      _isPrivate = source._isPrivate
      _isFollower = source._isFollower
      _followings = source._followings
      _playlists = source._playlists
      _defaultTrackQuality = source._defaultTrackQuality
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._subscriberID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._nickName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._username)
        case 4: try decoder.decodeSingularStringField(value: &_storage._email)
        case 5: try decoder.decodeSingularStringField(value: &_storage._mobile)
        case 6: try decoder.decodeSingularStringField(value: &_storage._imageURL)
        case 7: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 8: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 9: try decoder.decodeSingularStringField(value: &_storage._subscriberType)
        case 10: try decoder.decodeSingularStringField(value: &_storage._gender)
        case 11: try decoder.decodeSingularStringField(value: &_storage._birthDate)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._followers)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._isPrivate)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._isFollower)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._followings)
        case 18: try decoder.decodeSingularInt32Field(value: &_storage._playlists)
        case 19: try decoder.decodeSingularInt32Field(value: &_storage._defaultTrackQuality)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._subscriberID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberID, fieldNumber: 1)
      }
      if !_storage._nickName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickName, fieldNumber: 2)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 3)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 4)
      }
      if !_storage._mobile.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mobile, fieldNumber: 5)
      }
      if !_storage._imageURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageURL, fieldNumber: 6)
      }
      if !_storage._firstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstName, fieldNumber: 7)
      }
      if !_storage._lastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastName, fieldNumber: 8)
      }
      if !_storage._subscriberType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberType, fieldNumber: 9)
      }
      if !_storage._gender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gender, fieldNumber: 10)
      }
      if !_storage._birthDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._birthDate, fieldNumber: 11)
      }
      if _storage._followers != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followers, fieldNumber: 13)
      }
      if _storage._isPrivate != false {
        try visitor.visitSingularBoolField(value: _storage._isPrivate, fieldNumber: 14)
      }
      if _storage._isFollower != false {
        try visitor.visitSingularBoolField(value: _storage._isFollower, fieldNumber: 15)
      }
      if _storage._followings != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followings, fieldNumber: 17)
      }
      if _storage._playlists != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playlists, fieldNumber: 18)
      }
      if _storage._defaultTrackQuality != 0 {
        try visitor.visitSingularInt32Field(value: _storage._defaultTrackQuality, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_SubscriberInfo, rhs: Com_Vasl_Vaslapp_Modules_Comment_Proto_Holder_SubscriberInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._nickName != rhs_storage._nickName {return false}
        if _storage._username != rhs_storage._username {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._mobile != rhs_storage._mobile {return false}
        if _storage._imageURL != rhs_storage._imageURL {return false}
        if _storage._firstName != rhs_storage._firstName {return false}
        if _storage._lastName != rhs_storage._lastName {return false}
        if _storage._subscriberType != rhs_storage._subscriberType {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._birthDate != rhs_storage._birthDate {return false}
        if _storage._followers != rhs_storage._followers {return false}
        if _storage._isPrivate != rhs_storage._isPrivate {return false}
        if _storage._isFollower != rhs_storage._isFollower {return false}
        if _storage._followings != rhs_storage._followings {return false}
        if _storage._playlists != rhs_storage._playlists {return false}
        if _storage._defaultTrackQuality != rhs_storage._defaultTrackQuality {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
