// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: GateWay.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Callback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var orderID: String = String()

  public var linkredirectIos: String = String()

  public var linkredirectAll: String = String()

  public var linkredirectLink: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_ChargeBuy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var amount: Int32 = 0

  public var gatewayURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Pay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var transactionID: String = String()

  ///string token = 4;
  ///string paymentCode = 5;
  public var bankURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Bank {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// string id = 1;
  public var status: Int32 = 0

  public var code: Int32 = 0

  ///string name = 5;
  ///string description = 6;
  ///string url = 7;
  ///string mobilePostfix = 8;
  ///string merchant = 9;
  ///string secondurl = 10;
  ///string terminalid = 11;
  ///string username = 12;
  ///string password = 13;
  ///string callbackpostfix = 14;
  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///taghiresh nade //status o mssg hm ezafe nakon lodfan
public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bankCode: Int32 = 0

  public var bankName: String = String()

  public var bankPerName: String = String()

  public var images: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Images {
    get {return _images ?? Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Images()}
    set {_images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  public var hasImages: Bool {return self._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  public mutating func clearImages() {self._images = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _images: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Images? = nil
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var count: Int32 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankGet] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankGetPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bankCode: Int32 {
    get {return _storage._bankCode}
    set {_uniqueStorage()._bankCode = newValue}
  }

  public var transactionID: String {
    get {return _storage._transactionID}
    set {_uniqueStorage()._transactionID = newValue}
  }

  public var bankName: String {
    get {return _storage._bankName}
    set {_uniqueStorage()._bankName = newValue}
  }

  public var payURL: String {
    get {return _storage._payURL}
    set {_uniqueStorage()._payURL = newValue}
  }

  public var gatewayURL: String {
    get {return _storage._gatewayURL}
    set {_uniqueStorage()._gatewayURL = newValue}
  }

  public var testURL: String {
    get {return _storage._testURL}
    set {_uniqueStorage()._testURL = newValue}
  }

  public var verifyURL: String {
    get {return _storage._verifyURL}
    set {_uniqueStorage()._verifyURL = newValue}
  }

  public var isactive: String {
    get {return _storage._isactive}
    set {_uniqueStorage()._isactive = newValue}
  }

  public var rollBackURL: String {
    get {return _storage._rollBackURL}
    set {_uniqueStorage()._rollBackURL = newValue}
  }

  public var merchant: String {
    get {return _storage._merchant}
    set {_uniqueStorage()._merchant = newValue}
  }

  public var gatewayURLPostfix: String {
    get {return _storage._gatewayURLPostfix}
    set {_uniqueStorage()._gatewayURLPostfix = newValue}
  }

  public var terminalID: String {
    get {return _storage._terminalID}
    set {_uniqueStorage()._terminalID = newValue}
  }

  public var userName: String {
    get {return _storage._userName}
    set {_uniqueStorage()._userName = newValue}
  }

  public var privateKey: String {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  public var userPassword: String {
    get {return _storage._userPassword}
    set {_uniqueStorage()._userPassword = newValue}
  }

  public var baseURL: String {
    get {return _storage._baseURL}
    set {_uniqueStorage()._baseURL = newValue}
  }

  public var images: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Images {
    get {return _storage._images ?? Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Images()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  public var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  public mutating func clearImages() {_uniqueStorage()._images = nil}

  public var bankPerName: String {
    get {return _storage._bankPerName}
    set {_uniqueStorage()._bankPerName = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankListPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var count: Int32 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankGetPanel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Images {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var size: Int64 = 0

  public var width: Int32 = 0

  public var height: Int32 = 0

  public var type: String = String()

  public var path: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Operator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_ConfirmTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var refIDHolder: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_RollBack {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankRedirect {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var msg: String = String()

  public var bankCode: String = String()

  public var gateway: String = String()

  public var merchantID: String = String()

  public var token: String = String()

  public var invoiceNumber: String = String()

  public var redirectAddres: String = String()

  public var action: String = String()

  public var terminalID: String = String()

  public var amount: String = String()

  public var invoiceDate: String = String()

  public var timestamp: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_SubscriberInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: String = String()

  public var profileNickName: String = String()

  public var userName: String = String()

  public var confirmedMobile: String = String()

  public var status: String = String()

  public var debit: Int64 = 0

  public var credit: Int64 = 0

  public var balance: Int64 = 0

  public var firstName: String = String()

  public var lastName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var amount: String = String()

  public var bankName: String = String()

  public var token: String = String()

  public var paymentTime: String = String()

  public var transactionStatus: String = String()

  public var rollBackTime: String = String()

  public var payOrderID: String = String()

  public var orderID: String = String()

  public var callBackTime: String = String()

  public var refIDHolder: String = String()

  public var statusHolder: String = String()

  public var error: String = String()

  ///string bankCode = 14;
  ///string transactionStatus_history = 14;
  ///string rrn = 15;
  ///string statusHolder_history = 16;
  ///string error_history = 17;
  public var subscriberInfo: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_SubscriberInfo {
    get {return _subscriberInfo ?? Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_SubscriberInfo()}
    set {_subscriberInfo = newValue}
  }
  /// Returns true if `subscriberInfo` has been explicitly set.
  public var hasSubscriberInfo: Bool {return self._subscriberInfo != nil}
  /// Clears the value of `subscriberInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberInfo() {self._subscriberInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _subscriberInfo: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_SubscriberInfo? = nil
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalitems: Int64 = 0

  public var totalpages: Int64 = 0

  public var sumAmount: Int64 = 0

  public var trnsaction: [Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Transaction] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_CheckTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var perStatus: String = String()

  public var engStatus: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionStatusList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionStatus] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.modules.bankgateway.global.proto.holder"

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Callback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Callback"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "orderId"),
    5: .same(proto: "linkredirectIos"),
    6: .same(proto: "linkredirectAll"),
    7: .same(proto: "linkredirectLink"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.orderID)
      case 5: try decoder.decodeSingularStringField(value: &self.linkredirectIos)
      case 6: try decoder.decodeSingularStringField(value: &self.linkredirectAll)
      case 7: try decoder.decodeSingularStringField(value: &self.linkredirectLink)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 4)
    }
    if !self.linkredirectIos.isEmpty {
      try visitor.visitSingularStringField(value: self.linkredirectIos, fieldNumber: 5)
    }
    if !self.linkredirectAll.isEmpty {
      try visitor.visitSingularStringField(value: self.linkredirectAll, fieldNumber: 6)
    }
    if !self.linkredirectLink.isEmpty {
      try visitor.visitSingularStringField(value: self.linkredirectLink, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Callback, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Callback) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.linkredirectIos != rhs.linkredirectIos {return false}
    if lhs.linkredirectAll != rhs.linkredirectAll {return false}
    if lhs.linkredirectLink != rhs.linkredirectLink {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_ChargeBuy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChargeBuy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "amount"),
    5: .same(proto: "gatewayUrl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.amount)
      case 5: try decoder.decodeSingularStringField(value: &self.gatewayURL)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt32Field(value: self.amount, fieldNumber: 4)
    }
    if !self.gatewayURL.isEmpty {
      try visitor.visitSingularStringField(value: self.gatewayURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_ChargeBuy, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_ChargeBuy) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.gatewayURL != rhs.gatewayURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Pay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Pay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "transactionId"),
    6: .same(proto: "bankUrl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.transactionID)
      case 6: try decoder.decodeSingularStringField(value: &self.bankURL)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.transactionID.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionID, fieldNumber: 4)
    }
    if !self.bankURL.isEmpty {
      try visitor.visitSingularStringField(value: self.bankURL, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Pay, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Pay) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.transactionID != rhs.transactionID {return false}
    if lhs.bankURL != rhs.bankURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Bank: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Bank"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "status"),
    3: .same(proto: "code"),
    4: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularInt32Field(value: &self.status)
      case 3: try decoder.decodeSingularInt32Field(value: &self.code)
      case 4: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 3)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Bank, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Bank) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BankGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bankCode"),
    2: .same(proto: "bankName"),
    3: .same(proto: "bankPerName"),
    4: .same(proto: "images"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.bankCode)
      case 2: try decoder.decodeSingularStringField(value: &self.bankName)
      case 3: try decoder.decodeSingularStringField(value: &self.bankPerName)
      case 4: try decoder.decodeSingularMessageField(value: &self._images)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bankCode != 0 {
      try visitor.visitSingularInt32Field(value: self.bankCode, fieldNumber: 1)
    }
    if !self.bankName.isEmpty {
      try visitor.visitSingularStringField(value: self.bankName, fieldNumber: 2)
    }
    if !self.bankPerName.isEmpty {
      try visitor.visitSingularStringField(value: self.bankPerName, fieldNumber: 3)
    }
    if let v = self._images {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankGet, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankGet) -> Bool {
    if lhs.bankCode != rhs.bankCode {return false}
    if lhs.bankName != rhs.bankName {return false}
    if lhs.bankPerName != rhs.bankPerName {return false}
    if lhs._images != rhs._images {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BankList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "count"),
    5: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.count)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankList, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.count != rhs.count {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankGetPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BankGetPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bankCode"),
    2: .same(proto: "transactionId"),
    3: .same(proto: "bankName"),
    4: .same(proto: "payUrl"),
    5: .same(proto: "gatewayUrl"),
    6: .same(proto: "testUrl"),
    7: .same(proto: "verifyUrl"),
    8: .same(proto: "isactive"),
    9: .same(proto: "rollBackUrl"),
    10: .same(proto: "merchant"),
    11: .same(proto: "gatewayUrlPostfix"),
    12: .same(proto: "terminalId"),
    13: .same(proto: "userName"),
    14: .same(proto: "privateKey"),
    15: .same(proto: "userPassword"),
    16: .same(proto: "baseUrl"),
    17: .same(proto: "images"),
    18: .same(proto: "bankPerName"),
  ]

  fileprivate class _StorageClass {
    var _bankCode: Int32 = 0
    var _transactionID: String = String()
    var _bankName: String = String()
    var _payURL: String = String()
    var _gatewayURL: String = String()
    var _testURL: String = String()
    var _verifyURL: String = String()
    var _isactive: String = String()
    var _rollBackURL: String = String()
    var _merchant: String = String()
    var _gatewayURLPostfix: String = String()
    var _terminalID: String = String()
    var _userName: String = String()
    var _privateKey: String = String()
    var _userPassword: String = String()
    var _baseURL: String = String()
    var _images: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Images? = nil
    var _bankPerName: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bankCode = source._bankCode
      _transactionID = source._transactionID
      _bankName = source._bankName
      _payURL = source._payURL
      _gatewayURL = source._gatewayURL
      _testURL = source._testURL
      _verifyURL = source._verifyURL
      _isactive = source._isactive
      _rollBackURL = source._rollBackURL
      _merchant = source._merchant
      _gatewayURLPostfix = source._gatewayURLPostfix
      _terminalID = source._terminalID
      _userName = source._userName
      _privateKey = source._privateKey
      _userPassword = source._userPassword
      _baseURL = source._baseURL
      _images = source._images
      _bankPerName = source._bankPerName
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._bankCode)
        case 2: try decoder.decodeSingularStringField(value: &_storage._transactionID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._bankName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._payURL)
        case 5: try decoder.decodeSingularStringField(value: &_storage._gatewayURL)
        case 6: try decoder.decodeSingularStringField(value: &_storage._testURL)
        case 7: try decoder.decodeSingularStringField(value: &_storage._verifyURL)
        case 8: try decoder.decodeSingularStringField(value: &_storage._isactive)
        case 9: try decoder.decodeSingularStringField(value: &_storage._rollBackURL)
        case 10: try decoder.decodeSingularStringField(value: &_storage._merchant)
        case 11: try decoder.decodeSingularStringField(value: &_storage._gatewayURLPostfix)
        case 12: try decoder.decodeSingularStringField(value: &_storage._terminalID)
        case 13: try decoder.decodeSingularStringField(value: &_storage._userName)
        case 14: try decoder.decodeSingularStringField(value: &_storage._privateKey)
        case 15: try decoder.decodeSingularStringField(value: &_storage._userPassword)
        case 16: try decoder.decodeSingularStringField(value: &_storage._baseURL)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._images)
        case 18: try decoder.decodeSingularStringField(value: &_storage._bankPerName)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._bankCode != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bankCode, fieldNumber: 1)
      }
      if !_storage._transactionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transactionID, fieldNumber: 2)
      }
      if !_storage._bankName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankName, fieldNumber: 3)
      }
      if !_storage._payURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._payURL, fieldNumber: 4)
      }
      if !_storage._gatewayURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gatewayURL, fieldNumber: 5)
      }
      if !_storage._testURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._testURL, fieldNumber: 6)
      }
      if !_storage._verifyURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._verifyURL, fieldNumber: 7)
      }
      if !_storage._isactive.isEmpty {
        try visitor.visitSingularStringField(value: _storage._isactive, fieldNumber: 8)
      }
      if !_storage._rollBackURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rollBackURL, fieldNumber: 9)
      }
      if !_storage._merchant.isEmpty {
        try visitor.visitSingularStringField(value: _storage._merchant, fieldNumber: 10)
      }
      if !_storage._gatewayURLPostfix.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gatewayURLPostfix, fieldNumber: 11)
      }
      if !_storage._terminalID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._terminalID, fieldNumber: 12)
      }
      if !_storage._userName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userName, fieldNumber: 13)
      }
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._privateKey, fieldNumber: 14)
      }
      if !_storage._userPassword.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userPassword, fieldNumber: 15)
      }
      if !_storage._baseURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._baseURL, fieldNumber: 16)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if !_storage._bankPerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankPerName, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankGetPanel, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankGetPanel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bankCode != rhs_storage._bankCode {return false}
        if _storage._transactionID != rhs_storage._transactionID {return false}
        if _storage._bankName != rhs_storage._bankName {return false}
        if _storage._payURL != rhs_storage._payURL {return false}
        if _storage._gatewayURL != rhs_storage._gatewayURL {return false}
        if _storage._testURL != rhs_storage._testURL {return false}
        if _storage._verifyURL != rhs_storage._verifyURL {return false}
        if _storage._isactive != rhs_storage._isactive {return false}
        if _storage._rollBackURL != rhs_storage._rollBackURL {return false}
        if _storage._merchant != rhs_storage._merchant {return false}
        if _storage._gatewayURLPostfix != rhs_storage._gatewayURLPostfix {return false}
        if _storage._terminalID != rhs_storage._terminalID {return false}
        if _storage._userName != rhs_storage._userName {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._userPassword != rhs_storage._userPassword {return false}
        if _storage._baseURL != rhs_storage._baseURL {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._bankPerName != rhs_storage._bankPerName {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankListPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BankListPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "count"),
    5: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.count)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankListPanel, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankListPanel) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.count != rhs.count {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Images: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Images"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "size"),
    3: .same(proto: "width"),
    4: .same(proto: "height"),
    5: .same(proto: "type"),
    6: .same(proto: "path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularInt64Field(value: &self.size)
      case 3: try decoder.decodeSingularInt32Field(value: &self.width)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.type)
      case 6: try decoder.decodeSingularStringField(value: &self.path)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 5)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Images, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Images) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.size != rhs.size {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.type != rhs.type {return false}
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Operator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Operator"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "status"),
    3: .same(proto: "code"),
    4: .same(proto: "msg"),
    5: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularInt32Field(value: &self.status)
      case 3: try decoder.decodeSingularInt32Field(value: &self.code)
      case 4: try decoder.decodeSingularStringField(value: &self.msg)
      case 5: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 3)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Operator, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Operator) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_ConfirmTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfirmTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "refIdHolder"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.refIDHolder)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.refIDHolder.isEmpty {
      try visitor.visitSingularStringField(value: self.refIDHolder, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_ConfirmTransaction, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_ConfirmTransaction) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.refIDHolder != rhs.refIDHolder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_RollBack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RollBack"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_RollBack, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_RollBack) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankRedirect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BankRedirect"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "msg"),
    3: .same(proto: "bankCode"),
    4: .same(proto: "gateway"),
    5: .same(proto: "merchantId"),
    6: .same(proto: "token"),
    7: .same(proto: "invoiceNumber"),
    8: .same(proto: "redirectAddres"),
    9: .same(proto: "action"),
    10: .same(proto: "terminalId"),
    11: .same(proto: "amount"),
    12: .same(proto: "invoiceDate"),
    13: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.msg)
      case 3: try decoder.decodeSingularStringField(value: &self.bankCode)
      case 4: try decoder.decodeSingularStringField(value: &self.gateway)
      case 5: try decoder.decodeSingularStringField(value: &self.merchantID)
      case 6: try decoder.decodeSingularStringField(value: &self.token)
      case 7: try decoder.decodeSingularStringField(value: &self.invoiceNumber)
      case 8: try decoder.decodeSingularStringField(value: &self.redirectAddres)
      case 9: try decoder.decodeSingularStringField(value: &self.action)
      case 10: try decoder.decodeSingularStringField(value: &self.terminalID)
      case 11: try decoder.decodeSingularStringField(value: &self.amount)
      case 12: try decoder.decodeSingularStringField(value: &self.invoiceDate)
      case 13: try decoder.decodeSingularStringField(value: &self.timestamp)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 2)
    }
    if !self.bankCode.isEmpty {
      try visitor.visitSingularStringField(value: self.bankCode, fieldNumber: 3)
    }
    if !self.gateway.isEmpty {
      try visitor.visitSingularStringField(value: self.gateway, fieldNumber: 4)
    }
    if !self.merchantID.isEmpty {
      try visitor.visitSingularStringField(value: self.merchantID, fieldNumber: 5)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 6)
    }
    if !self.invoiceNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.invoiceNumber, fieldNumber: 7)
    }
    if !self.redirectAddres.isEmpty {
      try visitor.visitSingularStringField(value: self.redirectAddres, fieldNumber: 8)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 9)
    }
    if !self.terminalID.isEmpty {
      try visitor.visitSingularStringField(value: self.terminalID, fieldNumber: 10)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 11)
    }
    if !self.invoiceDate.isEmpty {
      try visitor.visitSingularStringField(value: self.invoiceDate, fieldNumber: 12)
    }
    if !self.timestamp.isEmpty {
      try visitor.visitSingularStringField(value: self.timestamp, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankRedirect, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_BankRedirect) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.bankCode != rhs.bankCode {return false}
    if lhs.gateway != rhs.gateway {return false}
    if lhs.merchantID != rhs.merchantID {return false}
    if lhs.token != rhs.token {return false}
    if lhs.invoiceNumber != rhs.invoiceNumber {return false}
    if lhs.redirectAddres != rhs.redirectAddres {return false}
    if lhs.action != rhs.action {return false}
    if lhs.terminalID != rhs.terminalID {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.invoiceDate != rhs.invoiceDate {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_SubscriberInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscriberId"),
    2: .same(proto: "profileNickName"),
    3: .same(proto: "userName"),
    4: .same(proto: "confirmedMobile"),
    5: .same(proto: "status"),
    6: .same(proto: "debit"),
    7: .same(proto: "credit"),
    8: .same(proto: "balance"),
    9: .same(proto: "firstName"),
    10: .same(proto: "lastName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.subscriberID)
      case 2: try decoder.decodeSingularStringField(value: &self.profileNickName)
      case 3: try decoder.decodeSingularStringField(value: &self.userName)
      case 4: try decoder.decodeSingularStringField(value: &self.confirmedMobile)
      case 5: try decoder.decodeSingularStringField(value: &self.status)
      case 6: try decoder.decodeSingularInt64Field(value: &self.debit)
      case 7: try decoder.decodeSingularInt64Field(value: &self.credit)
      case 8: try decoder.decodeSingularInt64Field(value: &self.balance)
      case 9: try decoder.decodeSingularStringField(value: &self.firstName)
      case 10: try decoder.decodeSingularStringField(value: &self.lastName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subscriberID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberID, fieldNumber: 1)
    }
    if !self.profileNickName.isEmpty {
      try visitor.visitSingularStringField(value: self.profileNickName, fieldNumber: 2)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 3)
    }
    if !self.confirmedMobile.isEmpty {
      try visitor.visitSingularStringField(value: self.confirmedMobile, fieldNumber: 4)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 5)
    }
    if self.debit != 0 {
      try visitor.visitSingularInt64Field(value: self.debit, fieldNumber: 6)
    }
    if self.credit != 0 {
      try visitor.visitSingularInt64Field(value: self.credit, fieldNumber: 7)
    }
    if self.balance != 0 {
      try visitor.visitSingularInt64Field(value: self.balance, fieldNumber: 8)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 9)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_SubscriberInfo, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_SubscriberInfo) -> Bool {
    if lhs.subscriberID != rhs.subscriberID {return false}
    if lhs.profileNickName != rhs.profileNickName {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.confirmedMobile != rhs.confirmedMobile {return false}
    if lhs.status != rhs.status {return false}
    if lhs.debit != rhs.debit {return false}
    if lhs.credit != rhs.credit {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "amount"),
    3: .same(proto: "bankName"),
    4: .same(proto: "token"),
    5: .same(proto: "paymentTime"),
    6: .same(proto: "transactionStatus"),
    7: .same(proto: "rollBackTime"),
    8: .same(proto: "payOrderId"),
    9: .same(proto: "orderId"),
    10: .same(proto: "callBackTime"),
    11: .same(proto: "refIdHolder"),
    12: .same(proto: "statusHolder"),
    13: .same(proto: "error"),
    14: .same(proto: "subscriberInfo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.amount)
      case 3: try decoder.decodeSingularStringField(value: &self.bankName)
      case 4: try decoder.decodeSingularStringField(value: &self.token)
      case 5: try decoder.decodeSingularStringField(value: &self.paymentTime)
      case 6: try decoder.decodeSingularStringField(value: &self.transactionStatus)
      case 7: try decoder.decodeSingularStringField(value: &self.rollBackTime)
      case 8: try decoder.decodeSingularStringField(value: &self.payOrderID)
      case 9: try decoder.decodeSingularStringField(value: &self.orderID)
      case 10: try decoder.decodeSingularStringField(value: &self.callBackTime)
      case 11: try decoder.decodeSingularStringField(value: &self.refIDHolder)
      case 12: try decoder.decodeSingularStringField(value: &self.statusHolder)
      case 13: try decoder.decodeSingularStringField(value: &self.error)
      case 14: try decoder.decodeSingularMessageField(value: &self._subscriberInfo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    if !self.bankName.isEmpty {
      try visitor.visitSingularStringField(value: self.bankName, fieldNumber: 3)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 4)
    }
    if !self.paymentTime.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentTime, fieldNumber: 5)
    }
    if !self.transactionStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionStatus, fieldNumber: 6)
    }
    if !self.rollBackTime.isEmpty {
      try visitor.visitSingularStringField(value: self.rollBackTime, fieldNumber: 7)
    }
    if !self.payOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.payOrderID, fieldNumber: 8)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 9)
    }
    if !self.callBackTime.isEmpty {
      try visitor.visitSingularStringField(value: self.callBackTime, fieldNumber: 10)
    }
    if !self.refIDHolder.isEmpty {
      try visitor.visitSingularStringField(value: self.refIDHolder, fieldNumber: 11)
    }
    if !self.statusHolder.isEmpty {
      try visitor.visitSingularStringField(value: self.statusHolder, fieldNumber: 12)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 13)
    }
    if let v = self._subscriberInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Transaction, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_Transaction) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.bankName != rhs.bankName {return false}
    if lhs.token != rhs.token {return false}
    if lhs.paymentTime != rhs.paymentTime {return false}
    if lhs.transactionStatus != rhs.transactionStatus {return false}
    if lhs.rollBackTime != rhs.rollBackTime {return false}
    if lhs.payOrderID != rhs.payOrderID {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.callBackTime != rhs.callBackTime {return false}
    if lhs.refIDHolder != rhs.refIDHolder {return false}
    if lhs.statusHolder != rhs.statusHolder {return false}
    if lhs.error != rhs.error {return false}
    if lhs._subscriberInfo != rhs._subscriberInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalitems"),
    6: .same(proto: "totalpages"),
    7: .same(proto: "sumAmount"),
    8: .same(proto: "trnsaction"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 7: try decoder.decodeSingularInt64Field(value: &self.sumAmount)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.trnsaction)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 5)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 6)
    }
    if self.sumAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.sumAmount, fieldNumber: 7)
    }
    if !self.trnsaction.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trnsaction, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionList, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.sumAmount != rhs.sumAmount {return false}
    if lhs.trnsaction != rhs.trnsaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_CheckTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_CheckTransaction, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_CheckTransaction) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "perStatus"),
    2: .same(proto: "engStatus"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.perStatus)
      case 2: try decoder.decodeSingularStringField(value: &self.engStatus)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.perStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.perStatus, fieldNumber: 1)
    }
    if !self.engStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.engStatus, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionStatus, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionStatus) -> Bool {
    if lhs.perStatus != rhs.perStatus {return false}
    if lhs.engStatus != rhs.engStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionStatusList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionStatusList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionStatusList, rhs: Com_Vasl_Vaslapp_Modules_Bankgateway_Global_Proto_Holder_TransactionStatusList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
