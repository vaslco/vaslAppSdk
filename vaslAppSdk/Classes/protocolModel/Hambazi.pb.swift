// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Hambazi.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///region video
public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoLikeAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoLikeRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Comment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoSearchList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///region subscriber
public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberFollow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberUnfollow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressDefault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberContactsUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberSearchList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///region actor
public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_ActorVideoList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var link: String {
    get {return _storage._link}
    set {_uniqueStorage()._link = newValue}
  }

  public var artists: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo] {
    get {return _storage._artists}
    set {_uniqueStorage()._artists = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var plays: Int64 {
    get {return _storage._plays}
    set {_uniqueStorage()._plays = newValue}
  }

  public var likes: Int64 {
    get {return _storage._likes}
    set {_uniqueStorage()._likes = newValue}
  }

  public var comments: Int64 {
    get {return _storage._comments}
    set {_uniqueStorage()._comments = newValue}
  }

  public var commentsTop: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Comment] {
    get {return _storage._commentsTop}
    set {_uniqueStorage()._commentsTop = newValue}
  }

  public var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var createdBy: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo {
    get {return _storage._createdBy ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._createdBy = newValue}
  }
  /// Returns true if `createdBy` has been explicitly set.
  public var hasCreatedBy: Bool {return _storage._createdBy != nil}
  /// Clears the value of `createdBy`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedBy() {_uniqueStorage()._createdBy = nil}

  public var casts: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo] {
    get {return _storage._casts}
    set {_uniqueStorage()._casts = newValue}
  }

  public var categories: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Category] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  public var genre: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Genre] {
    get {return _storage._genre}
    set {_uniqueStorage()._genre = newValue}
  }

  public var onlineShopPrice: Int64 {
    get {return _storage._onlineShopPrice}
    set {_uniqueStorage()._onlineShopPrice = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var isLiked: Bool {
    get {return _storage._isLiked}
    set {_uniqueStorage()._isLiked = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Comment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var commentID: String {
    get {return _storage._commentID}
    set {_uniqueStorage()._commentID = newValue}
  }

  public var commentTime: String {
    get {return _storage._commentTime}
    set {_uniqueStorage()._commentTime = newValue}
  }

  public var prettyTime: String {
    get {return _storage._prettyTime}
    set {_uniqueStorage()._prettyTime = newValue}
  }

  public var subscriberInfo: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo {
    get {return _storage._subscriberInfo ?? Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._subscriberInfo = newValue}
  }
  /// Returns true if `subscriberInfo` has been explicitly set.
  public var hasSubscriberInfo: Bool {return _storage._subscriberInfo != nil}
  /// Clears the value of `subscriberInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberInfo() {_uniqueStorage()._subscriberInfo = nil}

  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var canRemove: Bool {
    get {return _storage._canRemove}
    set {_uniqueStorage()._canRemove = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: String {
    get {return _storage._subscriberID}
    set {_uniqueStorage()._subscriberID = newValue}
  }

  public var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  public var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  public var mobile: String {
    get {return _storage._mobile}
    set {_uniqueStorage()._mobile = newValue}
  }

  public var imageURL: String {
    get {return _storage._imageURL}
    set {_uniqueStorage()._imageURL = newValue}
  }

  public var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  public var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  public var subscriberType: String {
    get {return _storage._subscriberType}
    set {_uniqueStorage()._subscriberType = newValue}
  }

  public var gender: String {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  public var birthDate: String {
    get {return _storage._birthDate}
    set {_uniqueStorage()._birthDate = newValue}
  }

  public var photos: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Photo] {
    get {return _storage._photos}
    set {_uniqueStorage()._photos = newValue}
  }

  public var followers: Int64 {
    get {return _storage._followers}
    set {_uniqueStorage()._followers = newValue}
  }

  public var isFollower: Bool {
    get {return _storage._isFollower}
    set {_uniqueStorage()._isFollower = newValue}
  }

  public var address: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Address] {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  public var followings: Int64 {
    get {return _storage._followings}
    set {_uniqueStorage()._followings = newValue}
  }

  public var playlists: Int32 {
    get {return _storage._playlists}
    set {_uniqueStorage()._playlists = newValue}
  }

  public var defaultTrackQuality: Int32 {
    get {return _storage._defaultTrackQuality}
    set {_uniqueStorage()._defaultTrackQuality = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Photo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: String = String()

  public var quality: String = String()

  public var url: String = String()

  public var size: Int64 = 0

  public var width: Int32 = 0

  public var height: Int32 = 0

  public var mimeType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Address {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  ///استان
  public var province: String = String()

  ///شهرستان
  public var city: String = String()

  ///ناحیه (محله ویژه تهران)
  public var sector: String = String()

  public var recipientName: String = String()

  public var recipientPhone: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Category {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var key: String = String()

  public var title: String = String()

  public var type: String = String()

  public var createdAt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Genre {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var key: String = String()

  public var title: String = String()

  public var createdAt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.products.hambazi.proto.holder"

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoList, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCreate, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoUpdate, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoDelete, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoGet, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoLikeAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoLikeAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoLikeAdd, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoLikeAdd) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoLikeRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoLikeRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoLikeRemove, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoLikeRemove) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoCommentAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentAdd, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoCommentUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentUpdate, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoCommentRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentRemove, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoCommentList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentList, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoCommentList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoSearchList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoSearchList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoSearchList, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_VideoSearchList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberCreate, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberList, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberGet, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberUpdate, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberDelete, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberFollow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberFollow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberFollow, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberFollow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberUnfollow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberUnfollow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberUnfollow, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberUnfollow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberAddressAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressAdd, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberAddressUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressUpdate, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberAddressRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressRemove, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressDefault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberAddressDefault"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressDefault, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberAddressDefault) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberContactsUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberContactsUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberContactsUpdate, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberContactsUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberSearchList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberSearchList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberSearchList, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberSearchList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_ActorVideoList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActorVideoList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_ActorVideoList, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_ActorVideoList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Video"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "type"),
    4: .same(proto: "link"),
    11: .same(proto: "artists"),
    12: .same(proto: "name"),
    13: .same(proto: "plays"),
    14: .same(proto: "likes"),
    17: .same(proto: "comments"),
    18: .same(proto: "commentsTop"),
    19: .same(proto: "createdAt"),
    20: .same(proto: "createdBy"),
    23: .same(proto: "casts"),
    28: .same(proto: "categories"),
    29: .same(proto: "genre"),
    31: .same(proto: "onlineShopPrice"),
    35: .same(proto: "status"),
    39: .same(proto: "isLiked"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _title: String = String()
    var _type: String = String()
    var _link: String = String()
    var _artists: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo] = []
    var _name: String = String()
    var _plays: Int64 = 0
    var _likes: Int64 = 0
    var _comments: Int64 = 0
    var _commentsTop: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Comment] = []
    var _createdAt: String = String()
    var _createdBy: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo? = nil
    var _casts: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo] = []
    var _categories: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Category] = []
    var _genre: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Genre] = []
    var _onlineShopPrice: Int64 = 0
    var _status: String = String()
    var _isLiked: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _type = source._type
      _link = source._link
      _artists = source._artists
      _name = source._name
      _plays = source._plays
      _likes = source._likes
      _comments = source._comments
      _commentsTop = source._commentsTop
      _createdAt = source._createdAt
      _createdBy = source._createdBy
      _casts = source._casts
      _categories = source._categories
      _genre = source._genre
      _onlineShopPrice = source._onlineShopPrice
      _status = source._status
      _isLiked = source._isLiked
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._type)
        case 4: try decoder.decodeSingularStringField(value: &_storage._link)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._artists)
        case 12: try decoder.decodeSingularStringField(value: &_storage._name)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._plays)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._likes)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._comments)
        case 18: try decoder.decodeRepeatedMessageField(value: &_storage._commentsTop)
        case 19: try decoder.decodeSingularStringField(value: &_storage._createdAt)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._createdBy)
        case 23: try decoder.decodeRepeatedMessageField(value: &_storage._casts)
        case 28: try decoder.decodeRepeatedMessageField(value: &_storage._categories)
        case 29: try decoder.decodeRepeatedMessageField(value: &_storage._genre)
        case 31: try decoder.decodeSingularInt64Field(value: &_storage._onlineShopPrice)
        case 35: try decoder.decodeSingularStringField(value: &_storage._status)
        case 39: try decoder.decodeSingularBoolField(value: &_storage._isLiked)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 3)
      }
      if !_storage._link.isEmpty {
        try visitor.visitSingularStringField(value: _storage._link, fieldNumber: 4)
      }
      if !_storage._artists.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._artists, fieldNumber: 11)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 12)
      }
      if _storage._plays != 0 {
        try visitor.visitSingularInt64Field(value: _storage._plays, fieldNumber: 13)
      }
      if _storage._likes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likes, fieldNumber: 14)
      }
      if _storage._comments != 0 {
        try visitor.visitSingularInt64Field(value: _storage._comments, fieldNumber: 17)
      }
      if !_storage._commentsTop.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._commentsTop, fieldNumber: 18)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 19)
      }
      if let v = _storage._createdBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if !_storage._casts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._casts, fieldNumber: 23)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categories, fieldNumber: 28)
      }
      if !_storage._genre.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._genre, fieldNumber: 29)
      }
      if _storage._onlineShopPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._onlineShopPrice, fieldNumber: 31)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 35)
      }
      if _storage._isLiked != false {
        try visitor.visitSingularBoolField(value: _storage._isLiked, fieldNumber: 39)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Video) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._link != rhs_storage._link {return false}
        if _storage._artists != rhs_storage._artists {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._plays != rhs_storage._plays {return false}
        if _storage._likes != rhs_storage._likes {return false}
        if _storage._comments != rhs_storage._comments {return false}
        if _storage._commentsTop != rhs_storage._commentsTop {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._createdBy != rhs_storage._createdBy {return false}
        if _storage._casts != rhs_storage._casts {return false}
        if _storage._categories != rhs_storage._categories {return false}
        if _storage._genre != rhs_storage._genre {return false}
        if _storage._onlineShopPrice != rhs_storage._onlineShopPrice {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._isLiked != rhs_storage._isLiked {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Comment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Comment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commentId"),
    2: .same(proto: "commentTime"),
    3: .same(proto: "prettyTime"),
    4: .same(proto: "subscriberInfo"),
    5: .same(proto: "content"),
    6: .same(proto: "canRemove"),
  ]

  fileprivate class _StorageClass {
    var _commentID: String = String()
    var _commentTime: String = String()
    var _prettyTime: String = String()
    var _subscriberInfo: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo? = nil
    var _content: String = String()
    var _canRemove: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _commentID = source._commentID
      _commentTime = source._commentTime
      _prettyTime = source._prettyTime
      _subscriberInfo = source._subscriberInfo
      _content = source._content
      _canRemove = source._canRemove
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._commentID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._commentTime)
        case 3: try decoder.decodeSingularStringField(value: &_storage._prettyTime)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._subscriberInfo)
        case 5: try decoder.decodeSingularStringField(value: &_storage._content)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._canRemove)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._commentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._commentID, fieldNumber: 1)
      }
      if !_storage._commentTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._commentTime, fieldNumber: 2)
      }
      if !_storage._prettyTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._prettyTime, fieldNumber: 3)
      }
      if let v = _storage._subscriberInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 5)
      }
      if _storage._canRemove != false {
        try visitor.visitSingularBoolField(value: _storage._canRemove, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Comment, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Comment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._commentID != rhs_storage._commentID {return false}
        if _storage._commentTime != rhs_storage._commentTime {return false}
        if _storage._prettyTime != rhs_storage._prettyTime {return false}
        if _storage._subscriberInfo != rhs_storage._subscriberInfo {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._canRemove != rhs_storage._canRemove {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscriberId"),
    3: .same(proto: "username"),
    4: .same(proto: "email"),
    5: .same(proto: "mobile"),
    6: .same(proto: "imageUrl"),
    7: .same(proto: "firstName"),
    8: .same(proto: "lastName"),
    9: .same(proto: "subscriberType"),
    10: .same(proto: "gender"),
    11: .same(proto: "birthDate"),
    12: .same(proto: "photos"),
    13: .same(proto: "followers"),
    15: .same(proto: "isFollower"),
    16: .same(proto: "address"),
    17: .same(proto: "followings"),
    18: .same(proto: "playlists"),
    19: .same(proto: "defaultTrackQuality"),
  ]

  fileprivate class _StorageClass {
    var _subscriberID: String = String()
    var _username: String = String()
    var _email: String = String()
    var _mobile: String = String()
    var _imageURL: String = String()
    var _firstName: String = String()
    var _lastName: String = String()
    var _subscriberType: String = String()
    var _gender: String = String()
    var _birthDate: String = String()
    var _photos: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Photo] = []
    var _followers: Int64 = 0
    var _isFollower: Bool = false
    var _address: [Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Address] = []
    var _followings: Int64 = 0
    var _playlists: Int32 = 0
    var _defaultTrackQuality: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriberID = source._subscriberID
      _username = source._username
      _email = source._email
      _mobile = source._mobile
      _imageURL = source._imageURL
      _firstName = source._firstName
      _lastName = source._lastName
      _subscriberType = source._subscriberType
      _gender = source._gender
      _birthDate = source._birthDate
      _photos = source._photos
      _followers = source._followers
      _isFollower = source._isFollower
      _address = source._address
      _followings = source._followings
      _playlists = source._playlists
      _defaultTrackQuality = source._defaultTrackQuality
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._subscriberID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._username)
        case 4: try decoder.decodeSingularStringField(value: &_storage._email)
        case 5: try decoder.decodeSingularStringField(value: &_storage._mobile)
        case 6: try decoder.decodeSingularStringField(value: &_storage._imageURL)
        case 7: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 8: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 9: try decoder.decodeSingularStringField(value: &_storage._subscriberType)
        case 10: try decoder.decodeSingularStringField(value: &_storage._gender)
        case 11: try decoder.decodeSingularStringField(value: &_storage._birthDate)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._photos)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._followers)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._isFollower)
        case 16: try decoder.decodeRepeatedMessageField(value: &_storage._address)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._followings)
        case 18: try decoder.decodeSingularInt32Field(value: &_storage._playlists)
        case 19: try decoder.decodeSingularInt32Field(value: &_storage._defaultTrackQuality)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._subscriberID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberID, fieldNumber: 1)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 3)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 4)
      }
      if !_storage._mobile.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mobile, fieldNumber: 5)
      }
      if !_storage._imageURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageURL, fieldNumber: 6)
      }
      if !_storage._firstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstName, fieldNumber: 7)
      }
      if !_storage._lastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastName, fieldNumber: 8)
      }
      if !_storage._subscriberType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberType, fieldNumber: 9)
      }
      if !_storage._gender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gender, fieldNumber: 10)
      }
      if !_storage._birthDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._birthDate, fieldNumber: 11)
      }
      if !_storage._photos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._photos, fieldNumber: 12)
      }
      if _storage._followers != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followers, fieldNumber: 13)
      }
      if _storage._isFollower != false {
        try visitor.visitSingularBoolField(value: _storage._isFollower, fieldNumber: 15)
      }
      if !_storage._address.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._address, fieldNumber: 16)
      }
      if _storage._followings != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followings, fieldNumber: 17)
      }
      if _storage._playlists != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playlists, fieldNumber: 18)
      }
      if _storage._defaultTrackQuality != 0 {
        try visitor.visitSingularInt32Field(value: _storage._defaultTrackQuality, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_SubscriberInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._username != rhs_storage._username {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._mobile != rhs_storage._mobile {return false}
        if _storage._imageURL != rhs_storage._imageURL {return false}
        if _storage._firstName != rhs_storage._firstName {return false}
        if _storage._lastName != rhs_storage._lastName {return false}
        if _storage._subscriberType != rhs_storage._subscriberType {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._birthDate != rhs_storage._birthDate {return false}
        if _storage._photos != rhs_storage._photos {return false}
        if _storage._followers != rhs_storage._followers {return false}
        if _storage._isFollower != rhs_storage._isFollower {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._followings != rhs_storage._followings {return false}
        if _storage._playlists != rhs_storage._playlists {return false}
        if _storage._defaultTrackQuality != rhs_storage._defaultTrackQuality {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Photo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Photo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "quality"),
    3: .same(proto: "url"),
    4: .same(proto: "size"),
    5: .same(proto: "width"),
    6: .same(proto: "height"),
    7: .same(proto: "mimeType"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.quality)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      case 4: try decoder.decodeSingularInt64Field(value: &self.size)
      case 5: try decoder.decodeSingularInt32Field(value: &self.width)
      case 6: try decoder.decodeSingularInt32Field(value: &self.height)
      case 7: try decoder.decodeSingularStringField(value: &self.mimeType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.quality.isEmpty {
      try visitor.visitSingularStringField(value: self.quality, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 4)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 5)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 6)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Photo, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Photo) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.quality != rhs.quality {return false}
    if lhs.url != rhs.url {return false}
    if lhs.size != rhs.size {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Address"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    6: .same(proto: "province"),
    7: .same(proto: "city"),
    8: .same(proto: "sector"),
    11: .same(proto: "recipientName"),
    12: .same(proto: "recipientPhone"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 6: try decoder.decodeSingularStringField(value: &self.province)
      case 7: try decoder.decodeSingularStringField(value: &self.city)
      case 8: try decoder.decodeSingularStringField(value: &self.sector)
      case 11: try decoder.decodeSingularStringField(value: &self.recipientName)
      case 12: try decoder.decodeSingularStringField(value: &self.recipientPhone)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.province.isEmpty {
      try visitor.visitSingularStringField(value: self.province, fieldNumber: 6)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 7)
    }
    if !self.sector.isEmpty {
      try visitor.visitSingularStringField(value: self.sector, fieldNumber: 8)
    }
    if !self.recipientName.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientName, fieldNumber: 11)
    }
    if !self.recipientPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientPhone, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Address, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Address) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.province != rhs.province {return false}
    if lhs.city != rhs.city {return false}
    if lhs.sector != rhs.sector {return false}
    if lhs.recipientName != rhs.recipientName {return false}
    if lhs.recipientPhone != rhs.recipientPhone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Category"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
    3: .same(proto: "title"),
    4: .same(proto: "type"),
    6: .same(proto: "createdAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.key)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      case 4: try decoder.decodeSingularStringField(value: &self.type)
      case 6: try decoder.decodeSingularStringField(value: &self.createdAt)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 4)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Category, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Category) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.key != rhs.key {return false}
    if lhs.title != rhs.title {return false}
    if lhs.type != rhs.type {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Genre: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Genre"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
    3: .same(proto: "title"),
    6: .same(proto: "createdAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.key)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      case 6: try decoder.decodeSingularStringField(value: &self.createdAt)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Genre, rhs: Com_Vasl_Vaslapp_Products_Hambazi_Proto_Holder_Genre) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.key != rhs.key {return false}
    if lhs.title != rhs.title {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
