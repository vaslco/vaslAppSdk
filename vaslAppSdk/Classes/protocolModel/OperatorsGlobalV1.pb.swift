// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: OperatorsGlobalV1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_General {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var engName: String = String()

  public var perName: String = String()

  public var operatorID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorsListName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorName] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var operatorID: String = String()

  public var engName: String = String()

  public var perName: String = String()

  public var aggregatorID: String = String()

  public var aggregatorName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_AggregatorsList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var aggregator: [Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_Aggregator] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_Aggregator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var shortCode: String = String()

  public var chargeCode: String = String()

  public var serviceID: String = String()

  ///  string aggregatorUrl = 6;
  public var operatorName: String = String()

  public var operatorID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_AggregatorRightelGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var aggregatorNameEng: String {
    get {return _storage._aggregatorNameEng}
    set {_uniqueStorage()._aggregatorNameEng = newValue}
  }

  public var aggregatorNamePer: String {
    get {return _storage._aggregatorNamePer}
    set {_uniqueStorage()._aggregatorNamePer = newValue}
  }

  public var spID: String {
    get {return _storage._spID}
    set {_uniqueStorage()._spID = newValue}
  }

  public var chargeServiceid: String {
    get {return _storage._chargeServiceid}
    set {_uniqueStorage()._chargeServiceid = newValue}
  }

  public var serviceID: String {
    get {return _storage._serviceID}
    set {_uniqueStorage()._serviceID = newValue}
  }

  public var serviceNameEng: String {
    get {return _storage._serviceNameEng}
    set {_uniqueStorage()._serviceNameEng = newValue}
  }

  public var shortCode: String {
    get {return _storage._shortCode}
    set {_uniqueStorage()._shortCode = newValue}
  }

  public var userName: String {
    get {return _storage._userName}
    set {_uniqueStorage()._userName = newValue}
  }

  public var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  public var smsURL: String {
    get {return _storage._smsURL}
    set {_uniqueStorage()._smsURL = newValue}
  }

  public var chargeURL: String {
    get {return _storage._chargeURL}
    set {_uniqueStorage()._chargeURL = newValue}
  }

  public var operatorID: String {
    get {return _storage._operatorID}
    set {_uniqueStorage()._operatorID = newValue}
  }

  public var operatorName: String {
    get {return _storage._operatorName}
    set {_uniqueStorage()._operatorName = newValue}
  }

  public var chargeCode: String {
    get {return _storage._chargeCode}
    set {_uniqueStorage()._chargeCode = newValue}
  }

  public var msgUnSubscriber: String {
    get {return _storage._msgUnSubscriber}
    set {_uniqueStorage()._msgUnSubscriber = newValue}
  }

  public var msgSubscriber: String {
    get {return _storage._msgSubscriber}
    set {_uniqueStorage()._msgSubscriber = newValue}
  }

  public var msgUnSubscriberHelp: String {
    get {return _storage._msgUnSubscriberHelp}
    set {_uniqueStorage()._msgUnSubscriberHelp = newValue}
  }

  public var msgSubscriberHelp: String {
    get {return _storage._msgSubscriberHelp}
    set {_uniqueStorage()._msgSubscriberHelp = newValue}
  }

  public var msgHelp: String {
    get {return _storage._msgHelp}
    set {_uniqueStorage()._msgHelp = newValue}
  }

  public var chargeAmount: String {
    get {return _storage._chargeAmount}
    set {_uniqueStorage()._chargeAmount = newValue}
  }

  public var aggregatorSendOtpurl: String {
    get {return _storage._aggregatorSendOtpurl}
    set {_uniqueStorage()._aggregatorSendOtpurl = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.modules.operators.global.proto.holder"

extension Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_General: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".General"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_General, rhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_General) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OperatorName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "engName"),
    2: .same(proto: "perName"),
    3: .same(proto: "operatorId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.engName)
      case 2: try decoder.decodeSingularStringField(value: &self.perName)
      case 3: try decoder.decodeSingularStringField(value: &self.operatorID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.engName.isEmpty {
      try visitor.visitSingularStringField(value: self.engName, fieldNumber: 1)
    }
    if !self.perName.isEmpty {
      try visitor.visitSingularStringField(value: self.perName, fieldNumber: 2)
    }
    if !self.operatorID.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorName, rhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorName) -> Bool {
    if lhs.engName != rhs.engName {return false}
    if lhs.perName != rhs.perName {return false}
    if lhs.operatorID != rhs.operatorID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorsListName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OperatorsListName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorsListName, rhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorsListName) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OperatorGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "operatorId"),
    5: .same(proto: "engName"),
    6: .same(proto: "perName"),
    7: .same(proto: "aggregatorId"),
    8: .same(proto: "aggregatorName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.operatorID)
      case 5: try decoder.decodeSingularStringField(value: &self.engName)
      case 6: try decoder.decodeSingularStringField(value: &self.perName)
      case 7: try decoder.decodeSingularStringField(value: &self.aggregatorID)
      case 8: try decoder.decodeSingularStringField(value: &self.aggregatorName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.operatorID.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorID, fieldNumber: 4)
    }
    if !self.engName.isEmpty {
      try visitor.visitSingularStringField(value: self.engName, fieldNumber: 5)
    }
    if !self.perName.isEmpty {
      try visitor.visitSingularStringField(value: self.perName, fieldNumber: 6)
    }
    if !self.aggregatorID.isEmpty {
      try visitor.visitSingularStringField(value: self.aggregatorID, fieldNumber: 7)
    }
    if !self.aggregatorName.isEmpty {
      try visitor.visitSingularStringField(value: self.aggregatorName, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorGet, rhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_OperatorGet) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.operatorID != rhs.operatorID {return false}
    if lhs.engName != rhs.engName {return false}
    if lhs.perName != rhs.perName {return false}
    if lhs.aggregatorID != rhs.aggregatorID {return false}
    if lhs.aggregatorName != rhs.aggregatorName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_AggregatorsList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AggregatorsList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "aggregator"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.aggregator)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.aggregator.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.aggregator, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_AggregatorsList, rhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_AggregatorsList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.aggregator != rhs.aggregator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_Aggregator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Aggregator"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "shortCode"),
    4: .same(proto: "chargeCode"),
    5: .same(proto: "serviceId"),
    7: .same(proto: "operatorName"),
    8: .same(proto: "operatorId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.shortCode)
      case 4: try decoder.decodeSingularStringField(value: &self.chargeCode)
      case 5: try decoder.decodeSingularStringField(value: &self.serviceID)
      case 7: try decoder.decodeSingularStringField(value: &self.operatorName)
      case 8: try decoder.decodeSingularStringField(value: &self.operatorID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.shortCode.isEmpty {
      try visitor.visitSingularStringField(value: self.shortCode, fieldNumber: 3)
    }
    if !self.chargeCode.isEmpty {
      try visitor.visitSingularStringField(value: self.chargeCode, fieldNumber: 4)
    }
    if !self.serviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceID, fieldNumber: 5)
    }
    if !self.operatorName.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorName, fieldNumber: 7)
    }
    if !self.operatorID.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_Aggregator, rhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_Aggregator) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.shortCode != rhs.shortCode {return false}
    if lhs.chargeCode != rhs.chargeCode {return false}
    if lhs.serviceID != rhs.serviceID {return false}
    if lhs.operatorName != rhs.operatorName {return false}
    if lhs.operatorID != rhs.operatorID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_AggregatorRightelGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AggregatorRightelGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "id"),
    5: .same(proto: "aggregatorNameEng"),
    6: .same(proto: "aggregatorNamePer"),
    7: .same(proto: "spId"),
    8: .same(proto: "chargeServiceid"),
    9: .same(proto: "serviceId"),
    10: .same(proto: "serviceNameEng"),
    11: .same(proto: "shortCode"),
    12: .same(proto: "userName"),
    13: .same(proto: "password"),
    14: .same(proto: "smsUrl"),
    15: .same(proto: "chargeUrl"),
    16: .same(proto: "operatorId"),
    17: .same(proto: "operatorName"),
    18: .same(proto: "chargeCode"),
    19: .same(proto: "msgUnSubscriber"),
    20: .same(proto: "msgSubscriber"),
    21: .same(proto: "msgUnSubscriberHelp"),
    22: .same(proto: "msgSubscriberHelp"),
    23: .same(proto: "msgHelp"),
    24: .same(proto: "chargeAmount"),
    25: .same(proto: "aggregatorSendOTPUrl"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _id: String = String()
    var _aggregatorNameEng: String = String()
    var _aggregatorNamePer: String = String()
    var _spID: String = String()
    var _chargeServiceid: String = String()
    var _serviceID: String = String()
    var _serviceNameEng: String = String()
    var _shortCode: String = String()
    var _userName: String = String()
    var _password: String = String()
    var _smsURL: String = String()
    var _chargeURL: String = String()
    var _operatorID: String = String()
    var _operatorName: String = String()
    var _chargeCode: String = String()
    var _msgUnSubscriber: String = String()
    var _msgSubscriber: String = String()
    var _msgUnSubscriberHelp: String = String()
    var _msgSubscriberHelp: String = String()
    var _msgHelp: String = String()
    var _chargeAmount: String = String()
    var _aggregatorSendOtpurl: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _id = source._id
      _aggregatorNameEng = source._aggregatorNameEng
      _aggregatorNamePer = source._aggregatorNamePer
      _spID = source._spID
      _chargeServiceid = source._chargeServiceid
      _serviceID = source._serviceID
      _serviceNameEng = source._serviceNameEng
      _shortCode = source._shortCode
      _userName = source._userName
      _password = source._password
      _smsURL = source._smsURL
      _chargeURL = source._chargeURL
      _operatorID = source._operatorID
      _operatorName = source._operatorName
      _chargeCode = source._chargeCode
      _msgUnSubscriber = source._msgUnSubscriber
      _msgSubscriber = source._msgSubscriber
      _msgUnSubscriberHelp = source._msgUnSubscriberHelp
      _msgSubscriberHelp = source._msgSubscriberHelp
      _msgHelp = source._msgHelp
      _chargeAmount = source._chargeAmount
      _aggregatorSendOtpurl = source._aggregatorSendOtpurl
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._id)
        case 5: try decoder.decodeSingularStringField(value: &_storage._aggregatorNameEng)
        case 6: try decoder.decodeSingularStringField(value: &_storage._aggregatorNamePer)
        case 7: try decoder.decodeSingularStringField(value: &_storage._spID)
        case 8: try decoder.decodeSingularStringField(value: &_storage._chargeServiceid)
        case 9: try decoder.decodeSingularStringField(value: &_storage._serviceID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._serviceNameEng)
        case 11: try decoder.decodeSingularStringField(value: &_storage._shortCode)
        case 12: try decoder.decodeSingularStringField(value: &_storage._userName)
        case 13: try decoder.decodeSingularStringField(value: &_storage._password)
        case 14: try decoder.decodeSingularStringField(value: &_storage._smsURL)
        case 15: try decoder.decodeSingularStringField(value: &_storage._chargeURL)
        case 16: try decoder.decodeSingularStringField(value: &_storage._operatorID)
        case 17: try decoder.decodeSingularStringField(value: &_storage._operatorName)
        case 18: try decoder.decodeSingularStringField(value: &_storage._chargeCode)
        case 19: try decoder.decodeSingularStringField(value: &_storage._msgUnSubscriber)
        case 20: try decoder.decodeSingularStringField(value: &_storage._msgSubscriber)
        case 21: try decoder.decodeSingularStringField(value: &_storage._msgUnSubscriberHelp)
        case 22: try decoder.decodeSingularStringField(value: &_storage._msgSubscriberHelp)
        case 23: try decoder.decodeSingularStringField(value: &_storage._msgHelp)
        case 24: try decoder.decodeSingularStringField(value: &_storage._chargeAmount)
        case 25: try decoder.decodeSingularStringField(value: &_storage._aggregatorSendOtpurl)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 4)
      }
      if !_storage._aggregatorNameEng.isEmpty {
        try visitor.visitSingularStringField(value: _storage._aggregatorNameEng, fieldNumber: 5)
      }
      if !_storage._aggregatorNamePer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._aggregatorNamePer, fieldNumber: 6)
      }
      if !_storage._spID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._spID, fieldNumber: 7)
      }
      if !_storage._chargeServiceid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chargeServiceid, fieldNumber: 8)
      }
      if !_storage._serviceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceID, fieldNumber: 9)
      }
      if !_storage._serviceNameEng.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceNameEng, fieldNumber: 10)
      }
      if !_storage._shortCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shortCode, fieldNumber: 11)
      }
      if !_storage._userName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userName, fieldNumber: 12)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 13)
      }
      if !_storage._smsURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._smsURL, fieldNumber: 14)
      }
      if !_storage._chargeURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chargeURL, fieldNumber: 15)
      }
      if !_storage._operatorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._operatorID, fieldNumber: 16)
      }
      if !_storage._operatorName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._operatorName, fieldNumber: 17)
      }
      if !_storage._chargeCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chargeCode, fieldNumber: 18)
      }
      if !_storage._msgUnSubscriber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msgUnSubscriber, fieldNumber: 19)
      }
      if !_storage._msgSubscriber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msgSubscriber, fieldNumber: 20)
      }
      if !_storage._msgUnSubscriberHelp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msgUnSubscriberHelp, fieldNumber: 21)
      }
      if !_storage._msgSubscriberHelp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msgSubscriberHelp, fieldNumber: 22)
      }
      if !_storage._msgHelp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msgHelp, fieldNumber: 23)
      }
      if !_storage._chargeAmount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chargeAmount, fieldNumber: 24)
      }
      if !_storage._aggregatorSendOtpurl.isEmpty {
        try visitor.visitSingularStringField(value: _storage._aggregatorSendOtpurl, fieldNumber: 25)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_AggregatorRightelGet, rhs: Com_Vasl_Vaslapp_Modules_Operators_Global_Proto_Holder_AggregatorRightelGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._aggregatorNameEng != rhs_storage._aggregatorNameEng {return false}
        if _storage._aggregatorNamePer != rhs_storage._aggregatorNamePer {return false}
        if _storage._spID != rhs_storage._spID {return false}
        if _storage._chargeServiceid != rhs_storage._chargeServiceid {return false}
        if _storage._serviceID != rhs_storage._serviceID {return false}
        if _storage._serviceNameEng != rhs_storage._serviceNameEng {return false}
        if _storage._shortCode != rhs_storage._shortCode {return false}
        if _storage._userName != rhs_storage._userName {return false}
        if _storage._password != rhs_storage._password {return false}
        if _storage._smsURL != rhs_storage._smsURL {return false}
        if _storage._chargeURL != rhs_storage._chargeURL {return false}
        if _storage._operatorID != rhs_storage._operatorID {return false}
        if _storage._operatorName != rhs_storage._operatorName {return false}
        if _storage._chargeCode != rhs_storage._chargeCode {return false}
        if _storage._msgUnSubscriber != rhs_storage._msgUnSubscriber {return false}
        if _storage._msgSubscriber != rhs_storage._msgSubscriber {return false}
        if _storage._msgUnSubscriberHelp != rhs_storage._msgUnSubscriberHelp {return false}
        if _storage._msgSubscriberHelp != rhs_storage._msgSubscriberHelp {return false}
        if _storage._msgHelp != rhs_storage._msgHelp {return false}
        if _storage._chargeAmount != rhs_storage._chargeAmount {return false}
        if _storage._aggregatorSendOtpurl != rhs_storage._aggregatorSendOtpurl {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
