// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ContentGlobalV1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Category {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var catID: String = String()

  public var title: String = String()

  public var description_p: String = String()

  public var image: String = String()

  public var parentID: String = String()

  public var level: Int64 = 0

  public var rootID: String = String()

  public var hasChild_p: Bool = false

  public var key: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Languages {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var value: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Category] = []

  public var page: Int64 = 0

  public var totalPages: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryListCllustered {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int64 = 0

  public var categoryCllustered: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryCllustered] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryCllustered {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var catID: String = String()

  public var title: String = String()

  public var description_p: String = String()

  public var image: String = String()

  public var parentID: String = String()

  public var rootID: String = String()

  public var level: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryCllustered] = []

  public var key: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var catID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryEdit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var contentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentEdit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRowTypeList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRowType] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentChangeStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_TagCategoryAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var tags: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_TagCategoryDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var contentRow: String = String()

  public var field1: String = String()

  public var field2: String = String()

  public var field3: String = String()

  public var field4: String = String()

  public var field5: String = String()

  public var datas: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_LocationPoint] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_GetContentInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var contentInfo: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo {
    get {return _contentInfo ?? Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo()}
    set {_contentInfo = newValue}
  }
  /// Returns true if `contentInfo` has been explicitly set.
  public var hasContentInfo: Bool {return self._contentInfo != nil}
  /// Clears the value of `contentInfo`. Subsequent reads from it will return its default value.
  public mutating func clearContentInfo() {self._contentInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _contentInfo: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo? = nil
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content] {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var cats: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Category] {
    get {return _storage._cats}
    set {_uniqueStorage()._cats = newValue}
  }

  public var headline: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content {
    get {return _storage._headline ?? Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content()}
    set {_uniqueStorage()._headline = newValue}
  }
  /// Returns true if `headline` has been explicitly set.
  public var hasHeadline: Bool {return _storage._headline != nil}
  /// Clears the value of `headline`. Subsequent reads from it will return its default value.
  public mutating func clearHeadline() {_uniqueStorage()._headline = nil}

  public var banner: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content {
    get {return _storage._banner ?? Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content()}
    set {_uniqueStorage()._banner = newValue}
  }
  /// Returns true if `banner` has been explicitly set.
  public var hasBanner: Bool {return _storage._banner != nil}
  /// Clears the value of `banner`. Subsequent reads from it will return its default value.
  public mutating func clearBanner() {_uniqueStorage()._banner = nil}

  public var summery: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content {
    get {return _storage._summery ?? Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content()}
    set {_uniqueStorage()._summery = newValue}
  }
  /// Returns true if `summery` has been explicitly set.
  public var hasSummery: Bool {return _storage._summery != nil}
  /// Clears the value of `summery`. Subsequent reads from it will return its default value.
  public mutating func clearSummery() {_uniqueStorage()._summery = nil}

  public var contentArray: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content] {
    get {return _storage._contentArray}
    set {_uniqueStorage()._contentArray = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var visitCount: Int64 {
    get {return _storage._visitCount}
    set {_uniqueStorage()._visitCount = newValue}
  }

  public var contentID: String {
    get {return _storage._contentID}
    set {_uniqueStorage()._contentID = newValue}
  }

  public var insertTime: Int64 {
    get {return _storage._insertTime}
    set {_uniqueStorage()._insertTime = newValue}
  }

  public var insertTimeText: String {
    get {return _storage._insertTimeText}
    set {_uniqueStorage()._insertTimeText = newValue}
  }

  public var likes: Int64 {
    get {return _storage._likes}
    set {_uniqueStorage()._likes = newValue}
  }

  public var totalRating: Double {
    get {return _storage._totalRating}
    set {_uniqueStorage()._totalRating = newValue}
  }

  public var userRating: Double {
    get {return _storage._userRating}
    set {_uniqueStorage()._userRating = newValue}
  }

  public var commentCount: Int64 {
    get {return _storage._commentCount}
    set {_uniqueStorage()._commentCount = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_LocationPoint {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_LocationPoint()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var isLiked: Bool {
    get {return _storage._isLiked}
    set {_uniqueStorage()._isLiked = newValue}
  }

  public var isFavourite: Bool {
    get {return _storage._isFavourite}
    set {_uniqueStorage()._isFavourite = newValue}
  }

  public var publishDate: String {
    get {return _storage._publishDate}
    set {_uniqueStorage()._publishDate = newValue}
  }

  public var lat: Double {
    get {return _storage._lat}
    set {_uniqueStorage()._lat = newValue}
  }

  public var lng: Double {
    get {return _storage._lng}
    set {_uniqueStorage()._lng = newValue}
  }

  public var shortLink: String {
    get {return _storage._shortLink}
    set {_uniqueStorage()._shortLink = newValue}
  }

  public var language: String {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  public var relationKey: String {
    get {return _storage._relationKey}
    set {_uniqueStorage()._relationKey = newValue}
  }

  public var property: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyValue] {
    get {return _storage._property}
    set {_uniqueStorage()._property = newValue}
  }

  public var infoGeo: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_InfoPolygon {
    get {return _storage._infoGeo ?? Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_InfoPolygon()}
    set {_uniqueStorage()._infoGeo = newValue}
  }
  /// Returns true if `infoGeo` has been explicitly set.
  public var hasInfoGeo: Bool {return _storage._infoGeo != nil}
  /// Clears the value of `infoGeo`. Subsequent reads from it will return its default value.
  public mutating func clearInfoGeo() {_uniqueStorage()._infoGeo = nil}

  public var statusSub: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo.StatusSub {
    get {return _storage._statusSub}
    set {_uniqueStorage()._statusSub = newValue}
  }

  public var confirmBy: String {
    get {return _storage._confirmBy}
    set {_uniqueStorage()._confirmBy = newValue}
  }

  public var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  public var subscriberID: String {
    get {return _storage._subscriberID}
    set {_uniqueStorage()._subscriberID = newValue}
  }

  public var infoSubscriber: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_SubscriberInfo {
    get {return _storage._infoSubscriber ?? Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._infoSubscriber = newValue}
  }
  /// Returns true if `infoSubscriber` has been explicitly set.
  public var hasInfoSubscriber: Bool {return _storage._infoSubscriber != nil}
  /// Clears the value of `infoSubscriber`. Subsequent reads from it will return its default value.
  public mutating func clearInfoSubscriber() {_uniqueStorage()._infoSubscriber = nil}

  public var confirm: Bool {
    get {return _storage._confirm}
    set {_uniqueStorage()._confirm = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum StatusSub: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case undefine // = 0
    case refuse // = 1
    case accept // = 2
    case waiting // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .undefine
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .undefine
      case 1: self = .refuse
      case 2: self = .accept
      case 3: self = .waiting
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .undefine: return 0
      case .refuse: return 1
      case .accept: return 2
      case .waiting: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo.StatusSub: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo.StatusSub] = [
    .undefine,
    .refuse,
    .accept,
    .waiting,
  ]
}

#endif  // swift(>=4.2)

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_LocationPoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lat: Double = 0

  public var lng: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentLikes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var likeInfo: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentLikeInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRelationKeys {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var key: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentLikeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var subscriberID: String = String()

  public var subscriberName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentsList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo] = []

  public var category: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Category] = []

  public var page: Int64 = 0

  public var totalPages: Int64 = 0

  public var totalItems: Int64 = 0

  public var deletedCnt: Int64 = 0

  public var publishedCnt: Int64 = 0

  public var createdCnt: Int64 = 0

  public var allCnt: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo {
    get {return _data ?? Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo? = nil
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRowType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyDel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Property {
    get {return _data ?? Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Property()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Property? = nil
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Property {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var idParent: String = String()

  public var type: String = String()

  public var typeProperty: String = String()

  public var valueList: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///we can add photo and other thing in property
public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var value: String = String()

  public var type: String = String()

  public var icon: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var listProperty: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Property] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_InfoPolygon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var country: String = String()

  public var state: String = String()

  public var city: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CountContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var type: String = String()

  public var count: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocationGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var values: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_SubscriberInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var username: String = String()

  public var confirmedEmail: String = String()

  public var claimedEmail: String = String()

  public var confirmedMobile: String = String()

  public var claimedMobile: String = String()

  public var registrationType: String = String()

  public var insertTime: String = String()

  public var status: String = String()

  public var extra: String = String()

  public var subscriberType: String = String()

  public var lastLogin: String = String()

  public var id: String = String()

  public var roles: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Role] = []

  public var statusText: String = String()

  public var validated: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Role {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var roleID: String = String()

  public var roleName: String = String()

  public var appID: String = String()

  public var appName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.modules.content.global.proto.holder"

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Category"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "catId"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "image"),
    5: .same(proto: "parentId"),
    6: .same(proto: "level"),
    7: .same(proto: "rootId"),
    8: .same(proto: "hasChild"),
    9: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.catID)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularStringField(value: &self.image)
      case 5: try decoder.decodeSingularStringField(value: &self.parentID)
      case 6: try decoder.decodeSingularInt64Field(value: &self.level)
      case 7: try decoder.decodeSingularStringField(value: &self.rootID)
      case 8: try decoder.decodeSingularBoolField(value: &self.hasChild_p)
      case 9: try decoder.decodeSingularStringField(value: &self.key)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.catID.isEmpty {
      try visitor.visitSingularStringField(value: self.catID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 4)
    }
    if !self.parentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentID, fieldNumber: 5)
    }
    if self.level != 0 {
      try visitor.visitSingularInt64Field(value: self.level, fieldNumber: 6)
    }
    if !self.rootID.isEmpty {
      try visitor.visitSingularStringField(value: self.rootID, fieldNumber: 7)
    }
    if self.hasChild_p != false {
      try visitor.visitSingularBoolField(value: self.hasChild_p, fieldNumber: 8)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Category, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Category) -> Bool {
    if lhs.catID != rhs.catID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.image != rhs.image {return false}
    if lhs.parentID != rhs.parentID {return false}
    if lhs.level != rhs.level {return false}
    if lhs.rootID != rhs.rootID {return false}
    if lhs.hasChild_p != rhs.hasChild_p {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Languages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Languages"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedStringField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitRepeatedStringField(value: self.value, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Languages, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Languages) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
    5: .same(proto: "page"),
    6: .same(proto: "totalPages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 5: try decoder.decodeSingularInt64Field(value: &self.page)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalPages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    if self.page != 0 {
      try visitor.visitSingularInt64Field(value: self.page, fieldNumber: 5)
    }
    if self.totalPages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPages, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryList, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryListCllustered: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryListCllustered"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "categoryCllustered"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt64Field(value: &self.page)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.categoryCllustered)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt64Field(value: self.page, fieldNumber: 4)
    }
    if !self.categoryCllustered.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categoryCllustered, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryListCllustered, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryListCllustered) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.categoryCllustered != rhs.categoryCllustered {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryCllustered: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryCllustered"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "catId"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "image"),
    5: .same(proto: "parentId"),
    6: .same(proto: "rootId"),
    7: .same(proto: "level"),
    8: .same(proto: "data"),
    9: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.catID)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularStringField(value: &self.image)
      case 5: try decoder.decodeSingularStringField(value: &self.parentID)
      case 6: try decoder.decodeSingularStringField(value: &self.rootID)
      case 7: try decoder.decodeSingularInt64Field(value: &self.level)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 9: try decoder.decodeSingularStringField(value: &self.key)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.catID.isEmpty {
      try visitor.visitSingularStringField(value: self.catID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 4)
    }
    if !self.parentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentID, fieldNumber: 5)
    }
    if !self.rootID.isEmpty {
      try visitor.visitSingularStringField(value: self.rootID, fieldNumber: 6)
    }
    if self.level != 0 {
      try visitor.visitSingularInt64Field(value: self.level, fieldNumber: 7)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 8)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryCllustered, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryCllustered) -> Bool {
    if lhs.catID != rhs.catID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.image != rhs.image {return false}
    if lhs.parentID != rhs.parentID {return false}
    if lhs.rootID != rhs.rootID {return false}
    if lhs.level != rhs.level {return false}
    if lhs.data != rhs.data {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "catId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.catID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.catID.isEmpty {
      try visitor.visitSingularStringField(value: self.catID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryAdd, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.catID != rhs.catID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryEdit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryEdit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryEdit, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryEdit) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryRemove, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CategoryRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "contentId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.contentID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.contentID.isEmpty {
      try visitor.visitSingularStringField(value: self.contentID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentAdd, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.contentID != rhs.contentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentEdit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentEdit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentEdit, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentEdit) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRowTypeList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentRowTypeList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRowTypeList, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRowTypeList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRemove, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentChangeStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentChangeStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentChangeStatus, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentChangeStatus) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_TagCategoryAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TagCategoryAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "tags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedStringField(value: &self.tags)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_TagCategoryAdd, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_TagCategoryAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_TagCategoryDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TagCategoryDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_TagCategoryDelete, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_TagCategoryDelete) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Content"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contentRow"),
    2: .same(proto: "field1"),
    3: .same(proto: "field2"),
    4: .same(proto: "field3"),
    5: .same(proto: "field4"),
    6: .same(proto: "field5"),
    7: .same(proto: "datas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contentRow)
      case 2: try decoder.decodeSingularStringField(value: &self.field1)
      case 3: try decoder.decodeSingularStringField(value: &self.field2)
      case 4: try decoder.decodeSingularStringField(value: &self.field3)
      case 5: try decoder.decodeSingularStringField(value: &self.field4)
      case 6: try decoder.decodeSingularStringField(value: &self.field5)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.datas)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contentRow.isEmpty {
      try visitor.visitSingularStringField(value: self.contentRow, fieldNumber: 1)
    }
    if !self.field1.isEmpty {
      try visitor.visitSingularStringField(value: self.field1, fieldNumber: 2)
    }
    if !self.field2.isEmpty {
      try visitor.visitSingularStringField(value: self.field2, fieldNumber: 3)
    }
    if !self.field3.isEmpty {
      try visitor.visitSingularStringField(value: self.field3, fieldNumber: 4)
    }
    if !self.field4.isEmpty {
      try visitor.visitSingularStringField(value: self.field4, fieldNumber: 5)
    }
    if !self.field5.isEmpty {
      try visitor.visitSingularStringField(value: self.field5, fieldNumber: 6)
    }
    if !self.datas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.datas, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content) -> Bool {
    if lhs.contentRow != rhs.contentRow {return false}
    if lhs.field1 != rhs.field1 {return false}
    if lhs.field2 != rhs.field2 {return false}
    if lhs.field3 != rhs.field3 {return false}
    if lhs.field4 != rhs.field4 {return false}
    if lhs.field5 != rhs.field5 {return false}
    if lhs.datas != rhs.datas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_GetContentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetContentInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "contentInfo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularMessageField(value: &self._contentInfo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if let v = self._contentInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_GetContentInfo, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_GetContentInfo) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs._contentInfo != rhs._contentInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .same(proto: "tags"),
    3: .same(proto: "cats"),
    4: .same(proto: "headline"),
    5: .same(proto: "banner"),
    6: .same(proto: "summery"),
    7: .same(proto: "contentArray"),
    8: .same(proto: "status"),
    9: .same(proto: "visitCount"),
    10: .same(proto: "contentId"),
    11: .same(proto: "insertTime"),
    12: .same(proto: "insertTimeText"),
    13: .same(proto: "likes"),
    14: .same(proto: "totalRating"),
    15: .same(proto: "userRating"),
    16: .same(proto: "commentCount"),
    17: .same(proto: "data"),
    18: .same(proto: "isLiked"),
    19: .same(proto: "isFavourite"),
    20: .same(proto: "publishDate"),
    21: .same(proto: "lat"),
    22: .same(proto: "lng"),
    23: .same(proto: "shortLink"),
    24: .same(proto: "language"),
    25: .same(proto: "relationKey"),
    26: .same(proto: "property"),
    27: .same(proto: "infoGeo"),
    28: .same(proto: "statusSub"),
    29: .same(proto: "confirmBy"),
    30: .same(proto: "userId"),
    31: .same(proto: "subscriberId"),
    32: .same(proto: "infoSubscriber"),
    33: .same(proto: "confirm"),
  ]

  fileprivate class _StorageClass {
    var _content: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content] = []
    var _tags: [String] = []
    var _cats: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Category] = []
    var _headline: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content? = nil
    var _banner: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content? = nil
    var _summery: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content? = nil
    var _contentArray: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Content] = []
    var _status: String = String()
    var _visitCount: Int64 = 0
    var _contentID: String = String()
    var _insertTime: Int64 = 0
    var _insertTimeText: String = String()
    var _likes: Int64 = 0
    var _totalRating: Double = 0
    var _userRating: Double = 0
    var _commentCount: Int64 = 0
    var _data: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_LocationPoint? = nil
    var _isLiked: Bool = false
    var _isFavourite: Bool = false
    var _publishDate: String = String()
    var _lat: Double = 0
    var _lng: Double = 0
    var _shortLink: String = String()
    var _language: String = String()
    var _relationKey: String = String()
    var _property: [Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyValue] = []
    var _infoGeo: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_InfoPolygon? = nil
    var _statusSub: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo.StatusSub = .undefine
    var _confirmBy: String = String()
    var _userID: String = String()
    var _subscriberID: String = String()
    var _infoSubscriber: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_SubscriberInfo? = nil
    var _confirm: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _content = source._content
      _tags = source._tags
      _cats = source._cats
      _headline = source._headline
      _banner = source._banner
      _summery = source._summery
      _contentArray = source._contentArray
      _status = source._status
      _visitCount = source._visitCount
      _contentID = source._contentID
      _insertTime = source._insertTime
      _insertTimeText = source._insertTimeText
      _likes = source._likes
      _totalRating = source._totalRating
      _userRating = source._userRating
      _commentCount = source._commentCount
      _data = source._data
      _isLiked = source._isLiked
      _isFavourite = source._isFavourite
      _publishDate = source._publishDate
      _lat = source._lat
      _lng = source._lng
      _shortLink = source._shortLink
      _language = source._language
      _relationKey = source._relationKey
      _property = source._property
      _infoGeo = source._infoGeo
      _statusSub = source._statusSub
      _confirmBy = source._confirmBy
      _userID = source._userID
      _subscriberID = source._subscriberID
      _infoSubscriber = source._infoSubscriber
      _confirm = source._confirm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._content)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._tags)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._cats)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._headline)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._banner)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._summery)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._contentArray)
        case 8: try decoder.decodeSingularStringField(value: &_storage._status)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._visitCount)
        case 10: try decoder.decodeSingularStringField(value: &_storage._contentID)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._insertTime)
        case 12: try decoder.decodeSingularStringField(value: &_storage._insertTimeText)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._likes)
        case 14: try decoder.decodeSingularDoubleField(value: &_storage._totalRating)
        case 15: try decoder.decodeSingularDoubleField(value: &_storage._userRating)
        case 16: try decoder.decodeSingularInt64Field(value: &_storage._commentCount)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._isLiked)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._isFavourite)
        case 20: try decoder.decodeSingularStringField(value: &_storage._publishDate)
        case 21: try decoder.decodeSingularDoubleField(value: &_storage._lat)
        case 22: try decoder.decodeSingularDoubleField(value: &_storage._lng)
        case 23: try decoder.decodeSingularStringField(value: &_storage._shortLink)
        case 24: try decoder.decodeSingularStringField(value: &_storage._language)
        case 25: try decoder.decodeSingularStringField(value: &_storage._relationKey)
        case 26: try decoder.decodeRepeatedMessageField(value: &_storage._property)
        case 27: try decoder.decodeSingularMessageField(value: &_storage._infoGeo)
        case 28: try decoder.decodeSingularEnumField(value: &_storage._statusSub)
        case 29: try decoder.decodeSingularStringField(value: &_storage._confirmBy)
        case 30: try decoder.decodeSingularStringField(value: &_storage._userID)
        case 31: try decoder.decodeSingularStringField(value: &_storage._subscriberID)
        case 32: try decoder.decodeSingularMessageField(value: &_storage._infoSubscriber)
        case 33: try decoder.decodeSingularBoolField(value: &_storage._confirm)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._content.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._content, fieldNumber: 1)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 2)
      }
      if !_storage._cats.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._cats, fieldNumber: 3)
      }
      if let v = _storage._headline {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._banner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._summery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._contentArray.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._contentArray, fieldNumber: 7)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 8)
      }
      if _storage._visitCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._visitCount, fieldNumber: 9)
      }
      if !_storage._contentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contentID, fieldNumber: 10)
      }
      if _storage._insertTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._insertTime, fieldNumber: 11)
      }
      if !_storage._insertTimeText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insertTimeText, fieldNumber: 12)
      }
      if _storage._likes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likes, fieldNumber: 13)
      }
      if _storage._totalRating != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalRating, fieldNumber: 14)
      }
      if _storage._userRating != 0 {
        try visitor.visitSingularDoubleField(value: _storage._userRating, fieldNumber: 15)
      }
      if _storage._commentCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._commentCount, fieldNumber: 16)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if _storage._isLiked != false {
        try visitor.visitSingularBoolField(value: _storage._isLiked, fieldNumber: 18)
      }
      if _storage._isFavourite != false {
        try visitor.visitSingularBoolField(value: _storage._isFavourite, fieldNumber: 19)
      }
      if !_storage._publishDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._publishDate, fieldNumber: 20)
      }
      if _storage._lat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._lat, fieldNumber: 21)
      }
      if _storage._lng != 0 {
        try visitor.visitSingularDoubleField(value: _storage._lng, fieldNumber: 22)
      }
      if !_storage._shortLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shortLink, fieldNumber: 23)
      }
      if !_storage._language.isEmpty {
        try visitor.visitSingularStringField(value: _storage._language, fieldNumber: 24)
      }
      if !_storage._relationKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._relationKey, fieldNumber: 25)
      }
      if !_storage._property.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._property, fieldNumber: 26)
      }
      if let v = _storage._infoGeo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if _storage._statusSub != .undefine {
        try visitor.visitSingularEnumField(value: _storage._statusSub, fieldNumber: 28)
      }
      if !_storage._confirmBy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._confirmBy, fieldNumber: 29)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 30)
      }
      if !_storage._subscriberID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberID, fieldNumber: 31)
      }
      if let v = _storage._infoSubscriber {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }
      if _storage._confirm != false {
        try visitor.visitSingularBoolField(value: _storage._confirm, fieldNumber: 33)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._content != rhs_storage._content {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._cats != rhs_storage._cats {return false}
        if _storage._headline != rhs_storage._headline {return false}
        if _storage._banner != rhs_storage._banner {return false}
        if _storage._summery != rhs_storage._summery {return false}
        if _storage._contentArray != rhs_storage._contentArray {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._visitCount != rhs_storage._visitCount {return false}
        if _storage._contentID != rhs_storage._contentID {return false}
        if _storage._insertTime != rhs_storage._insertTime {return false}
        if _storage._insertTimeText != rhs_storage._insertTimeText {return false}
        if _storage._likes != rhs_storage._likes {return false}
        if _storage._totalRating != rhs_storage._totalRating {return false}
        if _storage._userRating != rhs_storage._userRating {return false}
        if _storage._commentCount != rhs_storage._commentCount {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._isLiked != rhs_storage._isLiked {return false}
        if _storage._isFavourite != rhs_storage._isFavourite {return false}
        if _storage._publishDate != rhs_storage._publishDate {return false}
        if _storage._lat != rhs_storage._lat {return false}
        if _storage._lng != rhs_storage._lng {return false}
        if _storage._shortLink != rhs_storage._shortLink {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._relationKey != rhs_storage._relationKey {return false}
        if _storage._property != rhs_storage._property {return false}
        if _storage._infoGeo != rhs_storage._infoGeo {return false}
        if _storage._statusSub != rhs_storage._statusSub {return false}
        if _storage._confirmBy != rhs_storage._confirmBy {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._infoSubscriber != rhs_storage._infoSubscriber {return false}
        if _storage._confirm != rhs_storage._confirm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentInfo.StatusSub: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "undefine"),
    1: .same(proto: "refuse"),
    2: .same(proto: "accept"),
    3: .same(proto: "waiting"),
  ]
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_LocationPoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LocationPoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lat"),
    2: .same(proto: "lng"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.lat)
      case 2: try decoder.decodeSingularDoubleField(value: &self.lng)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lat != 0 {
      try visitor.visitSingularDoubleField(value: self.lat, fieldNumber: 1)
    }
    if self.lng != 0 {
      try visitor.visitSingularDoubleField(value: self.lng, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_LocationPoint, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_LocationPoint) -> Bool {
    if lhs.lat != rhs.lat {return false}
    if lhs.lng != rhs.lng {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentLikes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentLikes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "likeInfo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.likeInfo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.likeInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.likeInfo, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentLikes, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentLikes) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.likeInfo != rhs.likeInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRelationKeys: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentRelationKeys"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedStringField(value: &self.key)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.key.isEmpty {
      try visitor.visitRepeatedStringField(value: self.key, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRelationKeys, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRelationKeys) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentLikeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentLikeInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "subscriberId"),
    5: .same(proto: "subscriberName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.subscriberID)
      case 5: try decoder.decodeSingularStringField(value: &self.subscriberName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.subscriberID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberID, fieldNumber: 4)
    }
    if !self.subscriberName.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberName, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentLikeInfo, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentLikeInfo) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.subscriberID != rhs.subscriberID {return false}
    if lhs.subscriberName != rhs.subscriberName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentsList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentsList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
    5: .same(proto: "category"),
    6: .same(proto: "page"),
    7: .same(proto: "totalPages"),
    8: .same(proto: "totalItems"),
    9: .same(proto: "deletedCnt"),
    10: .same(proto: "publishedCnt"),
    11: .same(proto: "createdCnt"),
    12: .same(proto: "allCnt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.category)
      case 6: try decoder.decodeSingularInt64Field(value: &self.page)
      case 7: try decoder.decodeSingularInt64Field(value: &self.totalPages)
      case 8: try decoder.decodeSingularInt64Field(value: &self.totalItems)
      case 9: try decoder.decodeSingularInt64Field(value: &self.deletedCnt)
      case 10: try decoder.decodeSingularInt64Field(value: &self.publishedCnt)
      case 11: try decoder.decodeSingularInt64Field(value: &self.createdCnt)
      case 12: try decoder.decodeSingularInt64Field(value: &self.allCnt)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    if !self.category.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.category, fieldNumber: 5)
    }
    if self.page != 0 {
      try visitor.visitSingularInt64Field(value: self.page, fieldNumber: 6)
    }
    if self.totalPages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalPages, fieldNumber: 7)
    }
    if self.totalItems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalItems, fieldNumber: 8)
    }
    if self.deletedCnt != 0 {
      try visitor.visitSingularInt64Field(value: self.deletedCnt, fieldNumber: 9)
    }
    if self.publishedCnt != 0 {
      try visitor.visitSingularInt64Field(value: self.publishedCnt, fieldNumber: 10)
    }
    if self.createdCnt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdCnt, fieldNumber: 11)
    }
    if self.allCnt != 0 {
      try visitor.visitSingularInt64Field(value: self.allCnt, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentsList, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentsList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.category != rhs.category {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.totalItems != rhs.totalItems {return false}
    if lhs.deletedCnt != rhs.deletedCnt {return false}
    if lhs.publishedCnt != rhs.publishedCnt {return false}
    if lhs.createdCnt != rhs.createdCnt {return false}
    if lhs.allCnt != rhs.allCnt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentGet, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentGet) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRowType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentRowType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRowType, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_ContentRowType) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PropertyAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyAdd, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PropertyUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyUpdate, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyDel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PropertyDel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyDel, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyDel) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PropertyGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyGet, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyGet) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Property: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Property"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "id"),
    5: .same(proto: "name"),
    6: .standard(proto: "id_Parent"),
    7: .same(proto: "type"),
    8: .same(proto: "typeProperty"),
    9: .same(proto: "valueList"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularStringField(value: &self.id)
      case 5: try decoder.decodeSingularStringField(value: &self.name)
      case 6: try decoder.decodeSingularStringField(value: &self.idParent)
      case 7: try decoder.decodeSingularStringField(value: &self.type)
      case 8: try decoder.decodeSingularStringField(value: &self.typeProperty)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.valueList)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if !self.idParent.isEmpty {
      try visitor.visitSingularStringField(value: self.idParent, fieldNumber: 6)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 7)
    }
    if !self.typeProperty.isEmpty {
      try visitor.visitSingularStringField(value: self.typeProperty, fieldNumber: 8)
    }
    if !self.valueList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.valueList, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Property, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Property) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.idParent != rhs.idParent {return false}
    if lhs.type != rhs.type {return false}
    if lhs.typeProperty != rhs.typeProperty {return false}
    if lhs.valueList != rhs.valueList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PropertyValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "value"),
    3: .same(proto: "type"),
    4: .same(proto: "icon"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      case 3: try decoder.decodeSingularStringField(value: &self.type)
      case 4: try decoder.decodeSingularStringField(value: &self.icon)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 3)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyValue, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyValue) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.value != rhs.value {return false}
    if lhs.type != rhs.type {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PropertyList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "listProperty"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.listProperty)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.listProperty.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.listProperty, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyList, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_PropertyList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.listProperty != rhs.listProperty {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_InfoPolygon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InfoPolygon"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "country"),
    2: .same(proto: "state"),
    3: .same(proto: "city"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.country)
      case 2: try decoder.decodeSingularStringField(value: &self.state)
      case 3: try decoder.decodeSingularStringField(value: &self.city)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.country.isEmpty {
      try visitor.visitSingularStringField(value: self.country, fieldNumber: 1)
    }
    if !self.state.isEmpty {
      try visitor.visitSingularStringField(value: self.state, fieldNumber: 2)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_InfoPolygon, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_InfoPolygon) -> Bool {
    if lhs.country != rhs.country {return false}
    if lhs.state != rhs.state {return false}
    if lhs.city != rhs.city {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CountContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CountContent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "type"),
    5: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.type)
      case 5: try decoder.decodeSingularInt32Field(value: &self.count)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 4)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CountContent, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_CountContent) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.type != rhs.type {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FavLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocation, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocation) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FavLocValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocValue, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocationGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FavLocationGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.values)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocationGet, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_FavLocationGet) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_SubscriberInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .same(proto: "confirmedEmail"),
    3: .same(proto: "claimedEmail"),
    4: .same(proto: "confirmedMobile"),
    5: .same(proto: "claimedMobile"),
    6: .same(proto: "registrationType"),
    7: .same(proto: "insertTime"),
    8: .same(proto: "status"),
    9: .same(proto: "extra"),
    10: .same(proto: "subscriberType"),
    11: .same(proto: "lastLogin"),
    12: .same(proto: "id"),
    13: .same(proto: "roles"),
    14: .same(proto: "statusText"),
    15: .same(proto: "validated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.username)
      case 2: try decoder.decodeSingularStringField(value: &self.confirmedEmail)
      case 3: try decoder.decodeSingularStringField(value: &self.claimedEmail)
      case 4: try decoder.decodeSingularStringField(value: &self.confirmedMobile)
      case 5: try decoder.decodeSingularStringField(value: &self.claimedMobile)
      case 6: try decoder.decodeSingularStringField(value: &self.registrationType)
      case 7: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 8: try decoder.decodeSingularStringField(value: &self.status)
      case 9: try decoder.decodeSingularStringField(value: &self.extra)
      case 10: try decoder.decodeSingularStringField(value: &self.subscriberType)
      case 11: try decoder.decodeSingularStringField(value: &self.lastLogin)
      case 12: try decoder.decodeSingularStringField(value: &self.id)
      case 13: try decoder.decodeRepeatedMessageField(value: &self.roles)
      case 14: try decoder.decodeSingularStringField(value: &self.statusText)
      case 15: try decoder.decodeSingularBoolField(value: &self.validated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.confirmedEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.confirmedEmail, fieldNumber: 2)
    }
    if !self.claimedEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.claimedEmail, fieldNumber: 3)
    }
    if !self.confirmedMobile.isEmpty {
      try visitor.visitSingularStringField(value: self.confirmedMobile, fieldNumber: 4)
    }
    if !self.claimedMobile.isEmpty {
      try visitor.visitSingularStringField(value: self.claimedMobile, fieldNumber: 5)
    }
    if !self.registrationType.isEmpty {
      try visitor.visitSingularStringField(value: self.registrationType, fieldNumber: 6)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 7)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 8)
    }
    if !self.extra.isEmpty {
      try visitor.visitSingularStringField(value: self.extra, fieldNumber: 9)
    }
    if !self.subscriberType.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberType, fieldNumber: 10)
    }
    if !self.lastLogin.isEmpty {
      try visitor.visitSingularStringField(value: self.lastLogin, fieldNumber: 11)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 12)
    }
    if !self.roles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.roles, fieldNumber: 13)
    }
    if !self.statusText.isEmpty {
      try visitor.visitSingularStringField(value: self.statusText, fieldNumber: 14)
    }
    if self.validated != false {
      try visitor.visitSingularBoolField(value: self.validated, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_SubscriberInfo, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_SubscriberInfo) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.confirmedEmail != rhs.confirmedEmail {return false}
    if lhs.claimedEmail != rhs.claimedEmail {return false}
    if lhs.confirmedMobile != rhs.confirmedMobile {return false}
    if lhs.claimedMobile != rhs.claimedMobile {return false}
    if lhs.registrationType != rhs.registrationType {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.status != rhs.status {return false}
    if lhs.extra != rhs.extra {return false}
    if lhs.subscriberType != rhs.subscriberType {return false}
    if lhs.lastLogin != rhs.lastLogin {return false}
    if lhs.id != rhs.id {return false}
    if lhs.roles != rhs.roles {return false}
    if lhs.statusText != rhs.statusText {return false}
    if lhs.validated != rhs.validated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Role: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Role"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "roleId"),
    2: .same(proto: "roleName"),
    3: .same(proto: "appId"),
    4: .same(proto: "appName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.roleID)
      case 2: try decoder.decodeSingularStringField(value: &self.roleName)
      case 3: try decoder.decodeSingularStringField(value: &self.appID)
      case 4: try decoder.decodeSingularStringField(value: &self.appName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.roleID.isEmpty {
      try visitor.visitSingularStringField(value: self.roleID, fieldNumber: 1)
    }
    if !self.roleName.isEmpty {
      try visitor.visitSingularStringField(value: self.roleName, fieldNumber: 2)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 3)
    }
    if !self.appName.isEmpty {
      try visitor.visitSingularStringField(value: self.appName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Role, rhs: Com_Vasl_Vaslapp_Modules_Content_Global_Proto_Holder_Role) -> Bool {
    if lhs.roleID != rhs.roleID {return false}
    if lhs.roleName != rhs.roleName {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.appName != rhs.appName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
