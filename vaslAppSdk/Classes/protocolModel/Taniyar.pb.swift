// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Taniyar.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var enTitle: String {
    get {return _storage._enTitle}
    set {_uniqueStorage()._enTitle = newValue}
  }

  public var faTitle: String {
    get {return _storage._faTitle}
    set {_uniqueStorage()._faTitle = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var hasChildern_p: Bool {
    get {return _storage._hasChildern_p}
    set {_uniqueStorage()._hasChildern_p = newValue}
  }

  public var childs: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories] {
    get {return _storage._childs}
    set {_uniqueStorage()._childs = newValue}
  }

  public var parents: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories] {
    get {return _storage._parents}
    set {_uniqueStorage()._parents = newValue}
  }

  public var imagePath: String {
    get {return _storage._imagePath}
    set {_uniqueStorage()._imagePath = newValue}
  }

  public var urlCode: String {
    get {return _storage._urlCode}
    set {_uniqueStorage()._urlCode = newValue}
  }

  public var attr: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes {
    get {return _storage._attr ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes()}
    set {_uniqueStorage()._attr = newValue}
  }
  /// Returns true if `attr` has been explicitly set.
  public var hasAttr: Bool {return _storage._attr != nil}
  /// Clears the value of `attr`. Subsequent reads from it will return its default value.
  public mutating func clearAttr() {_uniqueStorage()._attr = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getCategories {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categoriesRow] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categoriesRow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rowType: Int32 = 0

  ///string Title = 2;
  public var data: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getCategory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var page: Int32 {
    get {return _storage._page}
    set {_uniqueStorage()._page = newValue}
  }

  public var totalpages: Int64 {
    get {return _storage._totalpages}
    set {_uniqueStorage()._totalpages = newValue}
  }

  public var totalitems: Int64 {
    get {return _storage._totalitems}
    set {_uniqueStorage()._totalitems = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sizes: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults {
    get {return _storage._sizes ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults()}
    set {_uniqueStorage()._sizes = newValue}
  }
  /// Returns true if `sizes` has been explicitly set.
  public var hasSizes: Bool {return _storage._sizes != nil}
  /// Clears the value of `sizes`. Subsequent reads from it will return its default value.
  public mutating func clearSizes() {_uniqueStorage()._sizes = nil}

  public var productTypes: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults {
    get {return _storage._productTypes ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults()}
    set {_uniqueStorage()._productTypes = newValue}
  }
  /// Returns true if `productTypes` has been explicitly set.
  public var hasProductTypes: Bool {return _storage._productTypes != nil}
  /// Clears the value of `productTypes`. Subsequent reads from it will return its default value.
  public mutating func clearProductTypes() {_uniqueStorage()._productTypes = nil}

  public var categoryAttributes: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults] {
    get {return _storage._categoryAttributes}
    set {_uniqueStorage()._categoryAttributes = newValue}
  }

  public var colors: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_colors {
    get {return _storage._colors ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_colors()}
    set {_uniqueStorage()._colors = newValue}
  }
  /// Returns true if `colors` has been explicitly set.
  public var hasColors: Bool {return _storage._colors != nil}
  /// Clears the value of `colors`. Subsequent reads from it will return its default value.
  public mutating func clearColors() {_uniqueStorage()._colors = nil}

  public var categories: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults {
    get {return _storage._categories ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults()}
    set {_uniqueStorage()._categories = newValue}
  }
  /// Returns true if `categories` has been explicitly set.
  public var hasCategories: Bool {return _storage._categories != nil}
  /// Clears the value of `categories`. Subsequent reads from it will return its default value.
  public mutating func clearCategories() {_uniqueStorage()._categories = nil}

  public var statusType: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults {
    get {return _storage._statusType ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults()}
    set {_uniqueStorage()._statusType = newValue}
  }
  /// Returns true if `statusType` has been explicitly set.
  public var hasStatusType: Bool {return _storage._statusType != nil}
  /// Clears the value of `statusType`. Subsequent reads from it will return its default value.
  public mutating func clearStatusType() {_uniqueStorage()._statusType = nil}

  public var sortBy: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults {
    get {return _storage._sortBy ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults()}
    set {_uniqueStorage()._sortBy = newValue}
  }
  /// Returns true if `sortBy` has been explicitly set.
  public var hasSortBy: Bool {return _storage._sortBy != nil}
  /// Clears the value of `sortBy`. Subsequent reads from it will return its default value.
  public mutating func clearSortBy() {_uniqueStorage()._sortBy = nil}

  public var actualURL: String {
    get {return _storage._actualURL}
    set {_uniqueStorage()._actualURL = newValue}
  }

  public var brands: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brands {
    get {return _storage._brands ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brands()}
    set {_uniqueStorage()._brands = newValue}
  }
  /// Returns true if `brands` has been explicitly set.
  public var hasBrands: Bool {return _storage._brands != nil}
  /// Clears the value of `brands`. Subsequent reads from it will return its default value.
  public mutating func clearBrands() {_uniqueStorage()._brands = nil}

  public var slicePrice: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_slicePrice {
    get {return _storage._slicePrice ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_slicePrice()}
    set {_uniqueStorage()._slicePrice = newValue}
  }
  /// Returns true if `slicePrice` has been explicitly set.
  public var hasSlicePrice: Bool {return _storage._slicePrice != nil}
  /// Clears the value of `slicePrice`. Subsequent reads from it will return its default value.
  public mutating func clearSlicePrice() {_uniqueStorage()._slicePrice = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var enTitle: String = String()

  public var faTitle: String = String()

  public var searchValue: String = String()

  public var id: String = String()

  public var group: String = String()

  ///Todo add title
  public var title: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brands {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var attributeItem: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brand] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_color {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var searchValue: String = String()

  public var code: String = String()

  public var hexCode: String = String()

  public var id: String = String()

  ///    string EnTitle = 7;
  ///    string FaTitle =8;
  public var group: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_colors {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var attributeItem: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_color] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var searchValue: String = String()

  public var id: String = String()

  public var group: String = String()

  public var categoryAttributeID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var attributeItem: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefault] = []

  public var type: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_price {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Double = 0

  public var text: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_slicePrice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var minPrice: Int64 = 0

  public var maxPrice: Int64 = 0

  public var attributeItem: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_price] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProducts {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProduct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var page: Int32 {
    get {return _storage._page}
    set {_uniqueStorage()._page = newValue}
  }

  public var totalpages: Int64 {
    get {return _storage._totalpages}
    set {_uniqueStorage()._totalpages = newValue}
  }

  public var totalitems: Int64 {
    get {return _storage._totalitems}
    set {_uniqueStorage()._totalitems = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_product {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_product()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_product {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var enTitle: String {
    get {return _storage._enTitle}
    set {_uniqueStorage()._enTitle = newValue}
  }

  public var faTitle: String {
    get {return _storage._faTitle}
    set {_uniqueStorage()._faTitle = newValue}
  }

  public var brand: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brand {
    get {return _storage._brand ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brand()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  public var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  public mutating func clearBrand() {_uniqueStorage()._brand = nil}

  public var imagePath: String {
    get {return _storage._imagePath}
    set {_uniqueStorage()._imagePath = newValue}
  }

  public var imagePaths: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_imagePaths {
    get {return _storage._imagePaths ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_imagePaths()}
    set {_uniqueStorage()._imagePaths = newValue}
  }
  /// Returns true if `imagePaths` has been explicitly set.
  public var hasImagePaths: Bool {return _storage._imagePaths != nil}
  /// Clears the value of `imagePaths`. Subsequent reads from it will return its default value.
  public mutating func clearImagePaths() {_uniqueStorage()._imagePaths = nil}

  public var likeCounter: Int64 {
    get {return _storage._likeCounter}
    set {_uniqueStorage()._likeCounter = newValue}
  }

  public var userRating: Int64 {
    get {return _storage._userRating}
    set {_uniqueStorage()._userRating = newValue}
  }

  public var viewCounter: Int64 {
    get {return _storage._viewCounter}
    set {_uniqueStorage()._viewCounter = newValue}
  }

  public var rate: Int64 {
    get {return _storage._rate}
    set {_uniqueStorage()._rate = newValue}
  }

  public var favoriteCounter: Int64 {
    get {return _storage._favoriteCounter}
    set {_uniqueStorage()._favoriteCounter = newValue}
  }

  public var category: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories {
    get {return _storage._category ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories()}
    set {_uniqueStorage()._category = newValue}
  }
  /// Returns true if `category` has been explicitly set.
  public var hasCategory: Bool {return _storage._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
  public mutating func clearCategory() {_uniqueStorage()._category = nil}

  public var spec: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_specifications] {
    get {return _storage._spec}
    set {_uniqueStorage()._spec = newValue}
  }

  public var stores: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_store] {
    get {return _storage._stores}
    set {_uniqueStorage()._stores = newValue}
  }

  public var brief: String {
    get {return _storage._brief}
    set {_uniqueStorage()._brief = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var minPrice: Double {
    get {return _storage._minPrice}
    set {_uniqueStorage()._minPrice = newValue}
  }

  public var maxPrice: Double {
    get {return _storage._maxPrice}
    set {_uniqueStorage()._maxPrice = newValue}
  }

  public var maxDiscountPercent: Double {
    get {return _storage._maxDiscountPercent}
    set {_uniqueStorage()._maxDiscountPercent = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var existStatus: Int32 {
    get {return _storage._existStatus}
    set {_uniqueStorage()._existStatus = newValue}
  }

  public var isSpecialOffer: Bool {
    get {return _storage._isSpecialOffer}
    set {_uniqueStorage()._isSpecialOffer = newValue}
  }

  public var isFeatured: Bool {
    get {return _storage._isFeatured}
    set {_uniqueStorage()._isFeatured = newValue}
  }

  public var album: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_album] {
    get {return _storage._album}
    set {_uniqueStorage()._album = newValue}
  }

  public var charts: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_chart {
    get {return _storage._charts ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_chart()}
    set {_uniqueStorage()._charts = newValue}
  }
  /// Returns true if `charts` has been explicitly set.
  public var hasCharts: Bool {return _storage._charts != nil}
  /// Clears the value of `charts`. Subsequent reads from it will return its default value.
  public mutating func clearCharts() {_uniqueStorage()._charts = nil}

  public var maxDiscount: Double {
    get {return _storage._maxDiscount}
    set {_uniqueStorage()._maxDiscount = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rowType: Int32 = 0

  public var title: String = String()

  public var data: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_product] = []

  public var imagePath: String = String()

  public var icon: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_imagePaths {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var original: String = String()

  public var size70: String = String()

  public var size110: String = String()

  public var size180: String = String()

  public var size220: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_album {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productPhotoID: String {
    get {return _storage._productPhotoID}
    set {_uniqueStorage()._productPhotoID = newValue}
  }

  public var imagePaths: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_imagePaths {
    get {return _storage._imagePaths ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_imagePaths()}
    set {_uniqueStorage()._imagePaths = newValue}
  }
  /// Returns true if `imagePaths` has been explicitly set.
  public var hasImagePaths: Bool {return _storage._imagePaths != nil}
  /// Clears the value of `imagePaths`. Subsequent reads from it will return its default value.
  public mutating func clearImagePaths() {_uniqueStorage()._imagePaths = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_spec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: String = String()

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_specifications {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: String = String()

  public var value: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_spec] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_store {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var storeID: String = String()

  public var enTitle: String = String()

  public var faTitle: String = String()

  public var name: String = String()

  public var url: String = String()

  public var isActive: Bool = false

  public var existStatus: Int32 = 0

  public var price: Double = 0

  public var payable: Double = 0

  public var icon: String = String()

  public var banner: String = String()

  public var colors: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_color] = []

  public var key: String = String()

  ///Todo add title
  public var title: String = String()

  public var imagePath: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_chart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var categories: [String] = []

  public var series: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_serie] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_serie {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var step: Bool = false

  public var name: String = String()

  public var data: [Double] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProductByCategory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var page: Int32 {
    get {return _storage._page}
    set {_uniqueStorage()._page = newValue}
  }

  public var totalpages: Int64 {
    get {return _storage._totalpages}
    set {_uniqueStorage()._totalpages = newValue}
  }

  public var totalitems: Int64 {
    get {return _storage._totalitems}
    set {_uniqueStorage()._totalitems = newValue}
  }

  public var data: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow] {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  public var attr: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes {
    get {return _storage._attr ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes()}
    set {_uniqueStorage()._attr = newValue}
  }
  /// Returns true if `attr` has been explicitly set.
  public var hasAttr: Bool {return _storage._attr != nil}
  /// Clears the value of `attr`. Subsequent reads from it will return its default value.
  public mutating func clearAttr() {_uniqueStorage()._attr = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_cleanCashe {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getMainCategoriesPopular {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var productsData: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow] = []

  public var categoriesData: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categoriesRow] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getSubCategoriesPopular {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var page: Int32 {
    get {return _storage._page}
    set {_uniqueStorage()._page = newValue}
  }

  public var totalpages: Int64 {
    get {return _storage._totalpages}
    set {_uniqueStorage()._totalpages = newValue}
  }

  public var totalitems: Int64 {
    get {return _storage._totalitems}
    set {_uniqueStorage()._totalitems = newValue}
  }

  public var productsData: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow] {
    get {return _storage._productsData}
    set {_uniqueStorage()._productsData = newValue}
  }

  public var categoriesData: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categoriesRow] {
    get {return _storage._categoriesData}
    set {_uniqueStorage()._categoriesData = newValue}
  }

  public var attr: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes {
    get {return _storage._attr ?? Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes()}
    set {_uniqueStorage()._attr = newValue}
  }
  /// Returns true if `attr` has been explicitly set.
  public var hasAttr: Bool {return _storage._attr != nil}
  /// Clears the value of `attr`. Subsequent reads from it will return its default value.
  public mutating func clearAttr() {_uniqueStorage()._attr = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getRowType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var categorydata: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categoriesRow] = []

  public var prodactData: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.products.taniyar.model.proto.holder"

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".categories"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Id"),
    2: .same(proto: "EnTitle"),
    3: .same(proto: "FaTitle"),
    4: .same(proto: "Title"),
    5: .same(proto: "hasChildern"),
    6: .same(proto: "Childs"),
    7: .same(proto: "Parents"),
    8: .same(proto: "ImagePath"),
    9: .same(proto: "UrlCode"),
    10: .same(proto: "Attr"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _enTitle: String = String()
    var _faTitle: String = String()
    var _title: String = String()
    var _hasChildern_p: Bool = false
    var _childs: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories] = []
    var _parents: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories] = []
    var _imagePath: String = String()
    var _urlCode: String = String()
    var _attr: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _enTitle = source._enTitle
      _faTitle = source._faTitle
      _title = source._title
      _hasChildern_p = source._hasChildern_p
      _childs = source._childs
      _parents = source._parents
      _imagePath = source._imagePath
      _urlCode = source._urlCode
      _attr = source._attr
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._enTitle)
        case 3: try decoder.decodeSingularStringField(value: &_storage._faTitle)
        case 4: try decoder.decodeSingularStringField(value: &_storage._title)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._hasChildern_p)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._childs)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._parents)
        case 8: try decoder.decodeSingularStringField(value: &_storage._imagePath)
        case 9: try decoder.decodeSingularStringField(value: &_storage._urlCode)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._attr)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._enTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._enTitle, fieldNumber: 2)
      }
      if !_storage._faTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._faTitle, fieldNumber: 3)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 4)
      }
      if _storage._hasChildern_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasChildern_p, fieldNumber: 5)
      }
      if !_storage._childs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._childs, fieldNumber: 6)
      }
      if !_storage._parents.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parents, fieldNumber: 7)
      }
      if !_storage._imagePath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imagePath, fieldNumber: 8)
      }
      if !_storage._urlCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._urlCode, fieldNumber: 9)
      }
      if let v = _storage._attr {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._enTitle != rhs_storage._enTitle {return false}
        if _storage._faTitle != rhs_storage._faTitle {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._hasChildern_p != rhs_storage._hasChildern_p {return false}
        if _storage._childs != rhs_storage._childs {return false}
        if _storage._parents != rhs_storage._parents {return false}
        if _storage._imagePath != rhs_storage._imagePath {return false}
        if _storage._urlCode != rhs_storage._urlCode {return false}
        if _storage._attr != rhs_storage._attr {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getCategories: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".getCategories"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getCategories, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getCategories) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categoriesRow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".categoriesRow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rowType"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.rowType)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rowType != 0 {
      try visitor.visitSingularInt32Field(value: self.rowType, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categoriesRow, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categoriesRow) -> Bool {
    if lhs.rowType != rhs.rowType {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getCategory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".getCategory"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _page: Int32 = 0
    var _totalpages: Int64 = 0
    var _totalitems: Int64 = 0
    var _data: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _page = source._page
      _totalpages = source._totalpages
      _totalitems = source._totalitems
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._page)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._totalpages)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._totalitems)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if _storage._page != 0 {
        try visitor.visitSingularInt32Field(value: _storage._page, fieldNumber: 4)
      }
      if _storage._totalpages != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalpages, fieldNumber: 5)
      }
      if _storage._totalitems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalitems, fieldNumber: 6)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getCategory, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getCategory) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._page != rhs_storage._page {return false}
        if _storage._totalpages != rhs_storage._totalpages {return false}
        if _storage._totalitems != rhs_storage._totalitems {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".attributes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Sizes"),
    2: .same(proto: "ProductTypes"),
    3: .same(proto: "CategoryAttributes"),
    4: .same(proto: "Colors"),
    5: .same(proto: "Categories"),
    6: .same(proto: "StatusType"),
    7: .same(proto: "SortBy"),
    8: .same(proto: "ActualUrl"),
    9: .same(proto: "Brands"),
    10: .same(proto: "SlicePrice"),
  ]

  fileprivate class _StorageClass {
    var _sizes: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults? = nil
    var _productTypes: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults? = nil
    var _categoryAttributes: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults] = []
    var _colors: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_colors? = nil
    var _categories: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults? = nil
    var _statusType: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults? = nil
    var _sortBy: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults? = nil
    var _actualURL: String = String()
    var _brands: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brands? = nil
    var _slicePrice: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_slicePrice? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sizes = source._sizes
      _productTypes = source._productTypes
      _categoryAttributes = source._categoryAttributes
      _colors = source._colors
      _categories = source._categories
      _statusType = source._statusType
      _sortBy = source._sortBy
      _actualURL = source._actualURL
      _brands = source._brands
      _slicePrice = source._slicePrice
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._sizes)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._productTypes)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._categoryAttributes)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._colors)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._categories)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._statusType)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._sortBy)
        case 8: try decoder.decodeSingularStringField(value: &_storage._actualURL)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._brands)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._slicePrice)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._sizes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._productTypes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._categoryAttributes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categoryAttributes, fieldNumber: 3)
      }
      if let v = _storage._colors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._categories {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._statusType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._sortBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._actualURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._actualURL, fieldNumber: 8)
      }
      if let v = _storage._brands {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._slicePrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sizes != rhs_storage._sizes {return false}
        if _storage._productTypes != rhs_storage._productTypes {return false}
        if _storage._categoryAttributes != rhs_storage._categoryAttributes {return false}
        if _storage._colors != rhs_storage._colors {return false}
        if _storage._categories != rhs_storage._categories {return false}
        if _storage._statusType != rhs_storage._statusType {return false}
        if _storage._sortBy != rhs_storage._sortBy {return false}
        if _storage._actualURL != rhs_storage._actualURL {return false}
        if _storage._brands != rhs_storage._brands {return false}
        if _storage._slicePrice != rhs_storage._slicePrice {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".brand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "EnTitle"),
    2: .same(proto: "FaTitle"),
    3: .same(proto: "SearchValue"),
    5: .same(proto: "Id"),
    6: .same(proto: "Group"),
    7: .same(proto: "Title"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.enTitle)
      case 2: try decoder.decodeSingularStringField(value: &self.faTitle)
      case 3: try decoder.decodeSingularStringField(value: &self.searchValue)
      case 5: try decoder.decodeSingularStringField(value: &self.id)
      case 6: try decoder.decodeSingularStringField(value: &self.group)
      case 7: try decoder.decodeSingularStringField(value: &self.title)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.enTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.enTitle, fieldNumber: 1)
    }
    if !self.faTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.faTitle, fieldNumber: 2)
    }
    if !self.searchValue.isEmpty {
      try visitor.visitSingularStringField(value: self.searchValue, fieldNumber: 3)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 5)
    }
    if !self.group.isEmpty {
      try visitor.visitSingularStringField(value: self.group, fieldNumber: 6)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brand, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brand) -> Bool {
    if lhs.enTitle != rhs.enTitle {return false}
    if lhs.faTitle != rhs.faTitle {return false}
    if lhs.searchValue != rhs.searchValue {return false}
    if lhs.id != rhs.id {return false}
    if lhs.group != rhs.group {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brands: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".brands"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Title"),
    2: .same(proto: "AttributeItem"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attributeItem)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.attributeItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributeItem, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brands, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brands) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.attributeItem != rhs.attributeItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".color"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Title"),
    2: .same(proto: "SearchValue"),
    3: .same(proto: "Code"),
    4: .same(proto: "HexCode"),
    5: .same(proto: "Id"),
    6: .same(proto: "Group"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.searchValue)
      case 3: try decoder.decodeSingularStringField(value: &self.code)
      case 4: try decoder.decodeSingularStringField(value: &self.hexCode)
      case 5: try decoder.decodeSingularStringField(value: &self.id)
      case 6: try decoder.decodeSingularStringField(value: &self.group)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.searchValue.isEmpty {
      try visitor.visitSingularStringField(value: self.searchValue, fieldNumber: 2)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 3)
    }
    if !self.hexCode.isEmpty {
      try visitor.visitSingularStringField(value: self.hexCode, fieldNumber: 4)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 5)
    }
    if !self.group.isEmpty {
      try visitor.visitSingularStringField(value: self.group, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_color, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_color) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.searchValue != rhs.searchValue {return false}
    if lhs.code != rhs.code {return false}
    if lhs.hexCode != rhs.hexCode {return false}
    if lhs.id != rhs.id {return false}
    if lhs.group != rhs.group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_colors: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".colors"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Title"),
    2: .same(proto: "AttributeItem"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attributeItem)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.attributeItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributeItem, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_colors, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_colors) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.attributeItem != rhs.attributeItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".attrDefault"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Title"),
    2: .same(proto: "SearchValue"),
    3: .same(proto: "Id"),
    4: .same(proto: "Group"),
    5: .same(proto: "CategoryAttributeId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.searchValue)
      case 3: try decoder.decodeSingularStringField(value: &self.id)
      case 4: try decoder.decodeSingularStringField(value: &self.group)
      case 5: try decoder.decodeSingularStringField(value: &self.categoryAttributeID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.searchValue.isEmpty {
      try visitor.visitSingularStringField(value: self.searchValue, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    if !self.group.isEmpty {
      try visitor.visitSingularStringField(value: self.group, fieldNumber: 4)
    }
    if !self.categoryAttributeID.isEmpty {
      try visitor.visitSingularStringField(value: self.categoryAttributeID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefault, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefault) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.searchValue != rhs.searchValue {return false}
    if lhs.id != rhs.id {return false}
    if lhs.group != rhs.group {return false}
    if lhs.categoryAttributeID != rhs.categoryAttributeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".attrDefaults"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Title"),
    2: .same(proto: "AttributeItem"),
    3: .same(proto: "Type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attributeItem)
      case 3: try decoder.decodeSingularInt32Field(value: &self.type)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.attributeItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributeItem, fieldNumber: 2)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attrDefaults) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.attributeItem != rhs.attributeItem {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_price: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".price"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Value"),
    2: .same(proto: "Text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.value)
      case 2: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_price, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_price) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_slicePrice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".slicePrice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Title"),
    2: .same(proto: "MinPrice"),
    3: .same(proto: "MaxPrice"),
    4: .same(proto: "AttributeItem"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularInt64Field(value: &self.minPrice)
      case 3: try decoder.decodeSingularInt64Field(value: &self.maxPrice)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.attributeItem)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if self.minPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.minPrice, fieldNumber: 2)
    }
    if self.maxPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.maxPrice, fieldNumber: 3)
    }
    if !self.attributeItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributeItem, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_slicePrice, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_slicePrice) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.minPrice != rhs.minPrice {return false}
    if lhs.maxPrice != rhs.maxPrice {return false}
    if lhs.attributeItem != rhs.attributeItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProducts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".getProducts"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProducts, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProducts) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProduct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".getProduct"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _page: Int32 = 0
    var _totalpages: Int64 = 0
    var _totalitems: Int64 = 0
    var _data: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_product? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _page = source._page
      _totalpages = source._totalpages
      _totalitems = source._totalitems
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._page)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._totalpages)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._totalitems)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if _storage._page != 0 {
        try visitor.visitSingularInt32Field(value: _storage._page, fieldNumber: 4)
      }
      if _storage._totalpages != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalpages, fieldNumber: 5)
      }
      if _storage._totalitems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalitems, fieldNumber: 6)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProduct, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProduct) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._page != rhs_storage._page {return false}
        if _storage._totalpages != rhs_storage._totalpages {return false}
        if _storage._totalitems != rhs_storage._totalitems {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_product: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".product"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Id"),
    2: .same(proto: "EnTitle"),
    3: .same(proto: "FaTitle"),
    4: .same(proto: "Brand"),
    5: .same(proto: "ImagePath"),
    6: .same(proto: "ImagePaths"),
    7: .same(proto: "LikeCounter"),
    8: .same(proto: "UserRating"),
    9: .same(proto: "ViewCounter"),
    10: .same(proto: "Rate"),
    11: .same(proto: "FavoriteCounter"),
    12: .same(proto: "Category"),
    13: .same(proto: "Spec"),
    14: .same(proto: "Stores"),
    15: .same(proto: "Brief"),
    16: .same(proto: "Description"),
    17: .same(proto: "MinPrice"),
    18: .same(proto: "MaxPrice"),
    19: .same(proto: "MaxDiscountPercent"),
    20: .same(proto: "Title"),
    21: .same(proto: "url"),
    22: .same(proto: "ExistStatus"),
    23: .same(proto: "IsSpecialOffer"),
    24: .same(proto: "IsFeatured"),
    25: .same(proto: "Album"),
    26: .same(proto: "Charts"),
    27: .same(proto: "MaxDiscount"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _enTitle: String = String()
    var _faTitle: String = String()
    var _brand: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_brand? = nil
    var _imagePath: String = String()
    var _imagePaths: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_imagePaths? = nil
    var _likeCounter: Int64 = 0
    var _userRating: Int64 = 0
    var _viewCounter: Int64 = 0
    var _rate: Int64 = 0
    var _favoriteCounter: Int64 = 0
    var _category: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categories? = nil
    var _spec: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_specifications] = []
    var _stores: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_store] = []
    var _brief: String = String()
    var _description_p: String = String()
    var _minPrice: Double = 0
    var _maxPrice: Double = 0
    var _maxDiscountPercent: Double = 0
    var _title: String = String()
    var _url: String = String()
    var _existStatus: Int32 = 0
    var _isSpecialOffer: Bool = false
    var _isFeatured: Bool = false
    var _album: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_album] = []
    var _charts: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_chart? = nil
    var _maxDiscount: Double = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _enTitle = source._enTitle
      _faTitle = source._faTitle
      _brand = source._brand
      _imagePath = source._imagePath
      _imagePaths = source._imagePaths
      _likeCounter = source._likeCounter
      _userRating = source._userRating
      _viewCounter = source._viewCounter
      _rate = source._rate
      _favoriteCounter = source._favoriteCounter
      _category = source._category
      _spec = source._spec
      _stores = source._stores
      _brief = source._brief
      _description_p = source._description_p
      _minPrice = source._minPrice
      _maxPrice = source._maxPrice
      _maxDiscountPercent = source._maxDiscountPercent
      _title = source._title
      _url = source._url
      _existStatus = source._existStatus
      _isSpecialOffer = source._isSpecialOffer
      _isFeatured = source._isFeatured
      _album = source._album
      _charts = source._charts
      _maxDiscount = source._maxDiscount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._enTitle)
        case 3: try decoder.decodeSingularStringField(value: &_storage._faTitle)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._brand)
        case 5: try decoder.decodeSingularStringField(value: &_storage._imagePath)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._imagePaths)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._likeCounter)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._userRating)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._viewCounter)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._rate)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._favoriteCounter)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._category)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._spec)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._stores)
        case 15: try decoder.decodeSingularStringField(value: &_storage._brief)
        case 16: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 17: try decoder.decodeSingularDoubleField(value: &_storage._minPrice)
        case 18: try decoder.decodeSingularDoubleField(value: &_storage._maxPrice)
        case 19: try decoder.decodeSingularDoubleField(value: &_storage._maxDiscountPercent)
        case 20: try decoder.decodeSingularStringField(value: &_storage._title)
        case 21: try decoder.decodeSingularStringField(value: &_storage._url)
        case 22: try decoder.decodeSingularInt32Field(value: &_storage._existStatus)
        case 23: try decoder.decodeSingularBoolField(value: &_storage._isSpecialOffer)
        case 24: try decoder.decodeSingularBoolField(value: &_storage._isFeatured)
        case 25: try decoder.decodeRepeatedMessageField(value: &_storage._album)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._charts)
        case 27: try decoder.decodeSingularDoubleField(value: &_storage._maxDiscount)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._enTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._enTitle, fieldNumber: 2)
      }
      if !_storage._faTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._faTitle, fieldNumber: 3)
      }
      if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._imagePath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imagePath, fieldNumber: 5)
      }
      if let v = _storage._imagePaths {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._likeCounter != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likeCounter, fieldNumber: 7)
      }
      if _storage._userRating != 0 {
        try visitor.visitSingularInt64Field(value: _storage._userRating, fieldNumber: 8)
      }
      if _storage._viewCounter != 0 {
        try visitor.visitSingularInt64Field(value: _storage._viewCounter, fieldNumber: 9)
      }
      if _storage._rate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._rate, fieldNumber: 10)
      }
      if _storage._favoriteCounter != 0 {
        try visitor.visitSingularInt64Field(value: _storage._favoriteCounter, fieldNumber: 11)
      }
      if let v = _storage._category {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if !_storage._spec.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._spec, fieldNumber: 13)
      }
      if !_storage._stores.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stores, fieldNumber: 14)
      }
      if !_storage._brief.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brief, fieldNumber: 15)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 16)
      }
      if _storage._minPrice != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minPrice, fieldNumber: 17)
      }
      if _storage._maxPrice != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maxPrice, fieldNumber: 18)
      }
      if _storage._maxDiscountPercent != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maxDiscountPercent, fieldNumber: 19)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 20)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 21)
      }
      if _storage._existStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._existStatus, fieldNumber: 22)
      }
      if _storage._isSpecialOffer != false {
        try visitor.visitSingularBoolField(value: _storage._isSpecialOffer, fieldNumber: 23)
      }
      if _storage._isFeatured != false {
        try visitor.visitSingularBoolField(value: _storage._isFeatured, fieldNumber: 24)
      }
      if !_storage._album.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._album, fieldNumber: 25)
      }
      if let v = _storage._charts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if _storage._maxDiscount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maxDiscount, fieldNumber: 27)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_product, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_product) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._enTitle != rhs_storage._enTitle {return false}
        if _storage._faTitle != rhs_storage._faTitle {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._imagePath != rhs_storage._imagePath {return false}
        if _storage._imagePaths != rhs_storage._imagePaths {return false}
        if _storage._likeCounter != rhs_storage._likeCounter {return false}
        if _storage._userRating != rhs_storage._userRating {return false}
        if _storage._viewCounter != rhs_storage._viewCounter {return false}
        if _storage._rate != rhs_storage._rate {return false}
        if _storage._favoriteCounter != rhs_storage._favoriteCounter {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._stores != rhs_storage._stores {return false}
        if _storage._brief != rhs_storage._brief {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._minPrice != rhs_storage._minPrice {return false}
        if _storage._maxPrice != rhs_storage._maxPrice {return false}
        if _storage._maxDiscountPercent != rhs_storage._maxDiscountPercent {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._existStatus != rhs_storage._existStatus {return false}
        if _storage._isSpecialOffer != rhs_storage._isSpecialOffer {return false}
        if _storage._isFeatured != rhs_storage._isFeatured {return false}
        if _storage._album != rhs_storage._album {return false}
        if _storage._charts != rhs_storage._charts {return false}
        if _storage._maxDiscount != rhs_storage._maxDiscount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".productRow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rowType"),
    2: .same(proto: "Title"),
    3: .same(proto: "data"),
    4: .same(proto: "imagePath"),
    5: .same(proto: "icon"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.rowType)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 4: try decoder.decodeSingularStringField(value: &self.imagePath)
      case 5: try decoder.decodeSingularStringField(value: &self.icon)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rowType != 0 {
      try visitor.visitSingularInt32Field(value: self.rowType, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 3)
    }
    if !self.imagePath.isEmpty {
      try visitor.visitSingularStringField(value: self.imagePath, fieldNumber: 4)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow) -> Bool {
    if lhs.rowType != rhs.rowType {return false}
    if lhs.title != rhs.title {return false}
    if lhs.data != rhs.data {return false}
    if lhs.imagePath != rhs.imagePath {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_imagePaths: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".imagePaths"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Original"),
    2: .same(proto: "Size70"),
    3: .same(proto: "Size110"),
    4: .same(proto: "Size180"),
    5: .same(proto: "Size220"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.original)
      case 2: try decoder.decodeSingularStringField(value: &self.size70)
      case 3: try decoder.decodeSingularStringField(value: &self.size110)
      case 4: try decoder.decodeSingularStringField(value: &self.size180)
      case 5: try decoder.decodeSingularStringField(value: &self.size220)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.original.isEmpty {
      try visitor.visitSingularStringField(value: self.original, fieldNumber: 1)
    }
    if !self.size70.isEmpty {
      try visitor.visitSingularStringField(value: self.size70, fieldNumber: 2)
    }
    if !self.size110.isEmpty {
      try visitor.visitSingularStringField(value: self.size110, fieldNumber: 3)
    }
    if !self.size180.isEmpty {
      try visitor.visitSingularStringField(value: self.size180, fieldNumber: 4)
    }
    if !self.size220.isEmpty {
      try visitor.visitSingularStringField(value: self.size220, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_imagePaths, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_imagePaths) -> Bool {
    if lhs.original != rhs.original {return false}
    if lhs.size70 != rhs.size70 {return false}
    if lhs.size110 != rhs.size110 {return false}
    if lhs.size180 != rhs.size180 {return false}
    if lhs.size220 != rhs.size220 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_album: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".album"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProductPhotoId"),
    2: .same(proto: "ImagePaths"),
  ]

  fileprivate class _StorageClass {
    var _productPhotoID: String = String()
    var _imagePaths: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_imagePaths? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _productPhotoID = source._productPhotoID
      _imagePaths = source._imagePaths
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._productPhotoID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._imagePaths)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._productPhotoID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productPhotoID, fieldNumber: 1)
      }
      if let v = _storage._imagePaths {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_album, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_album) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._productPhotoID != rhs_storage._productPhotoID {return false}
        if _storage._imagePaths != rhs_storage._imagePaths {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_spec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".spec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_spec, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_spec) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_specifications: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".specifications"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_specifications, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_specifications) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_store: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".store"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Id"),
    2: .same(proto: "storeId"),
    3: .same(proto: "EnTitle"),
    4: .same(proto: "FaTitle"),
    5: .same(proto: "name"),
    6: .same(proto: "Url"),
    7: .same(proto: "IsActive"),
    8: .same(proto: "ExistStatus"),
    9: .same(proto: "Price"),
    10: .same(proto: "Payable"),
    11: .same(proto: "icon"),
    12: .same(proto: "banner"),
    13: .same(proto: "Colors"),
    14: .same(proto: "key"),
    15: .same(proto: "Title"),
    16: .same(proto: "ImagePath"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.storeID)
      case 3: try decoder.decodeSingularStringField(value: &self.enTitle)
      case 4: try decoder.decodeSingularStringField(value: &self.faTitle)
      case 5: try decoder.decodeSingularStringField(value: &self.name)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      case 7: try decoder.decodeSingularBoolField(value: &self.isActive)
      case 8: try decoder.decodeSingularInt32Field(value: &self.existStatus)
      case 9: try decoder.decodeSingularDoubleField(value: &self.price)
      case 10: try decoder.decodeSingularDoubleField(value: &self.payable)
      case 11: try decoder.decodeSingularStringField(value: &self.icon)
      case 12: try decoder.decodeSingularStringField(value: &self.banner)
      case 13: try decoder.decodeRepeatedMessageField(value: &self.colors)
      case 14: try decoder.decodeSingularStringField(value: &self.key)
      case 15: try decoder.decodeSingularStringField(value: &self.title)
      case 16: try decoder.decodeSingularStringField(value: &self.imagePath)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.storeID.isEmpty {
      try visitor.visitSingularStringField(value: self.storeID, fieldNumber: 2)
    }
    if !self.enTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.enTitle, fieldNumber: 3)
    }
    if !self.faTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.faTitle, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    if self.isActive != false {
      try visitor.visitSingularBoolField(value: self.isActive, fieldNumber: 7)
    }
    if self.existStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.existStatus, fieldNumber: 8)
    }
    if self.price != 0 {
      try visitor.visitSingularDoubleField(value: self.price, fieldNumber: 9)
    }
    if self.payable != 0 {
      try visitor.visitSingularDoubleField(value: self.payable, fieldNumber: 10)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 11)
    }
    if !self.banner.isEmpty {
      try visitor.visitSingularStringField(value: self.banner, fieldNumber: 12)
    }
    if !self.colors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.colors, fieldNumber: 13)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 14)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 15)
    }
    if !self.imagePath.isEmpty {
      try visitor.visitSingularStringField(value: self.imagePath, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_store, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_store) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.storeID != rhs.storeID {return false}
    if lhs.enTitle != rhs.enTitle {return false}
    if lhs.faTitle != rhs.faTitle {return false}
    if lhs.name != rhs.name {return false}
    if lhs.url != rhs.url {return false}
    if lhs.isActive != rhs.isActive {return false}
    if lhs.existStatus != rhs.existStatus {return false}
    if lhs.price != rhs.price {return false}
    if lhs.payable != rhs.payable {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.banner != rhs.banner {return false}
    if lhs.colors != rhs.colors {return false}
    if lhs.key != rhs.key {return false}
    if lhs.title != rhs.title {return false}
    if lhs.imagePath != rhs.imagePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_chart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".chart"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Categories"),
    3: .same(proto: "Series"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.categories)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.series)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.categories.isEmpty {
      try visitor.visitRepeatedStringField(value: self.categories, fieldNumber: 1)
    }
    if !self.series.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.series, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_chart, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_chart) -> Bool {
    if lhs.categories != rhs.categories {return false}
    if lhs.series != rhs.series {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_serie: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".serie"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "step"),
    2: .same(proto: "name"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.step)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeRepeatedDoubleField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.step != false {
      try visitor.visitSingularBoolField(value: self.step, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitPackedDoubleField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_serie, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_serie) -> Bool {
    if lhs.step != rhs.step {return false}
    if lhs.name != rhs.name {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProductByCategory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".getProductByCategory"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
    8: .same(proto: "attr"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _page: Int32 = 0
    var _totalpages: Int64 = 0
    var _totalitems: Int64 = 0
    var _data: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow] = []
    var _attr: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _page = source._page
      _totalpages = source._totalpages
      _totalitems = source._totalitems
      _data = source._data
      _attr = source._attr
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._page)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._totalpages)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._totalitems)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._data)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._attr)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if _storage._page != 0 {
        try visitor.visitSingularInt32Field(value: _storage._page, fieldNumber: 4)
      }
      if _storage._totalpages != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalpages, fieldNumber: 5)
      }
      if _storage._totalitems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalitems, fieldNumber: 6)
      }
      if !_storage._data.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._data, fieldNumber: 7)
      }
      if let v = _storage._attr {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProductByCategory, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getProductByCategory) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._page != rhs_storage._page {return false}
        if _storage._totalpages != rhs_storage._totalpages {return false}
        if _storage._totalitems != rhs_storage._totalitems {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._attr != rhs_storage._attr {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_cleanCashe: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".cleanCashe"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_cleanCashe, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_cleanCashe) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getMainCategoriesPopular: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".getMainCategoriesPopular"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "productsData"),
    8: .same(proto: "categoriesData"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.productsData)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.categoriesData)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.productsData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productsData, fieldNumber: 7)
    }
    if !self.categoriesData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categoriesData, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getMainCategoriesPopular, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getMainCategoriesPopular) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.productsData != rhs.productsData {return false}
    if lhs.categoriesData != rhs.categoriesData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getSubCategoriesPopular: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".getSubCategoriesPopular"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "productsData"),
    8: .same(proto: "categoriesData"),
    9: .same(proto: "attr"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _page: Int32 = 0
    var _totalpages: Int64 = 0
    var _totalitems: Int64 = 0
    var _productsData: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_productRow] = []
    var _categoriesData: [Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_categoriesRow] = []
    var _attr: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_attributes? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _page = source._page
      _totalpages = source._totalpages
      _totalitems = source._totalitems
      _productsData = source._productsData
      _categoriesData = source._categoriesData
      _attr = source._attr
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._page)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._totalpages)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._totalitems)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._productsData)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._categoriesData)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._attr)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if _storage._page != 0 {
        try visitor.visitSingularInt32Field(value: _storage._page, fieldNumber: 4)
      }
      if _storage._totalpages != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalpages, fieldNumber: 5)
      }
      if _storage._totalitems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalitems, fieldNumber: 6)
      }
      if !_storage._productsData.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._productsData, fieldNumber: 7)
      }
      if !_storage._categoriesData.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categoriesData, fieldNumber: 8)
      }
      if let v = _storage._attr {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getSubCategoriesPopular, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getSubCategoriesPopular) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._page != rhs_storage._page {return false}
        if _storage._totalpages != rhs_storage._totalpages {return false}
        if _storage._totalitems != rhs_storage._totalitems {return false}
        if _storage._productsData != rhs_storage._productsData {return false}
        if _storage._categoriesData != rhs_storage._categoriesData {return false}
        if _storage._attr != rhs_storage._attr {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getRowType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".getRowType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "categorydata"),
    8: .same(proto: "prodactData"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.categorydata)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.prodactData)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.categorydata.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categorydata, fieldNumber: 7)
    }
    if !self.prodactData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.prodactData, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getRowType, rhs: Com_Vasl_Vaslapp_Products_Taniyar_Model_Proto_Holder_getRowType) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.categorydata != rhs.categorydata {return false}
    if lhs.prodactData != rhs.prodactData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
