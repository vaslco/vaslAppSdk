// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Navaz.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberFollow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberUnfollow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressDefault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberContactsUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberSearchList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistTrackList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistAlbumList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistVideoList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackFeaturedChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackLikeAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackLikeRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDislikeAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDislikeRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackSearchList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoFeaturedChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoLikeAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoLikeRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDislikeAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDislikeRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoSearchList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistFeaturedChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistLikeAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistLikeRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDislikeAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDislikeRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistSearchList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryFollow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryUnfollow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategorySearchList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodFollow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodUnfollow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodSearchList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageSectionAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageSectionRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionActive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Subscription {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Subscription()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartValidate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem] = []

  public var isValid: Bool = false

  public var address: String = String()

  public var count: Int32 = 0

  public var priceSend: Int64 = 0

  public var priceTotal: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartRegister {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var orderID: String = String()

  public var bankURL: String = String()

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem] = []

  public var nextStatus: String = String()

  public var address: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopOrdersComplete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistAdd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemRemove {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var remainingCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemClear {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var price: Int64 = 0

  public var count: Int32 = 0

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItemValidate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem {
    get {return _storage._data ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopOrdersList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var page: Int32 = 0

  public var totalpages: Int64 = 0

  public var totalitems: Int64 = 0

  /// string statusMSG = 8;
  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_OrdersItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SearchAll {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var artists: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []

  public var subscribers: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []

  public var playlists: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist] = []

  public var tracks: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track] = []

  public var videos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video] = []

  public var categories: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] = []

  public var moods: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

////////////////////////////////////////////////////////////////////////////////
public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var link: String {
    get {return _storage._link}
    set {_uniqueStorage()._link = newValue}
  }

  public var linkShare: String {
    get {return _storage._linkShare}
    set {_uniqueStorage()._linkShare = newValue}
  }

  public var linkHls: String {
    get {return _storage._linkHls}
    set {_uniqueStorage()._linkHls = newValue}
  }

  public var links: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link] {
    get {return _storage._links}
    set {_uniqueStorage()._links = newValue}
  }

  public var linksHls: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link] {
    get {return _storage._linksHls}
    set {_uniqueStorage()._linksHls = newValue}
  }

  public var photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] {
    get {return _storage._photos}
    set {_uniqueStorage()._photos = newValue}
  }

  public var artists: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._artists}
    set {_uniqueStorage()._artists = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var plays: Int64 {
    get {return _storage._plays}
    set {_uniqueStorage()._plays = newValue}
  }

  public var likes: Int64 {
    get {return _storage._likes}
    set {_uniqueStorage()._likes = newValue}
  }

  public var dislikes: Int64 {
    get {return _storage._dislikes}
    set {_uniqueStorage()._dislikes = newValue}
  }

  public var downloads: Int64 {
    get {return _storage._downloads}
    set {_uniqueStorage()._downloads = newValue}
  }

  public var comments: Int64 {
    get {return _storage._comments}
    set {_uniqueStorage()._comments = newValue}
  }

  public var commentsTop: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment] {
    get {return _storage._commentsTop}
    set {_uniqueStorage()._commentsTop = newValue}
  }

  public var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var createdBy: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._createdBy ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._createdBy = newValue}
  }
  /// Returns true if `createdBy` has been explicitly set.
  public var hasCreatedBy: Bool {return _storage._createdBy != nil}
  /// Clears the value of `createdBy`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedBy() {_uniqueStorage()._createdBy = nil}

  public var lyrics: String {
    get {return _storage._lyrics}
    set {_uniqueStorage()._lyrics = newValue}
  }

  public var album: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._album ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._album = newValue}
  }
  /// Returns true if `album` has been explicitly set.
  public var hasAlbum: Bool {return _storage._album != nil}
  /// Clears the value of `album`. Subsequent reads from it will return its default value.
  public mutating func clearAlbum() {_uniqueStorage()._album = nil}

  public var producers: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._producers}
    set {_uniqueStorage()._producers = newValue}
  }

  public var publishers: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._publishers}
    set {_uniqueStorage()._publishers = newValue}
  }

  public var mixedBys: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._mixedBys}
    set {_uniqueStorage()._mixedBys = newValue}
  }

  public var coverBys: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._coverBys}
    set {_uniqueStorage()._coverBys = newValue}
  }

  public var lyricsBys: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._lyricsBys}
    set {_uniqueStorage()._lyricsBys = newValue}
  }

  public var categories: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  public var moods: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] {
    get {return _storage._moods}
    set {_uniqueStorage()._moods = newValue}
  }

  public var onlineShopEnable: Bool {
    get {return _storage._onlineShopEnable}
    set {_uniqueStorage()._onlineShopEnable = newValue}
  }

  public var onlineShopPrice: Int64 {
    get {return _storage._onlineShopPrice}
    set {_uniqueStorage()._onlineShopPrice = newValue}
  }

  public var physicalShopEnable: Bool {
    get {return _storage._physicalShopEnable}
    set {_uniqueStorage()._physicalShopEnable = newValue}
  }

  public var physicalShopPrice: Int64 {
    get {return _storage._physicalShopPrice}
    set {_uniqueStorage()._physicalShopPrice = newValue}
  }

  public var physicalShopCount: Int32 {
    get {return _storage._physicalShopCount}
    set {_uniqueStorage()._physicalShopCount = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var videoCount: Int32 {
    get {return _storage._videoCount}
    set {_uniqueStorage()._videoCount = newValue}
  }

  public var videos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video] {
    get {return _storage._videos}
    set {_uniqueStorage()._videos = newValue}
  }

  public var isLiked: Bool {
    get {return _storage._isLiked}
    set {_uniqueStorage()._isLiked = newValue}
  }

  public var isDisliked: Bool {
    get {return _storage._isDisliked}
    set {_uniqueStorage()._isDisliked = newValue}
  }

  public var titleEnglish: String {
    get {return _storage._titleEnglish}
    set {_uniqueStorage()._titleEnglish = newValue}
  }

  public var commentsDisabled: Bool {
    get {return _storage._commentsDisabled}
    set {_uniqueStorage()._commentsDisabled = newValue}
  }

  public var featured: Bool {
    get {return _storage._featured}
    set {_uniqueStorage()._featured = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var link: String {
    get {return _storage._link}
    set {_uniqueStorage()._link = newValue}
  }

  public var linkShare: String {
    get {return _storage._linkShare}
    set {_uniqueStorage()._linkShare = newValue}
  }

  public var linkHls: String {
    get {return _storage._linkHls}
    set {_uniqueStorage()._linkHls = newValue}
  }

  public var links: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link] {
    get {return _storage._links}
    set {_uniqueStorage()._links = newValue}
  }

  public var linksHls: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link] {
    get {return _storage._linksHls}
    set {_uniqueStorage()._linksHls = newValue}
  }

  public var photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] {
    get {return _storage._photos}
    set {_uniqueStorage()._photos = newValue}
  }

  public var track: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track {
    get {return _storage._track ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track()}
    set {_uniqueStorage()._track = newValue}
  }
  /// Returns true if `track` has been explicitly set.
  public var hasTrack: Bool {return _storage._track != nil}
  /// Clears the value of `track`. Subsequent reads from it will return its default value.
  public mutating func clearTrack() {_uniqueStorage()._track = nil}

  public var artists: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._artists}
    set {_uniqueStorage()._artists = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var plays: Int64 {
    get {return _storage._plays}
    set {_uniqueStorage()._plays = newValue}
  }

  public var likes: Int64 {
    get {return _storage._likes}
    set {_uniqueStorage()._likes = newValue}
  }

  public var dislikes: Int64 {
    get {return _storage._dislikes}
    set {_uniqueStorage()._dislikes = newValue}
  }

  public var downloads: Int64 {
    get {return _storage._downloads}
    set {_uniqueStorage()._downloads = newValue}
  }

  public var comments: Int64 {
    get {return _storage._comments}
    set {_uniqueStorage()._comments = newValue}
  }

  public var commentsTop: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment] {
    get {return _storage._commentsTop}
    set {_uniqueStorage()._commentsTop = newValue}
  }

  public var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var createdBy: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._createdBy ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._createdBy = newValue}
  }
  /// Returns true if `createdBy` has been explicitly set.
  public var hasCreatedBy: Bool {return _storage._createdBy != nil}
  /// Clears the value of `createdBy`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedBy() {_uniqueStorage()._createdBy = nil}

  public var subtitle: String {
    get {return _storage._subtitle}
    set {_uniqueStorage()._subtitle = newValue}
  }

  public var album: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._album ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._album = newValue}
  }
  /// Returns true if `album` has been explicitly set.
  public var hasAlbum: Bool {return _storage._album != nil}
  /// Clears the value of `album`. Subsequent reads from it will return its default value.
  public mutating func clearAlbum() {_uniqueStorage()._album = nil}

  public var producers: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._producers}
    set {_uniqueStorage()._producers = newValue}
  }

  public var publishers: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._publishers}
    set {_uniqueStorage()._publishers = newValue}
  }

  public var mixedBys: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._mixedBys}
    set {_uniqueStorage()._mixedBys = newValue}
  }

  public var subtitleBys: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._subtitleBys}
    set {_uniqueStorage()._subtitleBys = newValue}
  }

  public var categories: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  public var moods: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] {
    get {return _storage._moods}
    set {_uniqueStorage()._moods = newValue}
  }

  public var onlineShopEnable: Bool {
    get {return _storage._onlineShopEnable}
    set {_uniqueStorage()._onlineShopEnable = newValue}
  }

  public var onlineShopPrice: Int64 {
    get {return _storage._onlineShopPrice}
    set {_uniqueStorage()._onlineShopPrice = newValue}
  }

  public var physicalShopEnable: Bool {
    get {return _storage._physicalShopEnable}
    set {_uniqueStorage()._physicalShopEnable = newValue}
  }

  public var physicalShopPrice: Int64 {
    get {return _storage._physicalShopPrice}
    set {_uniqueStorage()._physicalShopPrice = newValue}
  }

  public var physicalShopCount: Int32 {
    get {return _storage._physicalShopCount}
    set {_uniqueStorage()._physicalShopCount = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var isLiked: Bool {
    get {return _storage._isLiked}
    set {_uniqueStorage()._isLiked = newValue}
  }

  public var isDisliked: Bool {
    get {return _storage._isDisliked}
    set {_uniqueStorage()._isDisliked = newValue}
  }

  public var titleEnglish: String {
    get {return _storage._titleEnglish}
    set {_uniqueStorage()._titleEnglish = newValue}
  }

  public var commentsDisabled: Bool {
    get {return _storage._commentsDisabled}
    set {_uniqueStorage()._commentsDisabled = newValue}
  }

  public var featured: Bool {
    get {return _storage._featured}
    set {_uniqueStorage()._featured = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var subType: String {
    get {return _storage._subType}
    set {_uniqueStorage()._subType = newValue}
  }

  public var linkShare: String {
    get {return _storage._linkShare}
    set {_uniqueStorage()._linkShare = newValue}
  }

  public var photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] {
    get {return _storage._photos}
    set {_uniqueStorage()._photos = newValue}
  }

  public var items: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  public var itemCount: Int32 {
    get {return _storage._itemCount}
    set {_uniqueStorage()._itemCount = newValue}
  }

  public var artists: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._artists}
    set {_uniqueStorage()._artists = newValue}
  }

  public var followers: Int64 {
    get {return _storage._followers}
    set {_uniqueStorage()._followers = newValue}
  }

  public var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var createdBy: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._createdBy}
    set {_uniqueStorage()._createdBy = newValue}
  }

  public var coverBy: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._coverBy}
    set {_uniqueStorage()._coverBy = newValue}
  }

  public var categories: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  public var moods: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] {
    get {return _storage._moods}
    set {_uniqueStorage()._moods = newValue}
  }

  public var onlineShopEnable: Bool {
    get {return _storage._onlineShopEnable}
    set {_uniqueStorage()._onlineShopEnable = newValue}
  }

  public var onlineShopPrice: Int64 {
    get {return _storage._onlineShopPrice}
    set {_uniqueStorage()._onlineShopPrice = newValue}
  }

  public var physicalShopEnable: Bool {
    get {return _storage._physicalShopEnable}
    set {_uniqueStorage()._physicalShopEnable = newValue}
  }

  public var physicalShopPrice: Int64 {
    get {return _storage._physicalShopPrice}
    set {_uniqueStorage()._physicalShopPrice = newValue}
  }

  public var physicalShopCount: Int32 {
    get {return _storage._physicalShopCount}
    set {_uniqueStorage()._physicalShopCount = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var isFollower: Bool {
    get {return _storage._isFollower}
    set {_uniqueStorage()._isFollower = newValue}
  }

  public var isLiked: Bool {
    get {return _storage._isLiked}
    set {_uniqueStorage()._isLiked = newValue}
  }

  public var isDisliked: Bool {
    get {return _storage._isDisliked}
    set {_uniqueStorage()._isDisliked = newValue}
  }

  public var photosGalleries: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PhotoGallery] {
    get {return _storage._photosGalleries}
    set {_uniqueStorage()._photosGalleries = newValue}
  }

  public var likes: Int64 {
    get {return _storage._likes}
    set {_uniqueStorage()._likes = newValue}
  }

  public var dislikes: Int64 {
    get {return _storage._dislikes}
    set {_uniqueStorage()._dislikes = newValue}
  }

  public var comments: Int64 {
    get {return _storage._comments}
    set {_uniqueStorage()._comments = newValue}
  }

  public var titleEnglish: String {
    get {return _storage._titleEnglish}
    set {_uniqueStorage()._titleEnglish = newValue}
  }

  public var commentsDisabled: Bool {
    get {return _storage._commentsDisabled}
    set {_uniqueStorage()._commentsDisabled = newValue}
  }

  public var featured: Bool {
    get {return _storage._featured}
    set {_uniqueStorage()._featured = newValue}
  }

  public var physicalShopDiscountPricePercent: Int64 {
    get {return _storage._physicalShopDiscountPricePercent}
    set {_uniqueStorage()._physicalShopDiscountPricePercent = newValue}
  }

  public var entirePlayListCount: Int32 {
    get {return _storage._entirePlayListCount}
    set {_uniqueStorage()._entirePlayListCount = newValue}
  }

  public var physicalShopSoldCount: Int32 {
    get {return _storage._physicalShopSoldCount}
    set {_uniqueStorage()._physicalShopSoldCount = newValue}
  }

  public var physicalShopSoldPrice: Int64 {
    get {return _storage._physicalShopSoldPrice}
    set {_uniqueStorage()._physicalShopSoldPrice = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var key: String = String()

  public var title: String = String()

  public var type: String = String()

  public var items: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section] = []

  public var titleEnglish: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var title: String = String()

  public var type: String = String()

  public var showType: String = String()

  public var sortField: String = String()

  public var order: String = String()

  public var linkShare: String = String()

  public var itemCount: Int32 = 0

  public var items: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionItem] = []

  public var titleEnglish: String = String()

  public var priority: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var subTitle: String {
    get {return _storage._subTitle}
    set {_uniqueStorage()._subTitle = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var subType: String {
    get {return _storage._subType}
    set {_uniqueStorage()._subType = newValue}
  }

  public var linkShare: String {
    get {return _storage._linkShare}
    set {_uniqueStorage()._linkShare = newValue}
  }

  public var photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] {
    get {return _storage._photos}
    set {_uniqueStorage()._photos = newValue}
  }

  public var onlineShopEnable: Bool {
    get {return _storage._onlineShopEnable}
    set {_uniqueStorage()._onlineShopEnable = newValue}
  }

  public var onlineShopPrice: Int64 {
    get {return _storage._onlineShopPrice}
    set {_uniqueStorage()._onlineShopPrice = newValue}
  }

  public var physicalShopEnable: Bool {
    get {return _storage._physicalShopEnable}
    set {_uniqueStorage()._physicalShopEnable = newValue}
  }

  public var physicalShopPrice: Int64 {
    get {return _storage._physicalShopPrice}
    set {_uniqueStorage()._physicalShopPrice = newValue}
  }

  public var physicalShopCount: Int32 {
    get {return _storage._physicalShopCount}
    set {_uniqueStorage()._physicalShopCount = newValue}
  }

  public var count: Int32 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  public var followers: Int64 {
    get {return _storage._followers}
    set {_uniqueStorage()._followers = newValue}
  }

  public var plays: Int64 {
    get {return _storage._plays}
    set {_uniqueStorage()._plays = newValue}
  }

  public var likes: Int64 {
    get {return _storage._likes}
    set {_uniqueStorage()._likes = newValue}
  }

  public var dislikes: Int64 {
    get {return _storage._dislikes}
    set {_uniqueStorage()._dislikes = newValue}
  }

  public var downloads: Int64 {
    get {return _storage._downloads}
    set {_uniqueStorage()._downloads = newValue}
  }

  public var comments: Int64 {
    get {return _storage._comments}
    set {_uniqueStorage()._comments = newValue}
  }

  public var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var artists: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._artists}
    set {_uniqueStorage()._artists = newValue}
  }

  public var createdBy: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] {
    get {return _storage._createdBy}
    set {_uniqueStorage()._createdBy = newValue}
  }

  public var categories: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  public var moods: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] {
    get {return _storage._moods}
    set {_uniqueStorage()._moods = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var number: String {
    get {return _storage._number}
    set {_uniqueStorage()._number = newValue}
  }

  public var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  public var isFollower: Bool {
    get {return _storage._isFollower}
    set {_uniqueStorage()._isFollower = newValue}
  }

  public var isLiked: Bool {
    get {return _storage._isLiked}
    set {_uniqueStorage()._isLiked = newValue}
  }

  public var isDisliked: Bool {
    get {return _storage._isDisliked}
    set {_uniqueStorage()._isDisliked = newValue}
  }

  public var photosGalleries: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PhotoGallery] {
    get {return _storage._photosGalleries}
    set {_uniqueStorage()._photosGalleries = newValue}
  }

  public var physicalShopDiscountPricePercent: Int64 {
    get {return _storage._physicalShopDiscountPricePercent}
    set {_uniqueStorage()._physicalShopDiscountPricePercent = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: String = String()

  public var mimeType: String = String()

  public var quality: String = String()

  public var url: String = String()

  public var size: Int64 = 0

  public var duration: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: String = String()

  public var quality: String = String()

  public var url: String = String()

  public var size: Int64 = 0

  public var width: Int32 = 0

  public var height: Int32 = 0

  public var mimeType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PhotoGallery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var commentID: String {
    get {return _storage._commentID}
    set {_uniqueStorage()._commentID = newValue}
  }

  public var commentTime: String {
    get {return _storage._commentTime}
    set {_uniqueStorage()._commentTime = newValue}
  }

  public var prettyTime: String {
    get {return _storage._prettyTime}
    set {_uniqueStorage()._prettyTime = newValue}
  }

  public var subscriberInfo: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._subscriberInfo ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._subscriberInfo = newValue}
  }
  /// Returns true if `subscriberInfo` has been explicitly set.
  public var hasSubscriberInfo: Bool {return _storage._subscriberInfo != nil}
  /// Clears the value of `subscriberInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberInfo() {_uniqueStorage()._subscriberInfo = nil}

  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var canRemove: Bool {
    get {return _storage._canRemove}
    set {_uniqueStorage()._canRemove = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: String {
    get {return _storage._subscriberID}
    set {_uniqueStorage()._subscriberID = newValue}
  }

  public var nickName: String {
    get {return _storage._nickName}
    set {_uniqueStorage()._nickName = newValue}
  }

  public var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  public var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  public var mobile: String {
    get {return _storage._mobile}
    set {_uniqueStorage()._mobile = newValue}
  }

  public var imageURL: String {
    get {return _storage._imageURL}
    set {_uniqueStorage()._imageURL = newValue}
  }

  public var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  public var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  public var subscriberType: String {
    get {return _storage._subscriberType}
    set {_uniqueStorage()._subscriberType = newValue}
  }

  public var gender: String {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  public var birthDate: String {
    get {return _storage._birthDate}
    set {_uniqueStorage()._birthDate = newValue}
  }

  public var photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] {
    get {return _storage._photos}
    set {_uniqueStorage()._photos = newValue}
  }

  public var followers: Int64 {
    get {return _storage._followers}
    set {_uniqueStorage()._followers = newValue}
  }

  public var isPrivate: Bool {
    get {return _storage._isPrivate}
    set {_uniqueStorage()._isPrivate = newValue}
  }

  public var isFollower: Bool {
    get {return _storage._isFollower}
    set {_uniqueStorage()._isFollower = newValue}
  }

  public var address: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Address] {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  public var followings: Int64 {
    get {return _storage._followings}
    set {_uniqueStorage()._followings = newValue}
  }

  public var playlists: Int32 {
    get {return _storage._playlists}
    set {_uniqueStorage()._playlists = newValue}
  }

  public var defaultTrackQuality: Int32 {
    get {return _storage._defaultTrackQuality}
    set {_uniqueStorage()._defaultTrackQuality = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var key: String = String()

  public var title: String = String()

  public var type: String = String()

  public var linkShare: String = String()

  public var createdAt: String = String()

  public var createdBy: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []

  public var followers: Int64 = 0

  public var status: String = String()

  public var isFollower: Bool = false

  public var titleEnglish: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var key: String = String()

  public var title: String = String()

  public var type: String = String()

  public var linkShare: String = String()

  public var createdAt: String = String()

  public var createdBy: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []

  public var followers: Int64 = 0

  public var status: String = String()

  public var isFollower: Bool = false

  public var titleEnglish: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var title: String = String()

  public var description_p: String = String()

  public var url: String = String()

  public var email: String = String()

  public var number: String = String()

  public var createdAt: String = String()

  public var status: String = String()

  public var photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Subscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriptionInfo: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo {
    get {return _storage._subscriptionInfo ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo()}
    set {_uniqueStorage()._subscriptionInfo = newValue}
  }
  /// Returns true if `subscriptionInfo` has been explicitly set.
  public var hasSubscriptionInfo: Bool {return _storage._subscriptionInfo != nil}
  /// Clears the value of `subscriptionInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriptionInfo() {_uniqueStorage()._subscriptionInfo = nil}

  public var regDate: String {
    get {return _storage._regDate}
    set {_uniqueStorage()._regDate = newValue}
  }

  public var expireDate: String {
    get {return _storage._expireDate}
    set {_uniqueStorage()._expireDate = newValue}
  }

  public var expireDateLong: Int64 {
    get {return _storage._expireDateLong}
    set {_uniqueStorage()._expireDateLong = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var title: String = String()

  public var description_p: String = String()

  public var type: String = String()

  public var price: Int32 = 0

  public var validDays: Int32 = 0

  public var availableStartDate: String = String()

  public var availableEndDate: String = String()

  public var maxUse: Int32 = 0

  public var status: String = String()

  public var subscriptionLevel: String = String()

  public var titleEnglish: String = String()

  public var descriptionEnglish: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var itemID: String {
    get {return _storage._itemID}
    set {_uniqueStorage()._itemID = newValue}
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var price: Int64 {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var requestCount: Int32 {
    get {return _storage._requestCount}
    set {_uniqueStorage()._requestCount = newValue}
  }

  public var remainingCount: Int32 {
    get {return _storage._remainingCount}
    set {_uniqueStorage()._remainingCount = newValue}
  }

  public var playlist: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist {
    get {return _storage._playlist ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist()}
    set {_uniqueStorage()._playlist = newValue}
  }
  /// Returns true if `playlist` has been explicitly set.
  public var hasPlaylist: Bool {return _storage._playlist != nil}
  /// Clears the value of `playlist`. Subsequent reads from it will return its default value.
  public mutating func clearPlaylist() {_uniqueStorage()._playlist = nil}

  public var subscriptionInfo: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo {
    get {return _storage._subscriptionInfo ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo()}
    set {_uniqueStorage()._subscriptionInfo = newValue}
  }
  /// Returns true if `subscriptionInfo` has been explicitly set.
  public var hasSubscriptionInfo: Bool {return _storage._subscriptionInfo != nil}
  /// Clears the value of `subscriptionInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriptionInfo() {_uniqueStorage()._subscriptionInfo = nil}

  public var isValid: Bool {
    get {return _storage._isValid}
    set {_uniqueStorage()._isValid = newValue}
  }

  public var physicalShopDiscountPricePercent: Int64 {
    get {return _storage._physicalShopDiscountPricePercent}
    set {_uniqueStorage()._physicalShopDiscountPricePercent = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Address {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var priority: Int32 = 0

  public var nickName: String = String()

  public var mobile: String = String()

  public var phone: String = String()

  ///استان
  public var province: String = String()

  ///شهرستان
  public var city: String = String()

  ///ناحیه (محله ویژه تهران)
  public var sector: String = String()

  ///آدرس پستی
  public var address: String = String()

  ///کد پستی
  public var postalCode: String = String()

  public var recipientName: String = String()

  public var recipientPhone: String = String()

  public var locationLatitude: Double = 0

  public var locationLongitude: Double = 0

  public var `default`: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_OrdersItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var linkBank: String {
    get {return _storage._linkBank}
    set {_uniqueStorage()._linkBank = newValue}
  }

  public var count: Int32 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  public var price: Int64 {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var insertTime: String {
    get {return _storage._insertTime}
    set {_uniqueStorage()._insertTime = newValue}
  }

  public var finishTime: String {
    get {return _storage._finishTime}
    set {_uniqueStorage()._finishTime = newValue}
  }

  public var expireTime: String {
    get {return _storage._expireTime}
    set {_uniqueStorage()._expireTime = newValue}
  }

  public var subscriberInfo: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._subscriberInfo ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._subscriberInfo = newValue}
  }
  /// Returns true if `subscriberInfo` has been explicitly set.
  public var hasSubscriberInfo: Bool {return _storage._subscriberInfo != nil}
  /// Clears the value of `subscriberInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberInfo() {_uniqueStorage()._subscriberInfo = nil}

  public var items: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  public var mobile: String {
    get {return _storage._mobile}
    set {_uniqueStorage()._mobile = newValue}
  }

  public var phone: String {
    get {return _storage._phone}
    set {_uniqueStorage()._phone = newValue}
  }

  public var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  public var statusMsg: String {
    get {return _storage._statusMsg}
    set {_uniqueStorage()._statusMsg = newValue}
  }

  public var transactionID: String {
    get {return _storage._transactionID}
    set {_uniqueStorage()._transactionID = newValue}
  }

  public var factorID: String {
    get {return _storage._factorID}
    set {_uniqueStorage()._factorID = newValue}
  }

  public var refIDHolder: String {
    get {return _storage._refIDHolder}
    set {_uniqueStorage()._refIDHolder = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_checkOrderPaymentStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_albums {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var itemID: String = String()

  public var type: String = String()

  public var title: String = String()

  public var count: Int32 = 0

  public var price: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_shopOrdersGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var orderStatus: String {
    get {return _storage._orderStatus}
    set {_uniqueStorage()._orderStatus = newValue}
  }

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_albums] {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  public var refIDHolder: String {
    get {return _storage._refIDHolder}
    set {_uniqueStorage()._refIDHolder = newValue}
  }

  public var linkBank: String {
    get {return _storage._linkBank}
    set {_uniqueStorage()._linkBank = newValue}
  }

  public var createdBy: String {
    get {return _storage._createdBy}
    set {_uniqueStorage()._createdBy = newValue}
  }

  public var subscriberID: String {
    get {return _storage._subscriberID}
    set {_uniqueStorage()._subscriberID = newValue}
  }

  public var itemsCount: Int32 {
    get {return _storage._itemsCount}
    set {_uniqueStorage()._itemsCount = newValue}
  }

  public var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  public var phone: String {
    get {return _storage._phone}
    set {_uniqueStorage()._phone = newValue}
  }

  public var mobile: String {
    get {return _storage._mobile}
    set {_uniqueStorage()._mobile = newValue}
  }

  public var addressID: String {
    get {return _storage._addressID}
    set {_uniqueStorage()._addressID = newValue}
  }

  public var itemsPrice: Int64 {
    get {return _storage._itemsPrice}
    set {_uniqueStorage()._itemsPrice = newValue}
  }

  public var statusMsg: String {
    get {return _storage._statusMsg}
    set {_uniqueStorage()._statusMsg = newValue}
  }

  public var factorID: String {
    get {return _storage._factorID}
    set {_uniqueStorage()._factorID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_shopOrdersGetPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_OrdersItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PaymmentStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var perStatus: String = String()

  public var engStatus: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PaymmentStatusList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PaymmentStatus] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ChangeOrderPaymentStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ReportPlayListSold {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var startDate: String = String()

  public var endDate: String = String()

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ReportPlayList] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ReportPlayList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playListID: String = String()

  public var count: Int32 = 0

  public var price: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_NavazServicesType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var engName: String = String()

  public var perName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_NavazServicesTypeList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_NavazServicesType] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentGet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var commentID: String = String()

  public var comment: String = String()

  public var parentID: String = String()

  public var subscriberID: String = String()

  public var insertTime: String = String()

  public var status: String = String()

  public var lastupdate: String = String()

  public var commentTypeEng: String = String()

  public var commentTypePer: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  public var page: Int32 {
    get {return _storage._page}
    set {_uniqueStorage()._page = newValue}
  }

  public var totalpages: Int64 {
    get {return _storage._totalpages}
    set {_uniqueStorage()._totalpages = newValue}
  }

  public var totalitems: Int64 {
    get {return _storage._totalitems}
    set {_uniqueStorage()._totalitems = newValue}
  }

  public var subscriberInfo: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo {
    get {return _storage._subscriberInfo ?? Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo()}
    set {_uniqueStorage()._subscriberInfo = newValue}
  }
  /// Returns true if `subscriberInfo` has been explicitly set.
  public var hasSubscriberInfo: Bool {return _storage._subscriberInfo != nil}
  /// Clears the value of `subscriberInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberInfo() {_uniqueStorage()._subscriberInfo = nil}

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentGet] {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentDelete {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var engName: String = String()

  public var perName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentTypeList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Int32 = 0

  public var code: Int32 = 0

  public var msg: String = String()

  public var data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentType] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.vasl.vaslapp.products.navaz.proto.holder"

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberGet, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberFollow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberFollow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberFollow, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberFollow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberUnfollow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberUnfollow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberUnfollow, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberUnfollow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberAddressAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberAddressUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberAddressRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressDefault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberAddressDefault"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressDefault, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberAddressDefault) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberContactsUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberContactsUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberContactsUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberContactsUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberSearchList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberSearchList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberSearchList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberSearchList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistTrackList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtistTrackList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistTrackList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistTrackList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistAlbumList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtistAlbumList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistAlbumList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistAlbumList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistVideoList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtistVideoList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistVideoList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ArtistVideoList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackFeaturedChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackFeaturedChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackFeaturedChange, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackFeaturedChange) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackGet, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackLikeAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackLikeAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackLikeAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackLikeAdd) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackLikeRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackLikeRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackLikeRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackLikeRemove) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDislikeAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackDislikeAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDislikeAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDislikeAdd) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDislikeRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackDislikeRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDislikeRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackDislikeRemove) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackCommentAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackCommentUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackCommentRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackCommentList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackCommentList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackVideoAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackVideoRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackVideoList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "totalitems"),
    5: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackVideoList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackSearchList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackSearchList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackSearchList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_TrackSearchList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoFeaturedChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoFeaturedChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoFeaturedChange, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoFeaturedChange) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoGet, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoLikeAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoLikeAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoLikeAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoLikeAdd) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoLikeRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoLikeRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoLikeRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoLikeRemove) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDislikeAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoDislikeAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDislikeAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDislikeAdd) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDislikeRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoDislikeRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDislikeRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoDislikeRemove) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoCommentAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoCommentUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoCommentRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoCommentList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoCommentList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoSearchList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VideoSearchList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoSearchList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_VideoSearchList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistFeaturedChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistFeaturedChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistFeaturedChange, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistFeaturedChange) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistGet, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistTrackAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistTrackRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistTrackList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistTrackList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistLikeAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistLikeAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistLikeAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistLikeAdd) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistLikeRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistLikeRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistLikeRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistLikeRemove) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDislikeAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistDislikeAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDislikeAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDislikeAdd) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDislikeRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistDislikeRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDislikeRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistDislikeRemove) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistCommentAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistCommentUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistCommentRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistCommentList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistCommentList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistSearchList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaylistSearchList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistSearchList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PlaylistSearchList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MyPlaylistCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MyPlaylistList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MyPlaylistUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MyPlaylistDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MyPlaylistGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistGet, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MyPlaylistTrackAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MyPlaylistTrackRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MyPlaylistTrackList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MyPlaylistTrackList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageGet, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ImageGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryFollow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryFollow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryFollow, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryFollow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryUnfollow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryUnfollow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryUnfollow, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryUnfollow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryTrackAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryTrackRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryTrackList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategoryTrackList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategorySearchList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategorySearchList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategorySearchList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CategorySearchList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoodCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoodList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoodUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoodDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodFollow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoodFollow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodFollow, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodFollow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodUnfollow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoodUnfollow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodUnfollow, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodUnfollow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoodTrackAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoodTrackRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoodTrackList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodTrackList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodSearchList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoodSearchList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodSearchList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_MoodSearchList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SectionCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SectionList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SectionUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SectionDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageSectionAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageSectionAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageSectionAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageSectionAdd) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageSectionRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageSectionRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageSectionRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageSectionRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageGet, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PageGet) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriptionCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionCreate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionCreate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriptionList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriptionUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriptionDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionDelete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriptionGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionGet, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionActive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriptionActive"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Subscription? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionActive, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionActive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartValidate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopCartValidate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
    5: .same(proto: "isValid"),
    6: .same(proto: "address"),
    7: .same(proto: "count"),
    8: .same(proto: "priceSend"),
    9: .same(proto: "priceTotal"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 5: try decoder.decodeSingularBoolField(value: &self.isValid)
      case 6: try decoder.decodeSingularStringField(value: &self.address)
      case 7: try decoder.decodeSingularInt32Field(value: &self.count)
      case 8: try decoder.decodeSingularInt64Field(value: &self.priceSend)
      case 9: try decoder.decodeSingularInt64Field(value: &self.priceTotal)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    if self.isValid != false {
      try visitor.visitSingularBoolField(value: self.isValid, fieldNumber: 5)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 6)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 7)
    }
    if self.priceSend != 0 {
      try visitor.visitSingularInt64Field(value: self.priceSend, fieldNumber: 8)
    }
    if self.priceTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.priceTotal, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartValidate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartValidate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.isValid != rhs.isValid {return false}
    if lhs.address != rhs.address {return false}
    if lhs.count != rhs.count {return false}
    if lhs.priceSend != rhs.priceSend {return false}
    if lhs.priceTotal != rhs.priceTotal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartRegister: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopCartRegister"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "orderId"),
    5: .same(proto: "bankUrl"),
    6: .same(proto: "data"),
    7: .same(proto: "nextStatus"),
    8: .same(proto: "address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.orderID)
      case 5: try decoder.decodeSingularStringField(value: &self.bankURL)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 7: try decoder.decodeSingularStringField(value: &self.nextStatus)
      case 8: try decoder.decodeSingularStringField(value: &self.address)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 4)
    }
    if !self.bankURL.isEmpty {
      try visitor.visitSingularStringField(value: self.bankURL, fieldNumber: 5)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 6)
    }
    if !self.nextStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.nextStatus, fieldNumber: 7)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartRegister, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartRegister) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.bankURL != rhs.bankURL {return false}
    if lhs.data != rhs.data {return false}
    if lhs.nextStatus != rhs.nextStatus {return false}
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopOrdersComplete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopOrdersComplete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopOrdersComplete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopOrdersComplete) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopCartPlaylistAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistAdd, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistAdd) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopCartPlaylistRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopCartPlaylistUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartPlaylistUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopCartItemRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemRemove, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemRemove) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopCartItemUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "remainingCount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.remainingCount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.remainingCount != 0 {
      try visitor.visitSingularInt32Field(value: self.remainingCount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemUpdate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemUpdate) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.remainingCount != rhs.remainingCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemClear: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopCartItemClear"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemClear, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemClear) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopCartItemList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "price"),
    5: .same(proto: "count"),
    6: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt64Field(value: &self.price)
      case 5: try decoder.decodeSingularInt32Field(value: &self.count)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 4)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 5)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopCartItemList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.price != rhs.price {return false}
    if lhs.count != rhs.count {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItemValidate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopItemValidate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _data: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItemValidate, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItemValidate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopOrdersList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopOrdersList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularInt64Field(value: &self.totalpages)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalitems)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.totalpages != 0 {
      try visitor.visitSingularInt64Field(value: self.totalpages, fieldNumber: 5)
    }
    if self.totalitems != 0 {
      try visitor.visitSingularInt64Field(value: self.totalitems, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopOrdersList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopOrdersList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.page != rhs.page {return false}
    if lhs.totalpages != rhs.totalpages {return false}
    if lhs.totalitems != rhs.totalitems {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SearchAll: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchAll"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "artists"),
    5: .same(proto: "subscribers"),
    6: .same(proto: "playlists"),
    7: .same(proto: "tracks"),
    8: .same(proto: "videos"),
    9: .same(proto: "categories"),
    10: .same(proto: "moods"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.artists)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.subscribers)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.playlists)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.tracks)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.videos)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.categories)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.moods)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.artists.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.artists, fieldNumber: 4)
    }
    if !self.subscribers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subscribers, fieldNumber: 5)
    }
    if !self.playlists.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.playlists, fieldNumber: 6)
    }
    if !self.tracks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tracks, fieldNumber: 7)
    }
    if !self.videos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.videos, fieldNumber: 8)
    }
    if !self.categories.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categories, fieldNumber: 9)
    }
    if !self.moods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.moods, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SearchAll, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SearchAll) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.artists != rhs.artists {return false}
    if lhs.subscribers != rhs.subscribers {return false}
    if lhs.playlists != rhs.playlists {return false}
    if lhs.tracks != rhs.tracks {return false}
    if lhs.videos != rhs.videos {return false}
    if lhs.categories != rhs.categories {return false}
    if lhs.moods != rhs.moods {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Track"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "type"),
    4: .same(proto: "link"),
    5: .same(proto: "linkShare"),
    6: .same(proto: "linkHls"),
    7: .same(proto: "links"),
    8: .same(proto: "linksHls"),
    9: .same(proto: "photos"),
    11: .same(proto: "artists"),
    12: .same(proto: "name"),
    13: .same(proto: "plays"),
    14: .same(proto: "likes"),
    15: .same(proto: "dislikes"),
    16: .same(proto: "downloads"),
    17: .same(proto: "comments"),
    18: .same(proto: "commentsTop"),
    19: .same(proto: "createdAt"),
    20: .same(proto: "createdBy"),
    21: .same(proto: "lyrics"),
    22: .same(proto: "album"),
    23: .same(proto: "producers"),
    24: .same(proto: "publishers"),
    25: .standard(proto: "mixed_bys"),
    26: .standard(proto: "cover_bys"),
    27: .standard(proto: "lyrics_bys"),
    28: .same(proto: "categories"),
    29: .same(proto: "moods"),
    30: .same(proto: "onlineShopEnable"),
    31: .same(proto: "onlineShopPrice"),
    32: .same(proto: "physicalShopEnable"),
    33: .same(proto: "physicalShopPrice"),
    34: .same(proto: "physicalShopCount"),
    35: .same(proto: "status"),
    36: .same(proto: "videoCount"),
    37: .same(proto: "videos"),
    39: .same(proto: "isLiked"),
    40: .same(proto: "isDisliked"),
    41: .same(proto: "titleEnglish"),
    42: .same(proto: "commentsDisabled"),
    43: .same(proto: "featured"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _title: String = String()
    var _type: String = String()
    var _link: String = String()
    var _linkShare: String = String()
    var _linkHls: String = String()
    var _links: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link] = []
    var _linksHls: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link] = []
    var _photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] = []
    var _artists: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _name: String = String()
    var _plays: Int64 = 0
    var _likes: Int64 = 0
    var _dislikes: Int64 = 0
    var _downloads: Int64 = 0
    var _comments: Int64 = 0
    var _commentsTop: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment] = []
    var _createdAt: String = String()
    var _createdBy: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil
    var _lyrics: String = String()
    var _album: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil
    var _producers: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _publishers: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _mixedBys: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _coverBys: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _lyricsBys: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _categories: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] = []
    var _moods: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] = []
    var _onlineShopEnable: Bool = false
    var _onlineShopPrice: Int64 = 0
    var _physicalShopEnable: Bool = false
    var _physicalShopPrice: Int64 = 0
    var _physicalShopCount: Int32 = 0
    var _status: String = String()
    var _videoCount: Int32 = 0
    var _videos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video] = []
    var _isLiked: Bool = false
    var _isDisliked: Bool = false
    var _titleEnglish: String = String()
    var _commentsDisabled: Bool = false
    var _featured: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _type = source._type
      _link = source._link
      _linkShare = source._linkShare
      _linkHls = source._linkHls
      _links = source._links
      _linksHls = source._linksHls
      _photos = source._photos
      _artists = source._artists
      _name = source._name
      _plays = source._plays
      _likes = source._likes
      _dislikes = source._dislikes
      _downloads = source._downloads
      _comments = source._comments
      _commentsTop = source._commentsTop
      _createdAt = source._createdAt
      _createdBy = source._createdBy
      _lyrics = source._lyrics
      _album = source._album
      _producers = source._producers
      _publishers = source._publishers
      _mixedBys = source._mixedBys
      _coverBys = source._coverBys
      _lyricsBys = source._lyricsBys
      _categories = source._categories
      _moods = source._moods
      _onlineShopEnable = source._onlineShopEnable
      _onlineShopPrice = source._onlineShopPrice
      _physicalShopEnable = source._physicalShopEnable
      _physicalShopPrice = source._physicalShopPrice
      _physicalShopCount = source._physicalShopCount
      _status = source._status
      _videoCount = source._videoCount
      _videos = source._videos
      _isLiked = source._isLiked
      _isDisliked = source._isDisliked
      _titleEnglish = source._titleEnglish
      _commentsDisabled = source._commentsDisabled
      _featured = source._featured
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._type)
        case 4: try decoder.decodeSingularStringField(value: &_storage._link)
        case 5: try decoder.decodeSingularStringField(value: &_storage._linkShare)
        case 6: try decoder.decodeSingularStringField(value: &_storage._linkHls)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._links)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._linksHls)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._photos)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._artists)
        case 12: try decoder.decodeSingularStringField(value: &_storage._name)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._plays)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._likes)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._dislikes)
        case 16: try decoder.decodeSingularInt64Field(value: &_storage._downloads)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._comments)
        case 18: try decoder.decodeRepeatedMessageField(value: &_storage._commentsTop)
        case 19: try decoder.decodeSingularStringField(value: &_storage._createdAt)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._createdBy)
        case 21: try decoder.decodeSingularStringField(value: &_storage._lyrics)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._album)
        case 23: try decoder.decodeRepeatedMessageField(value: &_storage._producers)
        case 24: try decoder.decodeRepeatedMessageField(value: &_storage._publishers)
        case 25: try decoder.decodeRepeatedMessageField(value: &_storage._mixedBys)
        case 26: try decoder.decodeRepeatedMessageField(value: &_storage._coverBys)
        case 27: try decoder.decodeRepeatedMessageField(value: &_storage._lyricsBys)
        case 28: try decoder.decodeRepeatedMessageField(value: &_storage._categories)
        case 29: try decoder.decodeRepeatedMessageField(value: &_storage._moods)
        case 30: try decoder.decodeSingularBoolField(value: &_storage._onlineShopEnable)
        case 31: try decoder.decodeSingularInt64Field(value: &_storage._onlineShopPrice)
        case 32: try decoder.decodeSingularBoolField(value: &_storage._physicalShopEnable)
        case 33: try decoder.decodeSingularInt64Field(value: &_storage._physicalShopPrice)
        case 34: try decoder.decodeSingularInt32Field(value: &_storage._physicalShopCount)
        case 35: try decoder.decodeSingularStringField(value: &_storage._status)
        case 36: try decoder.decodeSingularInt32Field(value: &_storage._videoCount)
        case 37: try decoder.decodeRepeatedMessageField(value: &_storage._videos)
        case 39: try decoder.decodeSingularBoolField(value: &_storage._isLiked)
        case 40: try decoder.decodeSingularBoolField(value: &_storage._isDisliked)
        case 41: try decoder.decodeSingularStringField(value: &_storage._titleEnglish)
        case 42: try decoder.decodeSingularBoolField(value: &_storage._commentsDisabled)
        case 43: try decoder.decodeSingularBoolField(value: &_storage._featured)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 3)
      }
      if !_storage._link.isEmpty {
        try visitor.visitSingularStringField(value: _storage._link, fieldNumber: 4)
      }
      if !_storage._linkShare.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkShare, fieldNumber: 5)
      }
      if !_storage._linkHls.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkHls, fieldNumber: 6)
      }
      if !_storage._links.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._links, fieldNumber: 7)
      }
      if !_storage._linksHls.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._linksHls, fieldNumber: 8)
      }
      if !_storage._photos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._photos, fieldNumber: 9)
      }
      if !_storage._artists.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._artists, fieldNumber: 11)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 12)
      }
      if _storage._plays != 0 {
        try visitor.visitSingularInt64Field(value: _storage._plays, fieldNumber: 13)
      }
      if _storage._likes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likes, fieldNumber: 14)
      }
      if _storage._dislikes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._dislikes, fieldNumber: 15)
      }
      if _storage._downloads != 0 {
        try visitor.visitSingularInt64Field(value: _storage._downloads, fieldNumber: 16)
      }
      if _storage._comments != 0 {
        try visitor.visitSingularInt64Field(value: _storage._comments, fieldNumber: 17)
      }
      if !_storage._commentsTop.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._commentsTop, fieldNumber: 18)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 19)
      }
      if let v = _storage._createdBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if !_storage._lyrics.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lyrics, fieldNumber: 21)
      }
      if let v = _storage._album {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if !_storage._producers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._producers, fieldNumber: 23)
      }
      if !_storage._publishers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._publishers, fieldNumber: 24)
      }
      if !_storage._mixedBys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._mixedBys, fieldNumber: 25)
      }
      if !_storage._coverBys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._coverBys, fieldNumber: 26)
      }
      if !_storage._lyricsBys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._lyricsBys, fieldNumber: 27)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categories, fieldNumber: 28)
      }
      if !_storage._moods.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._moods, fieldNumber: 29)
      }
      if _storage._onlineShopEnable != false {
        try visitor.visitSingularBoolField(value: _storage._onlineShopEnable, fieldNumber: 30)
      }
      if _storage._onlineShopPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._onlineShopPrice, fieldNumber: 31)
      }
      if _storage._physicalShopEnable != false {
        try visitor.visitSingularBoolField(value: _storage._physicalShopEnable, fieldNumber: 32)
      }
      if _storage._physicalShopPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._physicalShopPrice, fieldNumber: 33)
      }
      if _storage._physicalShopCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._physicalShopCount, fieldNumber: 34)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 35)
      }
      if _storage._videoCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._videoCount, fieldNumber: 36)
      }
      if !_storage._videos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._videos, fieldNumber: 37)
      }
      if _storage._isLiked != false {
        try visitor.visitSingularBoolField(value: _storage._isLiked, fieldNumber: 39)
      }
      if _storage._isDisliked != false {
        try visitor.visitSingularBoolField(value: _storage._isDisliked, fieldNumber: 40)
      }
      if !_storage._titleEnglish.isEmpty {
        try visitor.visitSingularStringField(value: _storage._titleEnglish, fieldNumber: 41)
      }
      if _storage._commentsDisabled != false {
        try visitor.visitSingularBoolField(value: _storage._commentsDisabled, fieldNumber: 42)
      }
      if _storage._featured != false {
        try visitor.visitSingularBoolField(value: _storage._featured, fieldNumber: 43)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._link != rhs_storage._link {return false}
        if _storage._linkShare != rhs_storage._linkShare {return false}
        if _storage._linkHls != rhs_storage._linkHls {return false}
        if _storage._links != rhs_storage._links {return false}
        if _storage._linksHls != rhs_storage._linksHls {return false}
        if _storage._photos != rhs_storage._photos {return false}
        if _storage._artists != rhs_storage._artists {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._plays != rhs_storage._plays {return false}
        if _storage._likes != rhs_storage._likes {return false}
        if _storage._dislikes != rhs_storage._dislikes {return false}
        if _storage._downloads != rhs_storage._downloads {return false}
        if _storage._comments != rhs_storage._comments {return false}
        if _storage._commentsTop != rhs_storage._commentsTop {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._createdBy != rhs_storage._createdBy {return false}
        if _storage._lyrics != rhs_storage._lyrics {return false}
        if _storage._album != rhs_storage._album {return false}
        if _storage._producers != rhs_storage._producers {return false}
        if _storage._publishers != rhs_storage._publishers {return false}
        if _storage._mixedBys != rhs_storage._mixedBys {return false}
        if _storage._coverBys != rhs_storage._coverBys {return false}
        if _storage._lyricsBys != rhs_storage._lyricsBys {return false}
        if _storage._categories != rhs_storage._categories {return false}
        if _storage._moods != rhs_storage._moods {return false}
        if _storage._onlineShopEnable != rhs_storage._onlineShopEnable {return false}
        if _storage._onlineShopPrice != rhs_storage._onlineShopPrice {return false}
        if _storage._physicalShopEnable != rhs_storage._physicalShopEnable {return false}
        if _storage._physicalShopPrice != rhs_storage._physicalShopPrice {return false}
        if _storage._physicalShopCount != rhs_storage._physicalShopCount {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._videoCount != rhs_storage._videoCount {return false}
        if _storage._videos != rhs_storage._videos {return false}
        if _storage._isLiked != rhs_storage._isLiked {return false}
        if _storage._isDisliked != rhs_storage._isDisliked {return false}
        if _storage._titleEnglish != rhs_storage._titleEnglish {return false}
        if _storage._commentsDisabled != rhs_storage._commentsDisabled {return false}
        if _storage._featured != rhs_storage._featured {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Video"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "type"),
    4: .same(proto: "link"),
    5: .same(proto: "linkShare"),
    6: .same(proto: "linkHls"),
    7: .same(proto: "links"),
    8: .same(proto: "linksHls"),
    9: .same(proto: "photos"),
    10: .same(proto: "track"),
    11: .same(proto: "artists"),
    12: .same(proto: "name"),
    13: .same(proto: "plays"),
    14: .same(proto: "likes"),
    15: .same(proto: "dislikes"),
    16: .same(proto: "downloads"),
    17: .same(proto: "comments"),
    18: .same(proto: "commentsTop"),
    19: .same(proto: "createdAt"),
    20: .same(proto: "createdBy"),
    21: .same(proto: "subtitle"),
    22: .same(proto: "album"),
    23: .same(proto: "producers"),
    24: .same(proto: "publishers"),
    25: .standard(proto: "mixed_bys"),
    27: .standard(proto: "subtitle_bys"),
    28: .same(proto: "categories"),
    29: .same(proto: "moods"),
    30: .same(proto: "onlineShopEnable"),
    31: .same(proto: "onlineShopPrice"),
    32: .same(proto: "physicalShopEnable"),
    33: .same(proto: "physicalShopPrice"),
    34: .same(proto: "physicalShopCount"),
    35: .same(proto: "status"),
    37: .same(proto: "isLiked"),
    38: .same(proto: "isDisliked"),
    39: .same(proto: "titleEnglish"),
    40: .same(proto: "commentsDisabled"),
    41: .same(proto: "featured"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _title: String = String()
    var _type: String = String()
    var _link: String = String()
    var _linkShare: String = String()
    var _linkHls: String = String()
    var _links: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link] = []
    var _linksHls: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link] = []
    var _photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] = []
    var _track: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track? = nil
    var _artists: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _name: String = String()
    var _plays: Int64 = 0
    var _likes: Int64 = 0
    var _dislikes: Int64 = 0
    var _downloads: Int64 = 0
    var _comments: Int64 = 0
    var _commentsTop: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment] = []
    var _createdAt: String = String()
    var _createdBy: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil
    var _subtitle: String = String()
    var _album: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil
    var _producers: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _publishers: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _mixedBys: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _subtitleBys: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _categories: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] = []
    var _moods: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] = []
    var _onlineShopEnable: Bool = false
    var _onlineShopPrice: Int64 = 0
    var _physicalShopEnable: Bool = false
    var _physicalShopPrice: Int64 = 0
    var _physicalShopCount: Int32 = 0
    var _status: String = String()
    var _isLiked: Bool = false
    var _isDisliked: Bool = false
    var _titleEnglish: String = String()
    var _commentsDisabled: Bool = false
    var _featured: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _type = source._type
      _link = source._link
      _linkShare = source._linkShare
      _linkHls = source._linkHls
      _links = source._links
      _linksHls = source._linksHls
      _photos = source._photos
      _track = source._track
      _artists = source._artists
      _name = source._name
      _plays = source._plays
      _likes = source._likes
      _dislikes = source._dislikes
      _downloads = source._downloads
      _comments = source._comments
      _commentsTop = source._commentsTop
      _createdAt = source._createdAt
      _createdBy = source._createdBy
      _subtitle = source._subtitle
      _album = source._album
      _producers = source._producers
      _publishers = source._publishers
      _mixedBys = source._mixedBys
      _subtitleBys = source._subtitleBys
      _categories = source._categories
      _moods = source._moods
      _onlineShopEnable = source._onlineShopEnable
      _onlineShopPrice = source._onlineShopPrice
      _physicalShopEnable = source._physicalShopEnable
      _physicalShopPrice = source._physicalShopPrice
      _physicalShopCount = source._physicalShopCount
      _status = source._status
      _isLiked = source._isLiked
      _isDisliked = source._isDisliked
      _titleEnglish = source._titleEnglish
      _commentsDisabled = source._commentsDisabled
      _featured = source._featured
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._type)
        case 4: try decoder.decodeSingularStringField(value: &_storage._link)
        case 5: try decoder.decodeSingularStringField(value: &_storage._linkShare)
        case 6: try decoder.decodeSingularStringField(value: &_storage._linkHls)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._links)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._linksHls)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._photos)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._track)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._artists)
        case 12: try decoder.decodeSingularStringField(value: &_storage._name)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._plays)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._likes)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._dislikes)
        case 16: try decoder.decodeSingularInt64Field(value: &_storage._downloads)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._comments)
        case 18: try decoder.decodeRepeatedMessageField(value: &_storage._commentsTop)
        case 19: try decoder.decodeSingularStringField(value: &_storage._createdAt)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._createdBy)
        case 21: try decoder.decodeSingularStringField(value: &_storage._subtitle)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._album)
        case 23: try decoder.decodeRepeatedMessageField(value: &_storage._producers)
        case 24: try decoder.decodeRepeatedMessageField(value: &_storage._publishers)
        case 25: try decoder.decodeRepeatedMessageField(value: &_storage._mixedBys)
        case 27: try decoder.decodeRepeatedMessageField(value: &_storage._subtitleBys)
        case 28: try decoder.decodeRepeatedMessageField(value: &_storage._categories)
        case 29: try decoder.decodeRepeatedMessageField(value: &_storage._moods)
        case 30: try decoder.decodeSingularBoolField(value: &_storage._onlineShopEnable)
        case 31: try decoder.decodeSingularInt64Field(value: &_storage._onlineShopPrice)
        case 32: try decoder.decodeSingularBoolField(value: &_storage._physicalShopEnable)
        case 33: try decoder.decodeSingularInt64Field(value: &_storage._physicalShopPrice)
        case 34: try decoder.decodeSingularInt32Field(value: &_storage._physicalShopCount)
        case 35: try decoder.decodeSingularStringField(value: &_storage._status)
        case 37: try decoder.decodeSingularBoolField(value: &_storage._isLiked)
        case 38: try decoder.decodeSingularBoolField(value: &_storage._isDisliked)
        case 39: try decoder.decodeSingularStringField(value: &_storage._titleEnglish)
        case 40: try decoder.decodeSingularBoolField(value: &_storage._commentsDisabled)
        case 41: try decoder.decodeSingularBoolField(value: &_storage._featured)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 3)
      }
      if !_storage._link.isEmpty {
        try visitor.visitSingularStringField(value: _storage._link, fieldNumber: 4)
      }
      if !_storage._linkShare.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkShare, fieldNumber: 5)
      }
      if !_storage._linkHls.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkHls, fieldNumber: 6)
      }
      if !_storage._links.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._links, fieldNumber: 7)
      }
      if !_storage._linksHls.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._linksHls, fieldNumber: 8)
      }
      if !_storage._photos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._photos, fieldNumber: 9)
      }
      if let v = _storage._track {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if !_storage._artists.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._artists, fieldNumber: 11)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 12)
      }
      if _storage._plays != 0 {
        try visitor.visitSingularInt64Field(value: _storage._plays, fieldNumber: 13)
      }
      if _storage._likes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likes, fieldNumber: 14)
      }
      if _storage._dislikes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._dislikes, fieldNumber: 15)
      }
      if _storage._downloads != 0 {
        try visitor.visitSingularInt64Field(value: _storage._downloads, fieldNumber: 16)
      }
      if _storage._comments != 0 {
        try visitor.visitSingularInt64Field(value: _storage._comments, fieldNumber: 17)
      }
      if !_storage._commentsTop.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._commentsTop, fieldNumber: 18)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 19)
      }
      if let v = _storage._createdBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if !_storage._subtitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subtitle, fieldNumber: 21)
      }
      if let v = _storage._album {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if !_storage._producers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._producers, fieldNumber: 23)
      }
      if !_storage._publishers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._publishers, fieldNumber: 24)
      }
      if !_storage._mixedBys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._mixedBys, fieldNumber: 25)
      }
      if !_storage._subtitleBys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._subtitleBys, fieldNumber: 27)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categories, fieldNumber: 28)
      }
      if !_storage._moods.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._moods, fieldNumber: 29)
      }
      if _storage._onlineShopEnable != false {
        try visitor.visitSingularBoolField(value: _storage._onlineShopEnable, fieldNumber: 30)
      }
      if _storage._onlineShopPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._onlineShopPrice, fieldNumber: 31)
      }
      if _storage._physicalShopEnable != false {
        try visitor.visitSingularBoolField(value: _storage._physicalShopEnable, fieldNumber: 32)
      }
      if _storage._physicalShopPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._physicalShopPrice, fieldNumber: 33)
      }
      if _storage._physicalShopCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._physicalShopCount, fieldNumber: 34)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 35)
      }
      if _storage._isLiked != false {
        try visitor.visitSingularBoolField(value: _storage._isLiked, fieldNumber: 37)
      }
      if _storage._isDisliked != false {
        try visitor.visitSingularBoolField(value: _storage._isDisliked, fieldNumber: 38)
      }
      if !_storage._titleEnglish.isEmpty {
        try visitor.visitSingularStringField(value: _storage._titleEnglish, fieldNumber: 39)
      }
      if _storage._commentsDisabled != false {
        try visitor.visitSingularBoolField(value: _storage._commentsDisabled, fieldNumber: 40)
      }
      if _storage._featured != false {
        try visitor.visitSingularBoolField(value: _storage._featured, fieldNumber: 41)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Video) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._link != rhs_storage._link {return false}
        if _storage._linkShare != rhs_storage._linkShare {return false}
        if _storage._linkHls != rhs_storage._linkHls {return false}
        if _storage._links != rhs_storage._links {return false}
        if _storage._linksHls != rhs_storage._linksHls {return false}
        if _storage._photos != rhs_storage._photos {return false}
        if _storage._track != rhs_storage._track {return false}
        if _storage._artists != rhs_storage._artists {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._plays != rhs_storage._plays {return false}
        if _storage._likes != rhs_storage._likes {return false}
        if _storage._dislikes != rhs_storage._dislikes {return false}
        if _storage._downloads != rhs_storage._downloads {return false}
        if _storage._comments != rhs_storage._comments {return false}
        if _storage._commentsTop != rhs_storage._commentsTop {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._createdBy != rhs_storage._createdBy {return false}
        if _storage._subtitle != rhs_storage._subtitle {return false}
        if _storage._album != rhs_storage._album {return false}
        if _storage._producers != rhs_storage._producers {return false}
        if _storage._publishers != rhs_storage._publishers {return false}
        if _storage._mixedBys != rhs_storage._mixedBys {return false}
        if _storage._subtitleBys != rhs_storage._subtitleBys {return false}
        if _storage._categories != rhs_storage._categories {return false}
        if _storage._moods != rhs_storage._moods {return false}
        if _storage._onlineShopEnable != rhs_storage._onlineShopEnable {return false}
        if _storage._onlineShopPrice != rhs_storage._onlineShopPrice {return false}
        if _storage._physicalShopEnable != rhs_storage._physicalShopEnable {return false}
        if _storage._physicalShopPrice != rhs_storage._physicalShopPrice {return false}
        if _storage._physicalShopCount != rhs_storage._physicalShopCount {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._isLiked != rhs_storage._isLiked {return false}
        if _storage._isDisliked != rhs_storage._isDisliked {return false}
        if _storage._titleEnglish != rhs_storage._titleEnglish {return false}
        if _storage._commentsDisabled != rhs_storage._commentsDisabled {return false}
        if _storage._featured != rhs_storage._featured {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Playlist"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "type"),
    4: .same(proto: "subType"),
    5: .same(proto: "linkShare"),
    6: .same(proto: "photos"),
    7: .same(proto: "items"),
    8: .same(proto: "itemCount"),
    9: .same(proto: "artists"),
    10: .same(proto: "followers"),
    11: .same(proto: "createdAt"),
    12: .same(proto: "createdBy"),
    13: .same(proto: "coverBy"),
    14: .same(proto: "categories"),
    15: .same(proto: "moods"),
    16: .same(proto: "onlineShopEnable"),
    17: .same(proto: "onlineShopPrice"),
    18: .same(proto: "physicalShopEnable"),
    19: .same(proto: "physicalShopPrice"),
    20: .same(proto: "physicalShopCount"),
    21: .same(proto: "status"),
    22: .same(proto: "isFollower"),
    23: .same(proto: "isLiked"),
    24: .same(proto: "isDisliked"),
    25: .same(proto: "photosGalleries"),
    26: .same(proto: "likes"),
    27: .same(proto: "dislikes"),
    28: .same(proto: "comments"),
    29: .same(proto: "titleEnglish"),
    30: .same(proto: "commentsDisabled"),
    31: .same(proto: "featured"),
    32: .same(proto: "physicalShopDiscountPricePercent"),
    33: .same(proto: "entirePlayListCount"),
    34: .same(proto: "physicalShopSoldCount"),
    35: .same(proto: "physicalShopSoldPrice"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _title: String = String()
    var _type: String = String()
    var _subType: String = String()
    var _linkShare: String = String()
    var _photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] = []
    var _items: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Track] = []
    var _itemCount: Int32 = 0
    var _artists: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _followers: Int64 = 0
    var _createdAt: String = String()
    var _createdBy: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _coverBy: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _categories: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] = []
    var _moods: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] = []
    var _onlineShopEnable: Bool = false
    var _onlineShopPrice: Int64 = 0
    var _physicalShopEnable: Bool = false
    var _physicalShopPrice: Int64 = 0
    var _physicalShopCount: Int32 = 0
    var _status: String = String()
    var _isFollower: Bool = false
    var _isLiked: Bool = false
    var _isDisliked: Bool = false
    var _photosGalleries: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PhotoGallery] = []
    var _likes: Int64 = 0
    var _dislikes: Int64 = 0
    var _comments: Int64 = 0
    var _titleEnglish: String = String()
    var _commentsDisabled: Bool = false
    var _featured: Bool = false
    var _physicalShopDiscountPricePercent: Int64 = 0
    var _entirePlayListCount: Int32 = 0
    var _physicalShopSoldCount: Int32 = 0
    var _physicalShopSoldPrice: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _type = source._type
      _subType = source._subType
      _linkShare = source._linkShare
      _photos = source._photos
      _items = source._items
      _itemCount = source._itemCount
      _artists = source._artists
      _followers = source._followers
      _createdAt = source._createdAt
      _createdBy = source._createdBy
      _coverBy = source._coverBy
      _categories = source._categories
      _moods = source._moods
      _onlineShopEnable = source._onlineShopEnable
      _onlineShopPrice = source._onlineShopPrice
      _physicalShopEnable = source._physicalShopEnable
      _physicalShopPrice = source._physicalShopPrice
      _physicalShopCount = source._physicalShopCount
      _status = source._status
      _isFollower = source._isFollower
      _isLiked = source._isLiked
      _isDisliked = source._isDisliked
      _photosGalleries = source._photosGalleries
      _likes = source._likes
      _dislikes = source._dislikes
      _comments = source._comments
      _titleEnglish = source._titleEnglish
      _commentsDisabled = source._commentsDisabled
      _featured = source._featured
      _physicalShopDiscountPricePercent = source._physicalShopDiscountPricePercent
      _entirePlayListCount = source._entirePlayListCount
      _physicalShopSoldCount = source._physicalShopSoldCount
      _physicalShopSoldPrice = source._physicalShopSoldPrice
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._type)
        case 4: try decoder.decodeSingularStringField(value: &_storage._subType)
        case 5: try decoder.decodeSingularStringField(value: &_storage._linkShare)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._photos)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._items)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._itemCount)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._artists)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._followers)
        case 11: try decoder.decodeSingularStringField(value: &_storage._createdAt)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._createdBy)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._coverBy)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._categories)
        case 15: try decoder.decodeRepeatedMessageField(value: &_storage._moods)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._onlineShopEnable)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._onlineShopPrice)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._physicalShopEnable)
        case 19: try decoder.decodeSingularInt64Field(value: &_storage._physicalShopPrice)
        case 20: try decoder.decodeSingularInt32Field(value: &_storage._physicalShopCount)
        case 21: try decoder.decodeSingularStringField(value: &_storage._status)
        case 22: try decoder.decodeSingularBoolField(value: &_storage._isFollower)
        case 23: try decoder.decodeSingularBoolField(value: &_storage._isLiked)
        case 24: try decoder.decodeSingularBoolField(value: &_storage._isDisliked)
        case 25: try decoder.decodeRepeatedMessageField(value: &_storage._photosGalleries)
        case 26: try decoder.decodeSingularInt64Field(value: &_storage._likes)
        case 27: try decoder.decodeSingularInt64Field(value: &_storage._dislikes)
        case 28: try decoder.decodeSingularInt64Field(value: &_storage._comments)
        case 29: try decoder.decodeSingularStringField(value: &_storage._titleEnglish)
        case 30: try decoder.decodeSingularBoolField(value: &_storage._commentsDisabled)
        case 31: try decoder.decodeSingularBoolField(value: &_storage._featured)
        case 32: try decoder.decodeSingularInt64Field(value: &_storage._physicalShopDiscountPricePercent)
        case 33: try decoder.decodeSingularInt32Field(value: &_storage._entirePlayListCount)
        case 34: try decoder.decodeSingularInt32Field(value: &_storage._physicalShopSoldCount)
        case 35: try decoder.decodeSingularInt64Field(value: &_storage._physicalShopSoldPrice)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 3)
      }
      if !_storage._subType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subType, fieldNumber: 4)
      }
      if !_storage._linkShare.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkShare, fieldNumber: 5)
      }
      if !_storage._photos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._photos, fieldNumber: 6)
      }
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 7)
      }
      if _storage._itemCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._itemCount, fieldNumber: 8)
      }
      if !_storage._artists.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._artists, fieldNumber: 9)
      }
      if _storage._followers != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followers, fieldNumber: 10)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 11)
      }
      if !_storage._createdBy.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._createdBy, fieldNumber: 12)
      }
      if !_storage._coverBy.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._coverBy, fieldNumber: 13)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categories, fieldNumber: 14)
      }
      if !_storage._moods.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._moods, fieldNumber: 15)
      }
      if _storage._onlineShopEnable != false {
        try visitor.visitSingularBoolField(value: _storage._onlineShopEnable, fieldNumber: 16)
      }
      if _storage._onlineShopPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._onlineShopPrice, fieldNumber: 17)
      }
      if _storage._physicalShopEnable != false {
        try visitor.visitSingularBoolField(value: _storage._physicalShopEnable, fieldNumber: 18)
      }
      if _storage._physicalShopPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._physicalShopPrice, fieldNumber: 19)
      }
      if _storage._physicalShopCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._physicalShopCount, fieldNumber: 20)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 21)
      }
      if _storage._isFollower != false {
        try visitor.visitSingularBoolField(value: _storage._isFollower, fieldNumber: 22)
      }
      if _storage._isLiked != false {
        try visitor.visitSingularBoolField(value: _storage._isLiked, fieldNumber: 23)
      }
      if _storage._isDisliked != false {
        try visitor.visitSingularBoolField(value: _storage._isDisliked, fieldNumber: 24)
      }
      if !_storage._photosGalleries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._photosGalleries, fieldNumber: 25)
      }
      if _storage._likes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likes, fieldNumber: 26)
      }
      if _storage._dislikes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._dislikes, fieldNumber: 27)
      }
      if _storage._comments != 0 {
        try visitor.visitSingularInt64Field(value: _storage._comments, fieldNumber: 28)
      }
      if !_storage._titleEnglish.isEmpty {
        try visitor.visitSingularStringField(value: _storage._titleEnglish, fieldNumber: 29)
      }
      if _storage._commentsDisabled != false {
        try visitor.visitSingularBoolField(value: _storage._commentsDisabled, fieldNumber: 30)
      }
      if _storage._featured != false {
        try visitor.visitSingularBoolField(value: _storage._featured, fieldNumber: 31)
      }
      if _storage._physicalShopDiscountPricePercent != 0 {
        try visitor.visitSingularInt64Field(value: _storage._physicalShopDiscountPricePercent, fieldNumber: 32)
      }
      if _storage._entirePlayListCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._entirePlayListCount, fieldNumber: 33)
      }
      if _storage._physicalShopSoldCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._physicalShopSoldCount, fieldNumber: 34)
      }
      if _storage._physicalShopSoldPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._physicalShopSoldPrice, fieldNumber: 35)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._subType != rhs_storage._subType {return false}
        if _storage._linkShare != rhs_storage._linkShare {return false}
        if _storage._photos != rhs_storage._photos {return false}
        if _storage._items != rhs_storage._items {return false}
        if _storage._itemCount != rhs_storage._itemCount {return false}
        if _storage._artists != rhs_storage._artists {return false}
        if _storage._followers != rhs_storage._followers {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._createdBy != rhs_storage._createdBy {return false}
        if _storage._coverBy != rhs_storage._coverBy {return false}
        if _storage._categories != rhs_storage._categories {return false}
        if _storage._moods != rhs_storage._moods {return false}
        if _storage._onlineShopEnable != rhs_storage._onlineShopEnable {return false}
        if _storage._onlineShopPrice != rhs_storage._onlineShopPrice {return false}
        if _storage._physicalShopEnable != rhs_storage._physicalShopEnable {return false}
        if _storage._physicalShopPrice != rhs_storage._physicalShopPrice {return false}
        if _storage._physicalShopCount != rhs_storage._physicalShopCount {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._isFollower != rhs_storage._isFollower {return false}
        if _storage._isLiked != rhs_storage._isLiked {return false}
        if _storage._isDisliked != rhs_storage._isDisliked {return false}
        if _storage._photosGalleries != rhs_storage._photosGalleries {return false}
        if _storage._likes != rhs_storage._likes {return false}
        if _storage._dislikes != rhs_storage._dislikes {return false}
        if _storage._comments != rhs_storage._comments {return false}
        if _storage._titleEnglish != rhs_storage._titleEnglish {return false}
        if _storage._commentsDisabled != rhs_storage._commentsDisabled {return false}
        if _storage._featured != rhs_storage._featured {return false}
        if _storage._physicalShopDiscountPricePercent != rhs_storage._physicalShopDiscountPricePercent {return false}
        if _storage._entirePlayListCount != rhs_storage._entirePlayListCount {return false}
        if _storage._physicalShopSoldCount != rhs_storage._physicalShopSoldCount {return false}
        if _storage._physicalShopSoldPrice != rhs_storage._physicalShopSoldPrice {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Page"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
    3: .same(proto: "title"),
    4: .same(proto: "type"),
    5: .same(proto: "items"),
    6: .same(proto: "titleEnglish"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.key)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      case 4: try decoder.decodeSingularStringField(value: &self.type)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.items)
      case 6: try decoder.decodeSingularStringField(value: &self.titleEnglish)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 4)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 5)
    }
    if !self.titleEnglish.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEnglish, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Page) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.key != rhs.key {return false}
    if lhs.title != rhs.title {return false}
    if lhs.type != rhs.type {return false}
    if lhs.items != rhs.items {return false}
    if lhs.titleEnglish != rhs.titleEnglish {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Section"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "type"),
    4: .same(proto: "showType"),
    5: .same(proto: "sortField"),
    6: .same(proto: "order"),
    7: .same(proto: "linkShare"),
    8: .same(proto: "itemCount"),
    9: .same(proto: "items"),
    10: .same(proto: "titleEnglish"),
    11: .same(proto: "priority"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.type)
      case 4: try decoder.decodeSingularStringField(value: &self.showType)
      case 5: try decoder.decodeSingularStringField(value: &self.sortField)
      case 6: try decoder.decodeSingularStringField(value: &self.order)
      case 7: try decoder.decodeSingularStringField(value: &self.linkShare)
      case 8: try decoder.decodeSingularInt32Field(value: &self.itemCount)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.items)
      case 10: try decoder.decodeSingularStringField(value: &self.titleEnglish)
      case 11: try decoder.decodeSingularInt32Field(value: &self.priority)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 3)
    }
    if !self.showType.isEmpty {
      try visitor.visitSingularStringField(value: self.showType, fieldNumber: 4)
    }
    if !self.sortField.isEmpty {
      try visitor.visitSingularStringField(value: self.sortField, fieldNumber: 5)
    }
    if !self.order.isEmpty {
      try visitor.visitSingularStringField(value: self.order, fieldNumber: 6)
    }
    if !self.linkShare.isEmpty {
      try visitor.visitSingularStringField(value: self.linkShare, fieldNumber: 7)
    }
    if self.itemCount != 0 {
      try visitor.visitSingularInt32Field(value: self.itemCount, fieldNumber: 8)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 9)
    }
    if !self.titleEnglish.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEnglish, fieldNumber: 10)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Section) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.type != rhs.type {return false}
    if lhs.showType != rhs.showType {return false}
    if lhs.sortField != rhs.sortField {return false}
    if lhs.order != rhs.order {return false}
    if lhs.linkShare != rhs.linkShare {return false}
    if lhs.itemCount != rhs.itemCount {return false}
    if lhs.items != rhs.items {return false}
    if lhs.titleEnglish != rhs.titleEnglish {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SectionItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "subTitle"),
    4: .same(proto: "name"),
    5: .same(proto: "type"),
    6: .same(proto: "subType"),
    7: .same(proto: "linkShare"),
    8: .same(proto: "photos"),
    9: .same(proto: "onlineShopEnable"),
    10: .same(proto: "onlineShopPrice"),
    11: .same(proto: "physicalShopEnable"),
    12: .same(proto: "physicalShopPrice"),
    13: .same(proto: "physicalShopCount"),
    14: .same(proto: "count"),
    15: .same(proto: "followers"),
    16: .same(proto: "plays"),
    17: .same(proto: "likes"),
    18: .same(proto: "dislikes"),
    19: .same(proto: "downloads"),
    20: .same(proto: "comments"),
    21: .same(proto: "createdAt"),
    22: .same(proto: "artists"),
    23: .same(proto: "createdBy"),
    24: .same(proto: "categories"),
    25: .same(proto: "moods"),
    26: .same(proto: "description"),
    27: .same(proto: "url"),
    28: .same(proto: "number"),
    29: .same(proto: "email"),
    30: .same(proto: "isFollower"),
    31: .same(proto: "isLiked"),
    32: .same(proto: "isDisliked"),
    33: .same(proto: "photosGalleries"),
    34: .same(proto: "physicalShopDiscountPricePercent"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _title: String = String()
    var _subTitle: String = String()
    var _name: String = String()
    var _type: String = String()
    var _subType: String = String()
    var _linkShare: String = String()
    var _photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] = []
    var _onlineShopEnable: Bool = false
    var _onlineShopPrice: Int64 = 0
    var _physicalShopEnable: Bool = false
    var _physicalShopPrice: Int64 = 0
    var _physicalShopCount: Int32 = 0
    var _count: Int32 = 0
    var _followers: Int64 = 0
    var _plays: Int64 = 0
    var _likes: Int64 = 0
    var _dislikes: Int64 = 0
    var _downloads: Int64 = 0
    var _comments: Int64 = 0
    var _createdAt: String = String()
    var _artists: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _createdBy: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo] = []
    var _categories: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category] = []
    var _moods: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood] = []
    var _description_p: String = String()
    var _url: String = String()
    var _number: String = String()
    var _email: String = String()
    var _isFollower: Bool = false
    var _isLiked: Bool = false
    var _isDisliked: Bool = false
    var _photosGalleries: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PhotoGallery] = []
    var _physicalShopDiscountPricePercent: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _subTitle = source._subTitle
      _name = source._name
      _type = source._type
      _subType = source._subType
      _linkShare = source._linkShare
      _photos = source._photos
      _onlineShopEnable = source._onlineShopEnable
      _onlineShopPrice = source._onlineShopPrice
      _physicalShopEnable = source._physicalShopEnable
      _physicalShopPrice = source._physicalShopPrice
      _physicalShopCount = source._physicalShopCount
      _count = source._count
      _followers = source._followers
      _plays = source._plays
      _likes = source._likes
      _dislikes = source._dislikes
      _downloads = source._downloads
      _comments = source._comments
      _createdAt = source._createdAt
      _artists = source._artists
      _createdBy = source._createdBy
      _categories = source._categories
      _moods = source._moods
      _description_p = source._description_p
      _url = source._url
      _number = source._number
      _email = source._email
      _isFollower = source._isFollower
      _isLiked = source._isLiked
      _isDisliked = source._isDisliked
      _photosGalleries = source._photosGalleries
      _physicalShopDiscountPricePercent = source._physicalShopDiscountPricePercent
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._subTitle)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularStringField(value: &_storage._type)
        case 6: try decoder.decodeSingularStringField(value: &_storage._subType)
        case 7: try decoder.decodeSingularStringField(value: &_storage._linkShare)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._photos)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._onlineShopEnable)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._onlineShopPrice)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._physicalShopEnable)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._physicalShopPrice)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._physicalShopCount)
        case 14: try decoder.decodeSingularInt32Field(value: &_storage._count)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._followers)
        case 16: try decoder.decodeSingularInt64Field(value: &_storage._plays)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._likes)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._dislikes)
        case 19: try decoder.decodeSingularInt64Field(value: &_storage._downloads)
        case 20: try decoder.decodeSingularInt64Field(value: &_storage._comments)
        case 21: try decoder.decodeSingularStringField(value: &_storage._createdAt)
        case 22: try decoder.decodeRepeatedMessageField(value: &_storage._artists)
        case 23: try decoder.decodeRepeatedMessageField(value: &_storage._createdBy)
        case 24: try decoder.decodeRepeatedMessageField(value: &_storage._categories)
        case 25: try decoder.decodeRepeatedMessageField(value: &_storage._moods)
        case 26: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 27: try decoder.decodeSingularStringField(value: &_storage._url)
        case 28: try decoder.decodeSingularStringField(value: &_storage._number)
        case 29: try decoder.decodeSingularStringField(value: &_storage._email)
        case 30: try decoder.decodeSingularBoolField(value: &_storage._isFollower)
        case 31: try decoder.decodeSingularBoolField(value: &_storage._isLiked)
        case 32: try decoder.decodeSingularBoolField(value: &_storage._isDisliked)
        case 33: try decoder.decodeRepeatedMessageField(value: &_storage._photosGalleries)
        case 34: try decoder.decodeSingularInt64Field(value: &_storage._physicalShopDiscountPricePercent)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._subTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subTitle, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 5)
      }
      if !_storage._subType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subType, fieldNumber: 6)
      }
      if !_storage._linkShare.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkShare, fieldNumber: 7)
      }
      if !_storage._photos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._photos, fieldNumber: 8)
      }
      if _storage._onlineShopEnable != false {
        try visitor.visitSingularBoolField(value: _storage._onlineShopEnable, fieldNumber: 9)
      }
      if _storage._onlineShopPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._onlineShopPrice, fieldNumber: 10)
      }
      if _storage._physicalShopEnable != false {
        try visitor.visitSingularBoolField(value: _storage._physicalShopEnable, fieldNumber: 11)
      }
      if _storage._physicalShopPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._physicalShopPrice, fieldNumber: 12)
      }
      if _storage._physicalShopCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._physicalShopCount, fieldNumber: 13)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt32Field(value: _storage._count, fieldNumber: 14)
      }
      if _storage._followers != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followers, fieldNumber: 15)
      }
      if _storage._plays != 0 {
        try visitor.visitSingularInt64Field(value: _storage._plays, fieldNumber: 16)
      }
      if _storage._likes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likes, fieldNumber: 17)
      }
      if _storage._dislikes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._dislikes, fieldNumber: 18)
      }
      if _storage._downloads != 0 {
        try visitor.visitSingularInt64Field(value: _storage._downloads, fieldNumber: 19)
      }
      if _storage._comments != 0 {
        try visitor.visitSingularInt64Field(value: _storage._comments, fieldNumber: 20)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 21)
      }
      if !_storage._artists.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._artists, fieldNumber: 22)
      }
      if !_storage._createdBy.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._createdBy, fieldNumber: 23)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categories, fieldNumber: 24)
      }
      if !_storage._moods.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._moods, fieldNumber: 25)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 26)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 27)
      }
      if !_storage._number.isEmpty {
        try visitor.visitSingularStringField(value: _storage._number, fieldNumber: 28)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 29)
      }
      if _storage._isFollower != false {
        try visitor.visitSingularBoolField(value: _storage._isFollower, fieldNumber: 30)
      }
      if _storage._isLiked != false {
        try visitor.visitSingularBoolField(value: _storage._isLiked, fieldNumber: 31)
      }
      if _storage._isDisliked != false {
        try visitor.visitSingularBoolField(value: _storage._isDisliked, fieldNumber: 32)
      }
      if !_storage._photosGalleries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._photosGalleries, fieldNumber: 33)
      }
      if _storage._physicalShopDiscountPricePercent != 0 {
        try visitor.visitSingularInt64Field(value: _storage._physicalShopDiscountPricePercent, fieldNumber: 34)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionItem, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SectionItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._subTitle != rhs_storage._subTitle {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._subType != rhs_storage._subType {return false}
        if _storage._linkShare != rhs_storage._linkShare {return false}
        if _storage._photos != rhs_storage._photos {return false}
        if _storage._onlineShopEnable != rhs_storage._onlineShopEnable {return false}
        if _storage._onlineShopPrice != rhs_storage._onlineShopPrice {return false}
        if _storage._physicalShopEnable != rhs_storage._physicalShopEnable {return false}
        if _storage._physicalShopPrice != rhs_storage._physicalShopPrice {return false}
        if _storage._physicalShopCount != rhs_storage._physicalShopCount {return false}
        if _storage._count != rhs_storage._count {return false}
        if _storage._followers != rhs_storage._followers {return false}
        if _storage._plays != rhs_storage._plays {return false}
        if _storage._likes != rhs_storage._likes {return false}
        if _storage._dislikes != rhs_storage._dislikes {return false}
        if _storage._downloads != rhs_storage._downloads {return false}
        if _storage._comments != rhs_storage._comments {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._artists != rhs_storage._artists {return false}
        if _storage._createdBy != rhs_storage._createdBy {return false}
        if _storage._categories != rhs_storage._categories {return false}
        if _storage._moods != rhs_storage._moods {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._number != rhs_storage._number {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._isFollower != rhs_storage._isFollower {return false}
        if _storage._isLiked != rhs_storage._isLiked {return false}
        if _storage._isDisliked != rhs_storage._isDisliked {return false}
        if _storage._photosGalleries != rhs_storage._photosGalleries {return false}
        if _storage._physicalShopDiscountPricePercent != rhs_storage._physicalShopDiscountPricePercent {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Link"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "mimeType"),
    3: .same(proto: "quality"),
    4: .same(proto: "url"),
    5: .same(proto: "size"),
    6: .same(proto: "duration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.mimeType)
      case 3: try decoder.decodeSingularStringField(value: &self.quality)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      case 5: try decoder.decodeSingularInt64Field(value: &self.size)
      case 6: try decoder.decodeSingularInt64Field(value: &self.duration)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 2)
    }
    if !self.quality.isEmpty {
      try visitor.visitSingularStringField(value: self.quality, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 5)
    }
    if self.duration != 0 {
      try visitor.visitSingularInt64Field(value: self.duration, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Link) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.quality != rhs.quality {return false}
    if lhs.url != rhs.url {return false}
    if lhs.size != rhs.size {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Photo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "quality"),
    3: .same(proto: "url"),
    4: .same(proto: "size"),
    5: .same(proto: "width"),
    6: .same(proto: "height"),
    7: .same(proto: "mimeType"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.quality)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      case 4: try decoder.decodeSingularInt64Field(value: &self.size)
      case 5: try decoder.decodeSingularInt32Field(value: &self.width)
      case 6: try decoder.decodeSingularInt32Field(value: &self.height)
      case 7: try decoder.decodeSingularStringField(value: &self.mimeType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.quality.isEmpty {
      try visitor.visitSingularStringField(value: self.quality, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 4)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 5)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 6)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.quality != rhs.quality {return false}
    if lhs.url != rhs.url {return false}
    if lhs.size != rhs.size {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PhotoGallery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PhotoGallery"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "photos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.photos)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.photos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.photos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PhotoGallery, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PhotoGallery) -> Bool {
    if lhs.photos != rhs.photos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Comment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commentId"),
    2: .same(proto: "commentTime"),
    3: .same(proto: "prettyTime"),
    4: .same(proto: "subscriberInfo"),
    5: .same(proto: "content"),
    6: .same(proto: "canRemove"),
  ]

  fileprivate class _StorageClass {
    var _commentID: String = String()
    var _commentTime: String = String()
    var _prettyTime: String = String()
    var _subscriberInfo: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil
    var _content: String = String()
    var _canRemove: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _commentID = source._commentID
      _commentTime = source._commentTime
      _prettyTime = source._prettyTime
      _subscriberInfo = source._subscriberInfo
      _content = source._content
      _canRemove = source._canRemove
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._commentID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._commentTime)
        case 3: try decoder.decodeSingularStringField(value: &_storage._prettyTime)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._subscriberInfo)
        case 5: try decoder.decodeSingularStringField(value: &_storage._content)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._canRemove)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._commentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._commentID, fieldNumber: 1)
      }
      if !_storage._commentTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._commentTime, fieldNumber: 2)
      }
      if !_storage._prettyTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._prettyTime, fieldNumber: 3)
      }
      if let v = _storage._subscriberInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 5)
      }
      if _storage._canRemove != false {
        try visitor.visitSingularBoolField(value: _storage._canRemove, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Comment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._commentID != rhs_storage._commentID {return false}
        if _storage._commentTime != rhs_storage._commentTime {return false}
        if _storage._prettyTime != rhs_storage._prettyTime {return false}
        if _storage._subscriberInfo != rhs_storage._subscriberInfo {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._canRemove != rhs_storage._canRemove {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscriberId"),
    2: .same(proto: "nickName"),
    3: .same(proto: "username"),
    4: .same(proto: "email"),
    5: .same(proto: "mobile"),
    6: .same(proto: "imageUrl"),
    7: .same(proto: "firstName"),
    8: .same(proto: "lastName"),
    9: .same(proto: "subscriberType"),
    10: .same(proto: "gender"),
    11: .same(proto: "birthDate"),
    12: .same(proto: "photos"),
    13: .same(proto: "followers"),
    14: .same(proto: "isPrivate"),
    15: .same(proto: "isFollower"),
    16: .same(proto: "address"),
    17: .same(proto: "followings"),
    18: .same(proto: "playlists"),
    19: .same(proto: "defaultTrackQuality"),
  ]

  fileprivate class _StorageClass {
    var _subscriberID: String = String()
    var _nickName: String = String()
    var _username: String = String()
    var _email: String = String()
    var _mobile: String = String()
    var _imageURL: String = String()
    var _firstName: String = String()
    var _lastName: String = String()
    var _subscriberType: String = String()
    var _gender: String = String()
    var _birthDate: String = String()
    var _photos: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Photo] = []
    var _followers: Int64 = 0
    var _isPrivate: Bool = false
    var _isFollower: Bool = false
    var _address: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Address] = []
    var _followings: Int64 = 0
    var _playlists: Int32 = 0
    var _defaultTrackQuality: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriberID = source._subscriberID
      _nickName = source._nickName
      _username = source._username
      _email = source._email
      _mobile = source._mobile
      _imageURL = source._imageURL
      _firstName = source._firstName
      _lastName = source._lastName
      _subscriberType = source._subscriberType
      _gender = source._gender
      _birthDate = source._birthDate
      _photos = source._photos
      _followers = source._followers
      _isPrivate = source._isPrivate
      _isFollower = source._isFollower
      _address = source._address
      _followings = source._followings
      _playlists = source._playlists
      _defaultTrackQuality = source._defaultTrackQuality
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._subscriberID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._nickName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._username)
        case 4: try decoder.decodeSingularStringField(value: &_storage._email)
        case 5: try decoder.decodeSingularStringField(value: &_storage._mobile)
        case 6: try decoder.decodeSingularStringField(value: &_storage._imageURL)
        case 7: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 8: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 9: try decoder.decodeSingularStringField(value: &_storage._subscriberType)
        case 10: try decoder.decodeSingularStringField(value: &_storage._gender)
        case 11: try decoder.decodeSingularStringField(value: &_storage._birthDate)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._photos)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._followers)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._isPrivate)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._isFollower)
        case 16: try decoder.decodeRepeatedMessageField(value: &_storage._address)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._followings)
        case 18: try decoder.decodeSingularInt32Field(value: &_storage._playlists)
        case 19: try decoder.decodeSingularInt32Field(value: &_storage._defaultTrackQuality)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._subscriberID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberID, fieldNumber: 1)
      }
      if !_storage._nickName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickName, fieldNumber: 2)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 3)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 4)
      }
      if !_storage._mobile.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mobile, fieldNumber: 5)
      }
      if !_storage._imageURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageURL, fieldNumber: 6)
      }
      if !_storage._firstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstName, fieldNumber: 7)
      }
      if !_storage._lastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastName, fieldNumber: 8)
      }
      if !_storage._subscriberType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberType, fieldNumber: 9)
      }
      if !_storage._gender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gender, fieldNumber: 10)
      }
      if !_storage._birthDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._birthDate, fieldNumber: 11)
      }
      if !_storage._photos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._photos, fieldNumber: 12)
      }
      if _storage._followers != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followers, fieldNumber: 13)
      }
      if _storage._isPrivate != false {
        try visitor.visitSingularBoolField(value: _storage._isPrivate, fieldNumber: 14)
      }
      if _storage._isFollower != false {
        try visitor.visitSingularBoolField(value: _storage._isFollower, fieldNumber: 15)
      }
      if !_storage._address.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._address, fieldNumber: 16)
      }
      if _storage._followings != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followings, fieldNumber: 17)
      }
      if _storage._playlists != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playlists, fieldNumber: 18)
      }
      if _storage._defaultTrackQuality != 0 {
        try visitor.visitSingularInt32Field(value: _storage._defaultTrackQuality, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._nickName != rhs_storage._nickName {return false}
        if _storage._username != rhs_storage._username {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._mobile != rhs_storage._mobile {return false}
        if _storage._imageURL != rhs_storage._imageURL {return false}
        if _storage._firstName != rhs_storage._firstName {return false}
        if _storage._lastName != rhs_storage._lastName {return false}
        if _storage._subscriberType != rhs_storage._subscriberType {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._birthDate != rhs_storage._birthDate {return false}
        if _storage._photos != rhs_storage._photos {return false}
        if _storage._followers != rhs_storage._followers {return false}
        if _storage._isPrivate != rhs_storage._isPrivate {return false}
        if _storage._isFollower != rhs_storage._isFollower {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._followings != rhs_storage._followings {return false}
        if _storage._playlists != rhs_storage._playlists {return false}
        if _storage._defaultTrackQuality != rhs_storage._defaultTrackQuality {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Category"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
    3: .same(proto: "title"),
    4: .same(proto: "type"),
    5: .same(proto: "linkShare"),
    6: .same(proto: "createdAt"),
    7: .same(proto: "createdBy"),
    8: .same(proto: "followers"),
    9: .same(proto: "status"),
    10: .same(proto: "isFollower"),
    11: .same(proto: "titleEnglish"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.key)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      case 4: try decoder.decodeSingularStringField(value: &self.type)
      case 5: try decoder.decodeSingularStringField(value: &self.linkShare)
      case 6: try decoder.decodeSingularStringField(value: &self.createdAt)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.createdBy)
      case 8: try decoder.decodeSingularInt64Field(value: &self.followers)
      case 9: try decoder.decodeSingularStringField(value: &self.status)
      case 10: try decoder.decodeSingularBoolField(value: &self.isFollower)
      case 11: try decoder.decodeSingularStringField(value: &self.titleEnglish)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 4)
    }
    if !self.linkShare.isEmpty {
      try visitor.visitSingularStringField(value: self.linkShare, fieldNumber: 5)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 6)
    }
    if !self.createdBy.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.createdBy, fieldNumber: 7)
    }
    if self.followers != 0 {
      try visitor.visitSingularInt64Field(value: self.followers, fieldNumber: 8)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 9)
    }
    if self.isFollower != false {
      try visitor.visitSingularBoolField(value: self.isFollower, fieldNumber: 10)
    }
    if !self.titleEnglish.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEnglish, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Category) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.key != rhs.key {return false}
    if lhs.title != rhs.title {return false}
    if lhs.type != rhs.type {return false}
    if lhs.linkShare != rhs.linkShare {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.createdBy != rhs.createdBy {return false}
    if lhs.followers != rhs.followers {return false}
    if lhs.status != rhs.status {return false}
    if lhs.isFollower != rhs.isFollower {return false}
    if lhs.titleEnglish != rhs.titleEnglish {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Mood"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
    3: .same(proto: "title"),
    4: .same(proto: "type"),
    5: .same(proto: "linkShare"),
    6: .same(proto: "createdAt"),
    7: .same(proto: "createdBy"),
    8: .same(proto: "followers"),
    9: .same(proto: "status"),
    10: .same(proto: "isFollower"),
    11: .same(proto: "titleEnglish"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.key)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      case 4: try decoder.decodeSingularStringField(value: &self.type)
      case 5: try decoder.decodeSingularStringField(value: &self.linkShare)
      case 6: try decoder.decodeSingularStringField(value: &self.createdAt)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.createdBy)
      case 8: try decoder.decodeSingularInt64Field(value: &self.followers)
      case 9: try decoder.decodeSingularStringField(value: &self.status)
      case 10: try decoder.decodeSingularBoolField(value: &self.isFollower)
      case 11: try decoder.decodeSingularStringField(value: &self.titleEnglish)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 4)
    }
    if !self.linkShare.isEmpty {
      try visitor.visitSingularStringField(value: self.linkShare, fieldNumber: 5)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 6)
    }
    if !self.createdBy.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.createdBy, fieldNumber: 7)
    }
    if self.followers != 0 {
      try visitor.visitSingularInt64Field(value: self.followers, fieldNumber: 8)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 9)
    }
    if self.isFollower != false {
      try visitor.visitSingularBoolField(value: self.isFollower, fieldNumber: 10)
    }
    if !self.titleEnglish.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEnglish, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Mood) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.key != rhs.key {return false}
    if lhs.title != rhs.title {return false}
    if lhs.type != rhs.type {return false}
    if lhs.linkShare != rhs.linkShare {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.createdBy != rhs.createdBy {return false}
    if lhs.followers != rhs.followers {return false}
    if lhs.status != rhs.status {return false}
    if lhs.isFollower != rhs.isFollower {return false}
    if lhs.titleEnglish != rhs.titleEnglish {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Image"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "url"),
    5: .same(proto: "email"),
    6: .same(proto: "number"),
    7: .same(proto: "createdAt"),
    8: .same(proto: "status"),
    9: .same(proto: "photos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      case 5: try decoder.decodeSingularStringField(value: &self.email)
      case 6: try decoder.decodeSingularStringField(value: &self.number)
      case 7: try decoder.decodeSingularStringField(value: &self.createdAt)
      case 8: try decoder.decodeSingularStringField(value: &self.status)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.photos)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 5)
    }
    if !self.number.isEmpty {
      try visitor.visitSingularStringField(value: self.number, fieldNumber: 6)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 7)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 8)
    }
    if !self.photos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.photos, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Image) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.url != rhs.url {return false}
    if lhs.email != rhs.email {return false}
    if lhs.number != rhs.number {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.status != rhs.status {return false}
    if lhs.photos != rhs.photos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Subscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Subscription"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscriptionInfo"),
    2: .same(proto: "regDate"),
    3: .same(proto: "expireDate"),
    4: .same(proto: "expireDateLong"),
  ]

  fileprivate class _StorageClass {
    var _subscriptionInfo: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo? = nil
    var _regDate: String = String()
    var _expireDate: String = String()
    var _expireDateLong: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriptionInfo = source._subscriptionInfo
      _regDate = source._regDate
      _expireDate = source._expireDate
      _expireDateLong = source._expireDateLong
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._subscriptionInfo)
        case 2: try decoder.decodeSingularStringField(value: &_storage._regDate)
        case 3: try decoder.decodeSingularStringField(value: &_storage._expireDate)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._expireDateLong)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriptionInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._regDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._regDate, fieldNumber: 2)
      }
      if !_storage._expireDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._expireDate, fieldNumber: 3)
      }
      if _storage._expireDateLong != 0 {
        try visitor.visitSingularInt64Field(value: _storage._expireDateLong, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Subscription, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Subscription) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriptionInfo != rhs_storage._subscriptionInfo {return false}
        if _storage._regDate != rhs_storage._regDate {return false}
        if _storage._expireDate != rhs_storage._expireDate {return false}
        if _storage._expireDateLong != rhs_storage._expireDateLong {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriptionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "type"),
    5: .same(proto: "price"),
    6: .same(proto: "validDays"),
    7: .same(proto: "availableStartDate"),
    8: .same(proto: "availableEndDate"),
    9: .same(proto: "maxUse"),
    10: .same(proto: "status"),
    11: .same(proto: "subscriptionLevel"),
    12: .same(proto: "titleEnglish"),
    13: .same(proto: "descriptionEnglish"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularStringField(value: &self.type)
      case 5: try decoder.decodeSingularInt32Field(value: &self.price)
      case 6: try decoder.decodeSingularInt32Field(value: &self.validDays)
      case 7: try decoder.decodeSingularStringField(value: &self.availableStartDate)
      case 8: try decoder.decodeSingularStringField(value: &self.availableEndDate)
      case 9: try decoder.decodeSingularInt32Field(value: &self.maxUse)
      case 10: try decoder.decodeSingularStringField(value: &self.status)
      case 11: try decoder.decodeSingularStringField(value: &self.subscriptionLevel)
      case 12: try decoder.decodeSingularStringField(value: &self.titleEnglish)
      case 13: try decoder.decodeSingularStringField(value: &self.descriptionEnglish)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 4)
    }
    if self.price != 0 {
      try visitor.visitSingularInt32Field(value: self.price, fieldNumber: 5)
    }
    if self.validDays != 0 {
      try visitor.visitSingularInt32Field(value: self.validDays, fieldNumber: 6)
    }
    if !self.availableStartDate.isEmpty {
      try visitor.visitSingularStringField(value: self.availableStartDate, fieldNumber: 7)
    }
    if !self.availableEndDate.isEmpty {
      try visitor.visitSingularStringField(value: self.availableEndDate, fieldNumber: 8)
    }
    if self.maxUse != 0 {
      try visitor.visitSingularInt32Field(value: self.maxUse, fieldNumber: 9)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 10)
    }
    if !self.subscriptionLevel.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionLevel, fieldNumber: 11)
    }
    if !self.titleEnglish.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEnglish, fieldNumber: 12)
    }
    if !self.descriptionEnglish.isEmpty {
      try visitor.visitSingularStringField(value: self.descriptionEnglish, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.type != rhs.type {return false}
    if lhs.price != rhs.price {return false}
    if lhs.validDays != rhs.validDays {return false}
    if lhs.availableStartDate != rhs.availableStartDate {return false}
    if lhs.availableEndDate != rhs.availableEndDate {return false}
    if lhs.maxUse != rhs.maxUse {return false}
    if lhs.status != rhs.status {return false}
    if lhs.subscriptionLevel != rhs.subscriptionLevel {return false}
    if lhs.titleEnglish != rhs.titleEnglish {return false}
    if lhs.descriptionEnglish != rhs.descriptionEnglish {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "itemId"),
    2: .same(proto: "id"),
    3: .same(proto: "title"),
    4: .same(proto: "type"),
    5: .same(proto: "price"),
    6: .same(proto: "status"),
    7: .same(proto: "requestCount"),
    8: .same(proto: "remainingCount"),
    9: .same(proto: "playlist"),
    10: .same(proto: "subscriptionInfo"),
    11: .same(proto: "isValid"),
    12: .same(proto: "physicalShopDiscountPricePercent"),
  ]

  fileprivate class _StorageClass {
    var _itemID: String = String()
    var _id: String = String()
    var _title: String = String()
    var _type: String = String()
    var _price: Int64 = 0
    var _status: String = String()
    var _requestCount: Int32 = 0
    var _remainingCount: Int32 = 0
    var _playlist: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Playlist? = nil
    var _subscriptionInfo: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriptionInfo? = nil
    var _isValid: Bool = false
    var _physicalShopDiscountPricePercent: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _itemID = source._itemID
      _id = source._id
      _title = source._title
      _type = source._type
      _price = source._price
      _status = source._status
      _requestCount = source._requestCount
      _remainingCount = source._remainingCount
      _playlist = source._playlist
      _subscriptionInfo = source._subscriptionInfo
      _isValid = source._isValid
      _physicalShopDiscountPricePercent = source._physicalShopDiscountPricePercent
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._itemID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._id)
        case 3: try decoder.decodeSingularStringField(value: &_storage._title)
        case 4: try decoder.decodeSingularStringField(value: &_storage._type)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._price)
        case 6: try decoder.decodeSingularStringField(value: &_storage._status)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._requestCount)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._remainingCount)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._playlist)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._subscriptionInfo)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._isValid)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._physicalShopDiscountPricePercent)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._itemID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._itemID, fieldNumber: 1)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 2)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 3)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 4)
      }
      if _storage._price != 0 {
        try visitor.visitSingularInt64Field(value: _storage._price, fieldNumber: 5)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 6)
      }
      if _storage._requestCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._requestCount, fieldNumber: 7)
      }
      if _storage._remainingCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._remainingCount, fieldNumber: 8)
      }
      if let v = _storage._playlist {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._subscriptionInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if _storage._isValid != false {
        try visitor.visitSingularBoolField(value: _storage._isValid, fieldNumber: 11)
      }
      if _storage._physicalShopDiscountPricePercent != 0 {
        try visitor.visitSingularInt64Field(value: _storage._physicalShopDiscountPricePercent, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._itemID != rhs_storage._itemID {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._requestCount != rhs_storage._requestCount {return false}
        if _storage._remainingCount != rhs_storage._remainingCount {return false}
        if _storage._playlist != rhs_storage._playlist {return false}
        if _storage._subscriptionInfo != rhs_storage._subscriptionInfo {return false}
        if _storage._isValid != rhs_storage._isValid {return false}
        if _storage._physicalShopDiscountPricePercent != rhs_storage._physicalShopDiscountPricePercent {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Address"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "priority"),
    3: .same(proto: "nickName"),
    4: .same(proto: "mobile"),
    5: .same(proto: "phone"),
    6: .same(proto: "province"),
    7: .same(proto: "city"),
    8: .same(proto: "sector"),
    9: .same(proto: "address"),
    10: .same(proto: "postalCode"),
    11: .same(proto: "recipientName"),
    12: .same(proto: "recipientPhone"),
    13: .same(proto: "locationLatitude"),
    14: .same(proto: "locationLongitude"),
    15: .same(proto: "default"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt32Field(value: &self.priority)
      case 3: try decoder.decodeSingularStringField(value: &self.nickName)
      case 4: try decoder.decodeSingularStringField(value: &self.mobile)
      case 5: try decoder.decodeSingularStringField(value: &self.phone)
      case 6: try decoder.decodeSingularStringField(value: &self.province)
      case 7: try decoder.decodeSingularStringField(value: &self.city)
      case 8: try decoder.decodeSingularStringField(value: &self.sector)
      case 9: try decoder.decodeSingularStringField(value: &self.address)
      case 10: try decoder.decodeSingularStringField(value: &self.postalCode)
      case 11: try decoder.decodeSingularStringField(value: &self.recipientName)
      case 12: try decoder.decodeSingularStringField(value: &self.recipientPhone)
      case 13: try decoder.decodeSingularDoubleField(value: &self.locationLatitude)
      case 14: try decoder.decodeSingularDoubleField(value: &self.locationLongitude)
      case 15: try decoder.decodeSingularBoolField(value: &self.`default`)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 2)
    }
    if !self.nickName.isEmpty {
      try visitor.visitSingularStringField(value: self.nickName, fieldNumber: 3)
    }
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 4)
    }
    if !self.phone.isEmpty {
      try visitor.visitSingularStringField(value: self.phone, fieldNumber: 5)
    }
    if !self.province.isEmpty {
      try visitor.visitSingularStringField(value: self.province, fieldNumber: 6)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 7)
    }
    if !self.sector.isEmpty {
      try visitor.visitSingularStringField(value: self.sector, fieldNumber: 8)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 9)
    }
    if !self.postalCode.isEmpty {
      try visitor.visitSingularStringField(value: self.postalCode, fieldNumber: 10)
    }
    if !self.recipientName.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientName, fieldNumber: 11)
    }
    if !self.recipientPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientPhone, fieldNumber: 12)
    }
    if self.locationLatitude != 0 {
      try visitor.visitSingularDoubleField(value: self.locationLatitude, fieldNumber: 13)
    }
    if self.locationLongitude != 0 {
      try visitor.visitSingularDoubleField(value: self.locationLongitude, fieldNumber: 14)
    }
    if self.`default` != false {
      try visitor.visitSingularBoolField(value: self.`default`, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Address, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_Address) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.nickName != rhs.nickName {return false}
    if lhs.mobile != rhs.mobile {return false}
    if lhs.phone != rhs.phone {return false}
    if lhs.province != rhs.province {return false}
    if lhs.city != rhs.city {return false}
    if lhs.sector != rhs.sector {return false}
    if lhs.address != rhs.address {return false}
    if lhs.postalCode != rhs.postalCode {return false}
    if lhs.recipientName != rhs.recipientName {return false}
    if lhs.recipientPhone != rhs.recipientPhone {return false}
    if lhs.locationLatitude != rhs.locationLatitude {return false}
    if lhs.locationLongitude != rhs.locationLongitude {return false}
    if lhs.`default` != rhs.`default` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_OrdersItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrdersItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "type"),
    4: .same(proto: "linkBank"),
    5: .same(proto: "count"),
    6: .same(proto: "price"),
    7: .same(proto: "status"),
    8: .same(proto: "insertTime"),
    9: .same(proto: "finishTime"),
    10: .same(proto: "expireTime"),
    11: .same(proto: "subscriberInfo"),
    12: .same(proto: "items"),
    13: .same(proto: "mobile"),
    14: .same(proto: "phone"),
    15: .same(proto: "address"),
    16: .same(proto: "statusMSG"),
    17: .same(proto: "transactionId"),
    18: .same(proto: "factorId"),
    19: .same(proto: "refIdHolder"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _title: String = String()
    var _type: String = String()
    var _linkBank: String = String()
    var _count: Int32 = 0
    var _price: Int64 = 0
    var _status: String = String()
    var _insertTime: String = String()
    var _finishTime: String = String()
    var _expireTime: String = String()
    var _subscriberInfo: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil
    var _items: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ShopItem] = []
    var _mobile: String = String()
    var _phone: String = String()
    var _address: String = String()
    var _statusMsg: String = String()
    var _transactionID: String = String()
    var _factorID: String = String()
    var _refIDHolder: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _type = source._type
      _linkBank = source._linkBank
      _count = source._count
      _price = source._price
      _status = source._status
      _insertTime = source._insertTime
      _finishTime = source._finishTime
      _expireTime = source._expireTime
      _subscriberInfo = source._subscriberInfo
      _items = source._items
      _mobile = source._mobile
      _phone = source._phone
      _address = source._address
      _statusMsg = source._statusMsg
      _transactionID = source._transactionID
      _factorID = source._factorID
      _refIDHolder = source._refIDHolder
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._type)
        case 4: try decoder.decodeSingularStringField(value: &_storage._linkBank)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._count)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._price)
        case 7: try decoder.decodeSingularStringField(value: &_storage._status)
        case 8: try decoder.decodeSingularStringField(value: &_storage._insertTime)
        case 9: try decoder.decodeSingularStringField(value: &_storage._finishTime)
        case 10: try decoder.decodeSingularStringField(value: &_storage._expireTime)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._subscriberInfo)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._items)
        case 13: try decoder.decodeSingularStringField(value: &_storage._mobile)
        case 14: try decoder.decodeSingularStringField(value: &_storage._phone)
        case 15: try decoder.decodeSingularStringField(value: &_storage._address)
        case 16: try decoder.decodeSingularStringField(value: &_storage._statusMsg)
        case 17: try decoder.decodeSingularStringField(value: &_storage._transactionID)
        case 18: try decoder.decodeSingularStringField(value: &_storage._factorID)
        case 19: try decoder.decodeSingularStringField(value: &_storage._refIDHolder)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 3)
      }
      if !_storage._linkBank.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkBank, fieldNumber: 4)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt32Field(value: _storage._count, fieldNumber: 5)
      }
      if _storage._price != 0 {
        try visitor.visitSingularInt64Field(value: _storage._price, fieldNumber: 6)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 7)
      }
      if !_storage._insertTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insertTime, fieldNumber: 8)
      }
      if !_storage._finishTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._finishTime, fieldNumber: 9)
      }
      if !_storage._expireTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._expireTime, fieldNumber: 10)
      }
      if let v = _storage._subscriberInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 12)
      }
      if !_storage._mobile.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mobile, fieldNumber: 13)
      }
      if !_storage._phone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._phone, fieldNumber: 14)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 15)
      }
      if !_storage._statusMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._statusMsg, fieldNumber: 16)
      }
      if !_storage._transactionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transactionID, fieldNumber: 17)
      }
      if !_storage._factorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._factorID, fieldNumber: 18)
      }
      if !_storage._refIDHolder.isEmpty {
        try visitor.visitSingularStringField(value: _storage._refIDHolder, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_OrdersItem, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_OrdersItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._linkBank != rhs_storage._linkBank {return false}
        if _storage._count != rhs_storage._count {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._insertTime != rhs_storage._insertTime {return false}
        if _storage._finishTime != rhs_storage._finishTime {return false}
        if _storage._expireTime != rhs_storage._expireTime {return false}
        if _storage._subscriberInfo != rhs_storage._subscriberInfo {return false}
        if _storage._items != rhs_storage._items {return false}
        if _storage._mobile != rhs_storage._mobile {return false}
        if _storage._phone != rhs_storage._phone {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._statusMsg != rhs_storage._statusMsg {return false}
        if _storage._transactionID != rhs_storage._transactionID {return false}
        if _storage._factorID != rhs_storage._factorID {return false}
        if _storage._refIDHolder != rhs_storage._refIDHolder {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_checkOrderPaymentStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".checkOrderPaymentStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_checkOrderPaymentStatus, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_checkOrderPaymentStatus) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_albums: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".albums"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "itemId"),
    3: .same(proto: "type"),
    4: .same(proto: "title"),
    5: .same(proto: "count"),
    6: .same(proto: "price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.itemID)
      case 3: try decoder.decodeSingularStringField(value: &self.type)
      case 4: try decoder.decodeSingularStringField(value: &self.title)
      case 5: try decoder.decodeSingularInt32Field(value: &self.count)
      case 6: try decoder.decodeSingularInt64Field(value: &self.price)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.itemID.isEmpty {
      try visitor.visitSingularStringField(value: self.itemID, fieldNumber: 2)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 5)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_albums, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_albums) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.itemID != rhs.itemID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.title != rhs.title {return false}
    if lhs.count != rhs.count {return false}
    if lhs.price != rhs.price {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_shopOrdersGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".shopOrdersGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "orderStatus"),
    5: .same(proto: "data"),
    6: .same(proto: "refIdHolder"),
    7: .same(proto: "linkBank"),
    8: .same(proto: "createdBy"),
    9: .same(proto: "subscriberId"),
    10: .same(proto: "itemsCount"),
    11: .same(proto: "address"),
    12: .same(proto: "phone"),
    13: .same(proto: "mobile"),
    14: .same(proto: "addressId"),
    15: .same(proto: "itemsPrice"),
    16: .same(proto: "statusMSG"),
    17: .same(proto: "factorId"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _orderStatus: String = String()
    var _data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_albums] = []
    var _refIDHolder: String = String()
    var _linkBank: String = String()
    var _createdBy: String = String()
    var _subscriberID: String = String()
    var _itemsCount: Int32 = 0
    var _address: String = String()
    var _phone: String = String()
    var _mobile: String = String()
    var _addressID: String = String()
    var _itemsPrice: Int64 = 0
    var _statusMsg: String = String()
    var _factorID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _orderStatus = source._orderStatus
      _data = source._data
      _refIDHolder = source._refIDHolder
      _linkBank = source._linkBank
      _createdBy = source._createdBy
      _subscriberID = source._subscriberID
      _itemsCount = source._itemsCount
      _address = source._address
      _phone = source._phone
      _mobile = source._mobile
      _addressID = source._addressID
      _itemsPrice = source._itemsPrice
      _statusMsg = source._statusMsg
      _factorID = source._factorID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularStringField(value: &_storage._orderStatus)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._data)
        case 6: try decoder.decodeSingularStringField(value: &_storage._refIDHolder)
        case 7: try decoder.decodeSingularStringField(value: &_storage._linkBank)
        case 8: try decoder.decodeSingularStringField(value: &_storage._createdBy)
        case 9: try decoder.decodeSingularStringField(value: &_storage._subscriberID)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._itemsCount)
        case 11: try decoder.decodeSingularStringField(value: &_storage._address)
        case 12: try decoder.decodeSingularStringField(value: &_storage._phone)
        case 13: try decoder.decodeSingularStringField(value: &_storage._mobile)
        case 14: try decoder.decodeSingularStringField(value: &_storage._addressID)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._itemsPrice)
        case 16: try decoder.decodeSingularStringField(value: &_storage._statusMsg)
        case 17: try decoder.decodeSingularStringField(value: &_storage._factorID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if !_storage._orderStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderStatus, fieldNumber: 4)
      }
      if !_storage._data.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._data, fieldNumber: 5)
      }
      if !_storage._refIDHolder.isEmpty {
        try visitor.visitSingularStringField(value: _storage._refIDHolder, fieldNumber: 6)
      }
      if !_storage._linkBank.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkBank, fieldNumber: 7)
      }
      if !_storage._createdBy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdBy, fieldNumber: 8)
      }
      if !_storage._subscriberID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subscriberID, fieldNumber: 9)
      }
      if _storage._itemsCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._itemsCount, fieldNumber: 10)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 11)
      }
      if !_storage._phone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._phone, fieldNumber: 12)
      }
      if !_storage._mobile.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mobile, fieldNumber: 13)
      }
      if !_storage._addressID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._addressID, fieldNumber: 14)
      }
      if _storage._itemsPrice != 0 {
        try visitor.visitSingularInt64Field(value: _storage._itemsPrice, fieldNumber: 15)
      }
      if !_storage._statusMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._statusMsg, fieldNumber: 16)
      }
      if !_storage._factorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._factorID, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_shopOrdersGet, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_shopOrdersGet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._orderStatus != rhs_storage._orderStatus {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._refIDHolder != rhs_storage._refIDHolder {return false}
        if _storage._linkBank != rhs_storage._linkBank {return false}
        if _storage._createdBy != rhs_storage._createdBy {return false}
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._itemsCount != rhs_storage._itemsCount {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._phone != rhs_storage._phone {return false}
        if _storage._mobile != rhs_storage._mobile {return false}
        if _storage._addressID != rhs_storage._addressID {return false}
        if _storage._itemsPrice != rhs_storage._itemsPrice {return false}
        if _storage._statusMsg != rhs_storage._statusMsg {return false}
        if _storage._factorID != rhs_storage._factorID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_shopOrdersGetPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".shopOrdersGetPanel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_shopOrdersGetPanel, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_shopOrdersGetPanel) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PaymmentStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaymmentStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "perStatus"),
    2: .same(proto: "engStatus"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.perStatus)
      case 2: try decoder.decodeSingularStringField(value: &self.engStatus)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.perStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.perStatus, fieldNumber: 1)
    }
    if !self.engStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.engStatus, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PaymmentStatus, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PaymmentStatus) -> Bool {
    if lhs.perStatus != rhs.perStatus {return false}
    if lhs.engStatus != rhs.engStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PaymmentStatusList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaymmentStatusList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PaymmentStatusList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_PaymmentStatusList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ChangeOrderPaymentStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeOrderPaymentStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ChangeOrderPaymentStatus, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ChangeOrderPaymentStatus) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ReportPlayListSold: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportPlayListSold"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "startDate"),
    5: .same(proto: "endDate"),
    6: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeSingularStringField(value: &self.startDate)
      case 5: try decoder.decodeSingularStringField(value: &self.endDate)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.startDate.isEmpty {
      try visitor.visitSingularStringField(value: self.startDate, fieldNumber: 4)
    }
    if !self.endDate.isEmpty {
      try visitor.visitSingularStringField(value: self.endDate, fieldNumber: 5)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ReportPlayListSold, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ReportPlayListSold) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.startDate != rhs.startDate {return false}
    if lhs.endDate != rhs.endDate {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ReportPlayList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportPlayList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playListId"),
    2: .same(proto: "count"),
    3: .same(proto: "price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.playListID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.count)
      case 3: try decoder.decodeSingularInt64Field(value: &self.price)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playListID.isEmpty {
      try visitor.visitSingularStringField(value: self.playListID, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ReportPlayList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_ReportPlayList) -> Bool {
    if lhs.playListID != rhs.playListID {return false}
    if lhs.count != rhs.count {return false}
    if lhs.price != rhs.price {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_NavazServicesType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NavazServicesType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "engName"),
    2: .same(proto: "perName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.engName)
      case 2: try decoder.decodeSingularStringField(value: &self.perName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.engName.isEmpty {
      try visitor.visitSingularStringField(value: self.engName, fieldNumber: 1)
    }
    if !self.perName.isEmpty {
      try visitor.visitSingularStringField(value: self.perName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_NavazServicesType, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_NavazServicesType) -> Bool {
    if lhs.engName != rhs.engName {return false}
    if lhs.perName != rhs.perName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_NavazServicesTypeList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NavazServicesTypeList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_NavazServicesTypeList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_NavazServicesTypeList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentGet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentGet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commentId"),
    2: .same(proto: "comment"),
    3: .same(proto: "parentId"),
    4: .same(proto: "subscriberId"),
    5: .same(proto: "insertTime"),
    6: .same(proto: "status"),
    7: .same(proto: "lastupdate"),
    8: .same(proto: "commentTypeEng"),
    9: .same(proto: "commentTypePer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.commentID)
      case 2: try decoder.decodeSingularStringField(value: &self.comment)
      case 3: try decoder.decodeSingularStringField(value: &self.parentID)
      case 4: try decoder.decodeSingularStringField(value: &self.subscriberID)
      case 5: try decoder.decodeSingularStringField(value: &self.insertTime)
      case 6: try decoder.decodeSingularStringField(value: &self.status)
      case 7: try decoder.decodeSingularStringField(value: &self.lastupdate)
      case 8: try decoder.decodeSingularStringField(value: &self.commentTypeEng)
      case 9: try decoder.decodeSingularStringField(value: &self.commentTypePer)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.commentID.isEmpty {
      try visitor.visitSingularStringField(value: self.commentID, fieldNumber: 1)
    }
    if !self.comment.isEmpty {
      try visitor.visitSingularStringField(value: self.comment, fieldNumber: 2)
    }
    if !self.parentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentID, fieldNumber: 3)
    }
    if !self.subscriberID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberID, fieldNumber: 4)
    }
    if !self.insertTime.isEmpty {
      try visitor.visitSingularStringField(value: self.insertTime, fieldNumber: 5)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 6)
    }
    if !self.lastupdate.isEmpty {
      try visitor.visitSingularStringField(value: self.lastupdate, fieldNumber: 7)
    }
    if !self.commentTypeEng.isEmpty {
      try visitor.visitSingularStringField(value: self.commentTypeEng, fieldNumber: 8)
    }
    if !self.commentTypePer.isEmpty {
      try visitor.visitSingularStringField(value: self.commentTypePer, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentGet, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentGet) -> Bool {
    if lhs.commentID != rhs.commentID {return false}
    if lhs.comment != rhs.comment {return false}
    if lhs.parentID != rhs.parentID {return false}
    if lhs.subscriberID != rhs.subscriberID {return false}
    if lhs.insertTime != rhs.insertTime {return false}
    if lhs.status != rhs.status {return false}
    if lhs.lastupdate != rhs.lastupdate {return false}
    if lhs.commentTypeEng != rhs.commentTypeEng {return false}
    if lhs.commentTypePer != rhs.commentTypePer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "page"),
    5: .same(proto: "totalpages"),
    6: .same(proto: "totalitems"),
    7: .same(proto: "subscriberInfo"),
    8: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _code: Int32 = 0
    var _msg: String = String()
    var _page: Int32 = 0
    var _totalpages: Int64 = 0
    var _totalitems: Int64 = 0
    var _subscriberInfo: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_SubscriberInfo? = nil
    var _data: [Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentGet] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _code = source._code
      _msg = source._msg
      _page = source._page
      _totalpages = source._totalpages
      _totalitems = source._totalitems
      _subscriberInfo = source._subscriberInfo
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._page)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._totalpages)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._totalitems)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._subscriberInfo)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if _storage._page != 0 {
        try visitor.visitSingularInt32Field(value: _storage._page, fieldNumber: 4)
      }
      if _storage._totalpages != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalpages, fieldNumber: 5)
      }
      if _storage._totalitems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalitems, fieldNumber: 6)
      }
      if let v = _storage._subscriberInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._data.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._data, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentList) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._page != rhs_storage._page {return false}
        if _storage._totalpages != rhs_storage._totalpages {return false}
        if _storage._totalitems != rhs_storage._totalitems {return false}
        if _storage._subscriberInfo != rhs_storage._subscriberInfo {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentDelete, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentDelete) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "engName"),
    2: .same(proto: "perName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.engName)
      case 2: try decoder.decodeSingularStringField(value: &self.perName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.engName.isEmpty {
      try visitor.visitSingularStringField(value: self.engName, fieldNumber: 1)
    }
    if !self.perName.isEmpty {
      try visitor.visitSingularStringField(value: self.perName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentType, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentType) -> Bool {
    if lhs.engName != rhs.engName {return false}
    if lhs.perName != rhs.perName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentTypeList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentTypeList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .same(proto: "msg"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentTypeList, rhs: Com_Vasl_Vaslapp_Products_Navaz_Proto_Holder_CommentTypeList) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
